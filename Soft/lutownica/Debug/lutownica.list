
lutownica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003054  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d78  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e8c  08003e8c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003e8c  08003e8c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e8c  08003e8c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000020  08003eb4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08003eb4  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125aa  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293f  00000000  00000000  000325f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d366  00000000  00000000  00034f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  00042298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d8  00000000  00000000  00042d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f785  00000000  00000000  00044200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003dca  00000000  00000000  00053985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0005774f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002390  00000000  00000000  000577a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030fc 	.word	0x080030fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	080030fc 	.word	0x080030fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb6d 	bl	8000908 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 faf9 	bl	8000830 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb5f 	bl	8000908 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb55 	bl	8000908 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb05 	bl	800087c <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fafb 	bl	800087c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fe47 	bl	8000f38 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fc93 	bl	8000bdc <__aeabi_fsub>
 80002b6:	f000 fe3f 	bl	8000f38 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fadd>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	46c6      	mov	lr, r8
 80002c8:	0243      	lsls	r3, r0, #9
 80002ca:	0a5b      	lsrs	r3, r3, #9
 80002cc:	024e      	lsls	r6, r1, #9
 80002ce:	0045      	lsls	r5, r0, #1
 80002d0:	004f      	lsls	r7, r1, #1
 80002d2:	00da      	lsls	r2, r3, #3
 80002d4:	0fc4      	lsrs	r4, r0, #31
 80002d6:	469c      	mov	ip, r3
 80002d8:	0a70      	lsrs	r0, r6, #9
 80002da:	4690      	mov	r8, r2
 80002dc:	b500      	push	{lr}
 80002de:	0e2d      	lsrs	r5, r5, #24
 80002e0:	0e3f      	lsrs	r7, r7, #24
 80002e2:	0fc9      	lsrs	r1, r1, #31
 80002e4:	09b6      	lsrs	r6, r6, #6
 80002e6:	428c      	cmp	r4, r1
 80002e8:	d04b      	beq.n	8000382 <__aeabi_fadd+0xbe>
 80002ea:	1bea      	subs	r2, r5, r7
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	dd36      	ble.n	800035e <__aeabi_fadd+0x9a>
 80002f0:	2f00      	cmp	r7, #0
 80002f2:	d061      	beq.n	80003b8 <__aeabi_fadd+0xf4>
 80002f4:	2dff      	cmp	r5, #255	; 0xff
 80002f6:	d100      	bne.n	80002fa <__aeabi_fadd+0x36>
 80002f8:	e0ad      	b.n	8000456 <__aeabi_fadd+0x192>
 80002fa:	2380      	movs	r3, #128	; 0x80
 80002fc:	04db      	lsls	r3, r3, #19
 80002fe:	431e      	orrs	r6, r3
 8000300:	2a1b      	cmp	r2, #27
 8000302:	dc00      	bgt.n	8000306 <__aeabi_fadd+0x42>
 8000304:	e0d3      	b.n	80004ae <__aeabi_fadd+0x1ea>
 8000306:	2001      	movs	r0, #1
 8000308:	4643      	mov	r3, r8
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	0143      	lsls	r3, r0, #5
 800030e:	d400      	bmi.n	8000312 <__aeabi_fadd+0x4e>
 8000310:	e08c      	b.n	800042c <__aeabi_fadd+0x168>
 8000312:	0180      	lsls	r0, r0, #6
 8000314:	0987      	lsrs	r7, r0, #6
 8000316:	0038      	movs	r0, r7
 8000318:	f000 febe 	bl	8001098 <__clzsi2>
 800031c:	3805      	subs	r0, #5
 800031e:	4087      	lsls	r7, r0
 8000320:	4285      	cmp	r5, r0
 8000322:	dc00      	bgt.n	8000326 <__aeabi_fadd+0x62>
 8000324:	e0b6      	b.n	8000494 <__aeabi_fadd+0x1d0>
 8000326:	1a2d      	subs	r5, r5, r0
 8000328:	48b3      	ldr	r0, [pc, #716]	; (80005f8 <__aeabi_fadd+0x334>)
 800032a:	4038      	ands	r0, r7
 800032c:	0743      	lsls	r3, r0, #29
 800032e:	d004      	beq.n	800033a <__aeabi_fadd+0x76>
 8000330:	230f      	movs	r3, #15
 8000332:	4003      	ands	r3, r0
 8000334:	2b04      	cmp	r3, #4
 8000336:	d000      	beq.n	800033a <__aeabi_fadd+0x76>
 8000338:	3004      	adds	r0, #4
 800033a:	0143      	lsls	r3, r0, #5
 800033c:	d400      	bmi.n	8000340 <__aeabi_fadd+0x7c>
 800033e:	e078      	b.n	8000432 <__aeabi_fadd+0x16e>
 8000340:	1c6a      	adds	r2, r5, #1
 8000342:	2dfe      	cmp	r5, #254	; 0xfe
 8000344:	d065      	beq.n	8000412 <__aeabi_fadd+0x14e>
 8000346:	0180      	lsls	r0, r0, #6
 8000348:	0a43      	lsrs	r3, r0, #9
 800034a:	469c      	mov	ip, r3
 800034c:	b2d2      	uxtb	r2, r2
 800034e:	4663      	mov	r3, ip
 8000350:	05d0      	lsls	r0, r2, #23
 8000352:	4318      	orrs	r0, r3
 8000354:	07e4      	lsls	r4, r4, #31
 8000356:	4320      	orrs	r0, r4
 8000358:	bc80      	pop	{r7}
 800035a:	46b8      	mov	r8, r7
 800035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035e:	2a00      	cmp	r2, #0
 8000360:	d035      	beq.n	80003ce <__aeabi_fadd+0x10a>
 8000362:	1b7a      	subs	r2, r7, r5
 8000364:	2d00      	cmp	r5, #0
 8000366:	d000      	beq.n	800036a <__aeabi_fadd+0xa6>
 8000368:	e0af      	b.n	80004ca <__aeabi_fadd+0x206>
 800036a:	4643      	mov	r3, r8
 800036c:	2b00      	cmp	r3, #0
 800036e:	d100      	bne.n	8000372 <__aeabi_fadd+0xae>
 8000370:	e0a7      	b.n	80004c2 <__aeabi_fadd+0x1fe>
 8000372:	1e53      	subs	r3, r2, #1
 8000374:	2a01      	cmp	r2, #1
 8000376:	d100      	bne.n	800037a <__aeabi_fadd+0xb6>
 8000378:	e12f      	b.n	80005da <__aeabi_fadd+0x316>
 800037a:	2aff      	cmp	r2, #255	; 0xff
 800037c:	d069      	beq.n	8000452 <__aeabi_fadd+0x18e>
 800037e:	001a      	movs	r2, r3
 8000380:	e0aa      	b.n	80004d8 <__aeabi_fadd+0x214>
 8000382:	1be9      	subs	r1, r5, r7
 8000384:	2900      	cmp	r1, #0
 8000386:	dd70      	ble.n	800046a <__aeabi_fadd+0x1a6>
 8000388:	2f00      	cmp	r7, #0
 800038a:	d037      	beq.n	80003fc <__aeabi_fadd+0x138>
 800038c:	2dff      	cmp	r5, #255	; 0xff
 800038e:	d062      	beq.n	8000456 <__aeabi_fadd+0x192>
 8000390:	2380      	movs	r3, #128	; 0x80
 8000392:	04db      	lsls	r3, r3, #19
 8000394:	431e      	orrs	r6, r3
 8000396:	291b      	cmp	r1, #27
 8000398:	dc00      	bgt.n	800039c <__aeabi_fadd+0xd8>
 800039a:	e0b0      	b.n	80004fe <__aeabi_fadd+0x23a>
 800039c:	2001      	movs	r0, #1
 800039e:	4440      	add	r0, r8
 80003a0:	0143      	lsls	r3, r0, #5
 80003a2:	d543      	bpl.n	800042c <__aeabi_fadd+0x168>
 80003a4:	3501      	adds	r5, #1
 80003a6:	2dff      	cmp	r5, #255	; 0xff
 80003a8:	d033      	beq.n	8000412 <__aeabi_fadd+0x14e>
 80003aa:	2301      	movs	r3, #1
 80003ac:	4a93      	ldr	r2, [pc, #588]	; (80005fc <__aeabi_fadd+0x338>)
 80003ae:	4003      	ands	r3, r0
 80003b0:	0840      	lsrs	r0, r0, #1
 80003b2:	4010      	ands	r0, r2
 80003b4:	4318      	orrs	r0, r3
 80003b6:	e7b9      	b.n	800032c <__aeabi_fadd+0x68>
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d100      	bne.n	80003be <__aeabi_fadd+0xfa>
 80003bc:	e083      	b.n	80004c6 <__aeabi_fadd+0x202>
 80003be:	1e51      	subs	r1, r2, #1
 80003c0:	2a01      	cmp	r2, #1
 80003c2:	d100      	bne.n	80003c6 <__aeabi_fadd+0x102>
 80003c4:	e0d8      	b.n	8000578 <__aeabi_fadd+0x2b4>
 80003c6:	2aff      	cmp	r2, #255	; 0xff
 80003c8:	d045      	beq.n	8000456 <__aeabi_fadd+0x192>
 80003ca:	000a      	movs	r2, r1
 80003cc:	e798      	b.n	8000300 <__aeabi_fadd+0x3c>
 80003ce:	27fe      	movs	r7, #254	; 0xfe
 80003d0:	1c6a      	adds	r2, r5, #1
 80003d2:	4217      	tst	r7, r2
 80003d4:	d000      	beq.n	80003d8 <__aeabi_fadd+0x114>
 80003d6:	e086      	b.n	80004e6 <__aeabi_fadd+0x222>
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d000      	beq.n	80003de <__aeabi_fadd+0x11a>
 80003dc:	e0b7      	b.n	800054e <__aeabi_fadd+0x28a>
 80003de:	4643      	mov	r3, r8
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d100      	bne.n	80003e6 <__aeabi_fadd+0x122>
 80003e4:	e0f3      	b.n	80005ce <__aeabi_fadd+0x30a>
 80003e6:	2200      	movs	r2, #0
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0b0      	beq.n	800034e <__aeabi_fadd+0x8a>
 80003ec:	1b98      	subs	r0, r3, r6
 80003ee:	0143      	lsls	r3, r0, #5
 80003f0:	d400      	bmi.n	80003f4 <__aeabi_fadd+0x130>
 80003f2:	e0fa      	b.n	80005ea <__aeabi_fadd+0x326>
 80003f4:	4643      	mov	r3, r8
 80003f6:	000c      	movs	r4, r1
 80003f8:	1af0      	subs	r0, r6, r3
 80003fa:	e797      	b.n	800032c <__aeabi_fadd+0x68>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_fadd+0x13e>
 8000400:	e0c8      	b.n	8000594 <__aeabi_fadd+0x2d0>
 8000402:	1e4a      	subs	r2, r1, #1
 8000404:	2901      	cmp	r1, #1
 8000406:	d100      	bne.n	800040a <__aeabi_fadd+0x146>
 8000408:	e0ae      	b.n	8000568 <__aeabi_fadd+0x2a4>
 800040a:	29ff      	cmp	r1, #255	; 0xff
 800040c:	d023      	beq.n	8000456 <__aeabi_fadd+0x192>
 800040e:	0011      	movs	r1, r2
 8000410:	e7c1      	b.n	8000396 <__aeabi_fadd+0xd2>
 8000412:	2300      	movs	r3, #0
 8000414:	22ff      	movs	r2, #255	; 0xff
 8000416:	469c      	mov	ip, r3
 8000418:	e799      	b.n	800034e <__aeabi_fadd+0x8a>
 800041a:	21fe      	movs	r1, #254	; 0xfe
 800041c:	1c6a      	adds	r2, r5, #1
 800041e:	4211      	tst	r1, r2
 8000420:	d077      	beq.n	8000512 <__aeabi_fadd+0x24e>
 8000422:	2aff      	cmp	r2, #255	; 0xff
 8000424:	d0f5      	beq.n	8000412 <__aeabi_fadd+0x14e>
 8000426:	0015      	movs	r5, r2
 8000428:	4446      	add	r6, r8
 800042a:	0870      	lsrs	r0, r6, #1
 800042c:	0743      	lsls	r3, r0, #29
 800042e:	d000      	beq.n	8000432 <__aeabi_fadd+0x16e>
 8000430:	e77e      	b.n	8000330 <__aeabi_fadd+0x6c>
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	2dff      	cmp	r5, #255	; 0xff
 8000436:	d00e      	beq.n	8000456 <__aeabi_fadd+0x192>
 8000438:	025b      	lsls	r3, r3, #9
 800043a:	0a5b      	lsrs	r3, r3, #9
 800043c:	469c      	mov	ip, r3
 800043e:	b2ea      	uxtb	r2, r5
 8000440:	e785      	b.n	800034e <__aeabi_fadd+0x8a>
 8000442:	2e00      	cmp	r6, #0
 8000444:	d007      	beq.n	8000456 <__aeabi_fadd+0x192>
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	03d2      	lsls	r2, r2, #15
 800044a:	4213      	tst	r3, r2
 800044c:	d003      	beq.n	8000456 <__aeabi_fadd+0x192>
 800044e:	4210      	tst	r0, r2
 8000450:	d101      	bne.n	8000456 <__aeabi_fadd+0x192>
 8000452:	000c      	movs	r4, r1
 8000454:	0003      	movs	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0db      	beq.n	8000412 <__aeabi_fadd+0x14e>
 800045a:	2080      	movs	r0, #128	; 0x80
 800045c:	03c0      	lsls	r0, r0, #15
 800045e:	4318      	orrs	r0, r3
 8000460:	0240      	lsls	r0, r0, #9
 8000462:	0a43      	lsrs	r3, r0, #9
 8000464:	469c      	mov	ip, r3
 8000466:	22ff      	movs	r2, #255	; 0xff
 8000468:	e771      	b.n	800034e <__aeabi_fadd+0x8a>
 800046a:	2900      	cmp	r1, #0
 800046c:	d0d5      	beq.n	800041a <__aeabi_fadd+0x156>
 800046e:	1b7a      	subs	r2, r7, r5
 8000470:	2d00      	cmp	r5, #0
 8000472:	d160      	bne.n	8000536 <__aeabi_fadd+0x272>
 8000474:	4643      	mov	r3, r8
 8000476:	2b00      	cmp	r3, #0
 8000478:	d024      	beq.n	80004c4 <__aeabi_fadd+0x200>
 800047a:	1e53      	subs	r3, r2, #1
 800047c:	2a01      	cmp	r2, #1
 800047e:	d073      	beq.n	8000568 <__aeabi_fadd+0x2a4>
 8000480:	2aff      	cmp	r2, #255	; 0xff
 8000482:	d0e7      	beq.n	8000454 <__aeabi_fadd+0x190>
 8000484:	001a      	movs	r2, r3
 8000486:	2a1b      	cmp	r2, #27
 8000488:	dc00      	bgt.n	800048c <__aeabi_fadd+0x1c8>
 800048a:	e085      	b.n	8000598 <__aeabi_fadd+0x2d4>
 800048c:	2001      	movs	r0, #1
 800048e:	003d      	movs	r5, r7
 8000490:	1980      	adds	r0, r0, r6
 8000492:	e785      	b.n	80003a0 <__aeabi_fadd+0xdc>
 8000494:	2320      	movs	r3, #32
 8000496:	003a      	movs	r2, r7
 8000498:	1b45      	subs	r5, r0, r5
 800049a:	0038      	movs	r0, r7
 800049c:	3501      	adds	r5, #1
 800049e:	40ea      	lsrs	r2, r5
 80004a0:	1b5d      	subs	r5, r3, r5
 80004a2:	40a8      	lsls	r0, r5
 80004a4:	1e43      	subs	r3, r0, #1
 80004a6:	4198      	sbcs	r0, r3
 80004a8:	2500      	movs	r5, #0
 80004aa:	4310      	orrs	r0, r2
 80004ac:	e73e      	b.n	800032c <__aeabi_fadd+0x68>
 80004ae:	2320      	movs	r3, #32
 80004b0:	0030      	movs	r0, r6
 80004b2:	1a9b      	subs	r3, r3, r2
 80004b4:	0031      	movs	r1, r6
 80004b6:	4098      	lsls	r0, r3
 80004b8:	40d1      	lsrs	r1, r2
 80004ba:	1e43      	subs	r3, r0, #1
 80004bc:	4198      	sbcs	r0, r3
 80004be:	4308      	orrs	r0, r1
 80004c0:	e722      	b.n	8000308 <__aeabi_fadd+0x44>
 80004c2:	000c      	movs	r4, r1
 80004c4:	0003      	movs	r3, r0
 80004c6:	0015      	movs	r5, r2
 80004c8:	e7b4      	b.n	8000434 <__aeabi_fadd+0x170>
 80004ca:	2fff      	cmp	r7, #255	; 0xff
 80004cc:	d0c1      	beq.n	8000452 <__aeabi_fadd+0x18e>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	4640      	mov	r0, r8
 80004d2:	04db      	lsls	r3, r3, #19
 80004d4:	4318      	orrs	r0, r3
 80004d6:	4680      	mov	r8, r0
 80004d8:	2a1b      	cmp	r2, #27
 80004da:	dd51      	ble.n	8000580 <__aeabi_fadd+0x2bc>
 80004dc:	2001      	movs	r0, #1
 80004de:	000c      	movs	r4, r1
 80004e0:	003d      	movs	r5, r7
 80004e2:	1a30      	subs	r0, r6, r0
 80004e4:	e712      	b.n	800030c <__aeabi_fadd+0x48>
 80004e6:	4643      	mov	r3, r8
 80004e8:	1b9f      	subs	r7, r3, r6
 80004ea:	017b      	lsls	r3, r7, #5
 80004ec:	d42b      	bmi.n	8000546 <__aeabi_fadd+0x282>
 80004ee:	2f00      	cmp	r7, #0
 80004f0:	d000      	beq.n	80004f4 <__aeabi_fadd+0x230>
 80004f2:	e710      	b.n	8000316 <__aeabi_fadd+0x52>
 80004f4:	2300      	movs	r3, #0
 80004f6:	2400      	movs	r4, #0
 80004f8:	2200      	movs	r2, #0
 80004fa:	469c      	mov	ip, r3
 80004fc:	e727      	b.n	800034e <__aeabi_fadd+0x8a>
 80004fe:	2320      	movs	r3, #32
 8000500:	0032      	movs	r2, r6
 8000502:	0030      	movs	r0, r6
 8000504:	40ca      	lsrs	r2, r1
 8000506:	1a59      	subs	r1, r3, r1
 8000508:	4088      	lsls	r0, r1
 800050a:	1e43      	subs	r3, r0, #1
 800050c:	4198      	sbcs	r0, r3
 800050e:	4310      	orrs	r0, r2
 8000510:	e745      	b.n	800039e <__aeabi_fadd+0xda>
 8000512:	2d00      	cmp	r5, #0
 8000514:	d14a      	bne.n	80005ac <__aeabi_fadd+0x2e8>
 8000516:	4643      	mov	r3, r8
 8000518:	2b00      	cmp	r3, #0
 800051a:	d063      	beq.n	80005e4 <__aeabi_fadd+0x320>
 800051c:	2200      	movs	r2, #0
 800051e:	2e00      	cmp	r6, #0
 8000520:	d100      	bne.n	8000524 <__aeabi_fadd+0x260>
 8000522:	e714      	b.n	800034e <__aeabi_fadd+0x8a>
 8000524:	0030      	movs	r0, r6
 8000526:	4440      	add	r0, r8
 8000528:	0143      	lsls	r3, r0, #5
 800052a:	d400      	bmi.n	800052e <__aeabi_fadd+0x26a>
 800052c:	e77e      	b.n	800042c <__aeabi_fadd+0x168>
 800052e:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <__aeabi_fadd+0x334>)
 8000530:	3501      	adds	r5, #1
 8000532:	4018      	ands	r0, r3
 8000534:	e77a      	b.n	800042c <__aeabi_fadd+0x168>
 8000536:	2fff      	cmp	r7, #255	; 0xff
 8000538:	d08c      	beq.n	8000454 <__aeabi_fadd+0x190>
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	4641      	mov	r1, r8
 800053e:	04db      	lsls	r3, r3, #19
 8000540:	4319      	orrs	r1, r3
 8000542:	4688      	mov	r8, r1
 8000544:	e79f      	b.n	8000486 <__aeabi_fadd+0x1c2>
 8000546:	4643      	mov	r3, r8
 8000548:	000c      	movs	r4, r1
 800054a:	1af7      	subs	r7, r6, r3
 800054c:	e6e3      	b.n	8000316 <__aeabi_fadd+0x52>
 800054e:	4642      	mov	r2, r8
 8000550:	2a00      	cmp	r2, #0
 8000552:	d000      	beq.n	8000556 <__aeabi_fadd+0x292>
 8000554:	e775      	b.n	8000442 <__aeabi_fadd+0x17e>
 8000556:	2e00      	cmp	r6, #0
 8000558:	d000      	beq.n	800055c <__aeabi_fadd+0x298>
 800055a:	e77a      	b.n	8000452 <__aeabi_fadd+0x18e>
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	03db      	lsls	r3, r3, #15
 8000560:	2400      	movs	r4, #0
 8000562:	469c      	mov	ip, r3
 8000564:	22ff      	movs	r2, #255	; 0xff
 8000566:	e6f2      	b.n	800034e <__aeabi_fadd+0x8a>
 8000568:	0030      	movs	r0, r6
 800056a:	4440      	add	r0, r8
 800056c:	2501      	movs	r5, #1
 800056e:	0143      	lsls	r3, r0, #5
 8000570:	d400      	bmi.n	8000574 <__aeabi_fadd+0x2b0>
 8000572:	e75b      	b.n	800042c <__aeabi_fadd+0x168>
 8000574:	2502      	movs	r5, #2
 8000576:	e718      	b.n	80003aa <__aeabi_fadd+0xe6>
 8000578:	4643      	mov	r3, r8
 800057a:	2501      	movs	r5, #1
 800057c:	1b98      	subs	r0, r3, r6
 800057e:	e6c5      	b.n	800030c <__aeabi_fadd+0x48>
 8000580:	2320      	movs	r3, #32
 8000582:	4644      	mov	r4, r8
 8000584:	4640      	mov	r0, r8
 8000586:	40d4      	lsrs	r4, r2
 8000588:	1a9a      	subs	r2, r3, r2
 800058a:	4090      	lsls	r0, r2
 800058c:	1e43      	subs	r3, r0, #1
 800058e:	4198      	sbcs	r0, r3
 8000590:	4320      	orrs	r0, r4
 8000592:	e7a4      	b.n	80004de <__aeabi_fadd+0x21a>
 8000594:	000d      	movs	r5, r1
 8000596:	e74d      	b.n	8000434 <__aeabi_fadd+0x170>
 8000598:	2320      	movs	r3, #32
 800059a:	4641      	mov	r1, r8
 800059c:	4640      	mov	r0, r8
 800059e:	40d1      	lsrs	r1, r2
 80005a0:	1a9a      	subs	r2, r3, r2
 80005a2:	4090      	lsls	r0, r2
 80005a4:	1e43      	subs	r3, r0, #1
 80005a6:	4198      	sbcs	r0, r3
 80005a8:	4308      	orrs	r0, r1
 80005aa:	e770      	b.n	800048e <__aeabi_fadd+0x1ca>
 80005ac:	4642      	mov	r2, r8
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fadd+0x2f0>
 80005b2:	e74f      	b.n	8000454 <__aeabi_fadd+0x190>
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0x2f6>
 80005b8:	e74d      	b.n	8000456 <__aeabi_fadd+0x192>
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	03d2      	lsls	r2, r2, #15
 80005be:	4213      	tst	r3, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x300>
 80005c2:	e748      	b.n	8000456 <__aeabi_fadd+0x192>
 80005c4:	4210      	tst	r0, r2
 80005c6:	d000      	beq.n	80005ca <__aeabi_fadd+0x306>
 80005c8:	e745      	b.n	8000456 <__aeabi_fadd+0x192>
 80005ca:	0003      	movs	r3, r0
 80005cc:	e743      	b.n	8000456 <__aeabi_fadd+0x192>
 80005ce:	2e00      	cmp	r6, #0
 80005d0:	d090      	beq.n	80004f4 <__aeabi_fadd+0x230>
 80005d2:	000c      	movs	r4, r1
 80005d4:	4684      	mov	ip, r0
 80005d6:	2200      	movs	r2, #0
 80005d8:	e6b9      	b.n	800034e <__aeabi_fadd+0x8a>
 80005da:	4643      	mov	r3, r8
 80005dc:	000c      	movs	r4, r1
 80005de:	1af0      	subs	r0, r6, r3
 80005e0:	3501      	adds	r5, #1
 80005e2:	e693      	b.n	800030c <__aeabi_fadd+0x48>
 80005e4:	4684      	mov	ip, r0
 80005e6:	2200      	movs	r2, #0
 80005e8:	e6b1      	b.n	800034e <__aeabi_fadd+0x8a>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d000      	beq.n	80005f0 <__aeabi_fadd+0x32c>
 80005ee:	e71d      	b.n	800042c <__aeabi_fadd+0x168>
 80005f0:	2300      	movs	r3, #0
 80005f2:	2400      	movs	r4, #0
 80005f4:	469c      	mov	ip, r3
 80005f6:	e6aa      	b.n	800034e <__aeabi_fadd+0x8a>
 80005f8:	fbffffff 	.word	0xfbffffff
 80005fc:	7dffffff 	.word	0x7dffffff

08000600 <__aeabi_fdiv>:
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	464f      	mov	r7, r9
 8000604:	4646      	mov	r6, r8
 8000606:	46d6      	mov	lr, sl
 8000608:	0245      	lsls	r5, r0, #9
 800060a:	b5c0      	push	{r6, r7, lr}
 800060c:	0047      	lsls	r7, r0, #1
 800060e:	1c0c      	adds	r4, r1, #0
 8000610:	0a6d      	lsrs	r5, r5, #9
 8000612:	0e3f      	lsrs	r7, r7, #24
 8000614:	0fc6      	lsrs	r6, r0, #31
 8000616:	2f00      	cmp	r7, #0
 8000618:	d100      	bne.n	800061c <__aeabi_fdiv+0x1c>
 800061a:	e070      	b.n	80006fe <__aeabi_fdiv+0xfe>
 800061c:	2fff      	cmp	r7, #255	; 0xff
 800061e:	d100      	bne.n	8000622 <__aeabi_fdiv+0x22>
 8000620:	e075      	b.n	800070e <__aeabi_fdiv+0x10e>
 8000622:	00eb      	lsls	r3, r5, #3
 8000624:	2580      	movs	r5, #128	; 0x80
 8000626:	04ed      	lsls	r5, r5, #19
 8000628:	431d      	orrs	r5, r3
 800062a:	2300      	movs	r3, #0
 800062c:	4699      	mov	r9, r3
 800062e:	469a      	mov	sl, r3
 8000630:	3f7f      	subs	r7, #127	; 0x7f
 8000632:	0260      	lsls	r0, r4, #9
 8000634:	0a43      	lsrs	r3, r0, #9
 8000636:	4698      	mov	r8, r3
 8000638:	0063      	lsls	r3, r4, #1
 800063a:	0e1b      	lsrs	r3, r3, #24
 800063c:	0fe4      	lsrs	r4, r4, #31
 800063e:	2b00      	cmp	r3, #0
 8000640:	d04e      	beq.n	80006e0 <__aeabi_fdiv+0xe0>
 8000642:	2bff      	cmp	r3, #255	; 0xff
 8000644:	d046      	beq.n	80006d4 <__aeabi_fdiv+0xd4>
 8000646:	4642      	mov	r2, r8
 8000648:	00d0      	lsls	r0, r2, #3
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	04d2      	lsls	r2, r2, #19
 800064e:	4302      	orrs	r2, r0
 8000650:	4690      	mov	r8, r2
 8000652:	2200      	movs	r2, #0
 8000654:	3b7f      	subs	r3, #127	; 0x7f
 8000656:	0031      	movs	r1, r6
 8000658:	1aff      	subs	r7, r7, r3
 800065a:	464b      	mov	r3, r9
 800065c:	4061      	eors	r1, r4
 800065e:	b2c9      	uxtb	r1, r1
 8000660:	4313      	orrs	r3, r2
 8000662:	2b0f      	cmp	r3, #15
 8000664:	d900      	bls.n	8000668 <__aeabi_fdiv+0x68>
 8000666:	e0b5      	b.n	80007d4 <__aeabi_fdiv+0x1d4>
 8000668:	486e      	ldr	r0, [pc, #440]	; (8000824 <__aeabi_fdiv+0x224>)
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	58c3      	ldr	r3, [r0, r3]
 800066e:	469f      	mov	pc, r3
 8000670:	2300      	movs	r3, #0
 8000672:	4698      	mov	r8, r3
 8000674:	0026      	movs	r6, r4
 8000676:	4645      	mov	r5, r8
 8000678:	4692      	mov	sl, r2
 800067a:	4653      	mov	r3, sl
 800067c:	2b02      	cmp	r3, #2
 800067e:	d100      	bne.n	8000682 <__aeabi_fdiv+0x82>
 8000680:	e089      	b.n	8000796 <__aeabi_fdiv+0x196>
 8000682:	2b03      	cmp	r3, #3
 8000684:	d100      	bne.n	8000688 <__aeabi_fdiv+0x88>
 8000686:	e09e      	b.n	80007c6 <__aeabi_fdiv+0x1c6>
 8000688:	2b01      	cmp	r3, #1
 800068a:	d018      	beq.n	80006be <__aeabi_fdiv+0xbe>
 800068c:	003b      	movs	r3, r7
 800068e:	337f      	adds	r3, #127	; 0x7f
 8000690:	2b00      	cmp	r3, #0
 8000692:	dd69      	ble.n	8000768 <__aeabi_fdiv+0x168>
 8000694:	076a      	lsls	r2, r5, #29
 8000696:	d004      	beq.n	80006a2 <__aeabi_fdiv+0xa2>
 8000698:	220f      	movs	r2, #15
 800069a:	402a      	ands	r2, r5
 800069c:	2a04      	cmp	r2, #4
 800069e:	d000      	beq.n	80006a2 <__aeabi_fdiv+0xa2>
 80006a0:	3504      	adds	r5, #4
 80006a2:	012a      	lsls	r2, r5, #4
 80006a4:	d503      	bpl.n	80006ae <__aeabi_fdiv+0xae>
 80006a6:	4b60      	ldr	r3, [pc, #384]	; (8000828 <__aeabi_fdiv+0x228>)
 80006a8:	401d      	ands	r5, r3
 80006aa:	003b      	movs	r3, r7
 80006ac:	3380      	adds	r3, #128	; 0x80
 80006ae:	2bfe      	cmp	r3, #254	; 0xfe
 80006b0:	dd00      	ble.n	80006b4 <__aeabi_fdiv+0xb4>
 80006b2:	e070      	b.n	8000796 <__aeabi_fdiv+0x196>
 80006b4:	01ad      	lsls	r5, r5, #6
 80006b6:	0a6d      	lsrs	r5, r5, #9
 80006b8:	b2d8      	uxtb	r0, r3
 80006ba:	e002      	b.n	80006c2 <__aeabi_fdiv+0xc2>
 80006bc:	000e      	movs	r6, r1
 80006be:	2000      	movs	r0, #0
 80006c0:	2500      	movs	r5, #0
 80006c2:	05c0      	lsls	r0, r0, #23
 80006c4:	4328      	orrs	r0, r5
 80006c6:	07f6      	lsls	r6, r6, #31
 80006c8:	4330      	orrs	r0, r6
 80006ca:	bce0      	pop	{r5, r6, r7}
 80006cc:	46ba      	mov	sl, r7
 80006ce:	46b1      	mov	r9, r6
 80006d0:	46a8      	mov	r8, r5
 80006d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d4:	4643      	mov	r3, r8
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d13f      	bne.n	800075a <__aeabi_fdiv+0x15a>
 80006da:	2202      	movs	r2, #2
 80006dc:	3fff      	subs	r7, #255	; 0xff
 80006de:	e003      	b.n	80006e8 <__aeabi_fdiv+0xe8>
 80006e0:	4643      	mov	r3, r8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d12d      	bne.n	8000742 <__aeabi_fdiv+0x142>
 80006e6:	2201      	movs	r2, #1
 80006e8:	0031      	movs	r1, r6
 80006ea:	464b      	mov	r3, r9
 80006ec:	4061      	eors	r1, r4
 80006ee:	b2c9      	uxtb	r1, r1
 80006f0:	4313      	orrs	r3, r2
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d834      	bhi.n	8000760 <__aeabi_fdiv+0x160>
 80006f6:	484d      	ldr	r0, [pc, #308]	; (800082c <__aeabi_fdiv+0x22c>)
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	58c3      	ldr	r3, [r0, r3]
 80006fc:	469f      	mov	pc, r3
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d113      	bne.n	800072a <__aeabi_fdiv+0x12a>
 8000702:	2304      	movs	r3, #4
 8000704:	4699      	mov	r9, r3
 8000706:	3b03      	subs	r3, #3
 8000708:	2700      	movs	r7, #0
 800070a:	469a      	mov	sl, r3
 800070c:	e791      	b.n	8000632 <__aeabi_fdiv+0x32>
 800070e:	2d00      	cmp	r5, #0
 8000710:	d105      	bne.n	800071e <__aeabi_fdiv+0x11e>
 8000712:	2308      	movs	r3, #8
 8000714:	4699      	mov	r9, r3
 8000716:	3b06      	subs	r3, #6
 8000718:	27ff      	movs	r7, #255	; 0xff
 800071a:	469a      	mov	sl, r3
 800071c:	e789      	b.n	8000632 <__aeabi_fdiv+0x32>
 800071e:	230c      	movs	r3, #12
 8000720:	4699      	mov	r9, r3
 8000722:	3b09      	subs	r3, #9
 8000724:	27ff      	movs	r7, #255	; 0xff
 8000726:	469a      	mov	sl, r3
 8000728:	e783      	b.n	8000632 <__aeabi_fdiv+0x32>
 800072a:	0028      	movs	r0, r5
 800072c:	f000 fcb4 	bl	8001098 <__clzsi2>
 8000730:	2776      	movs	r7, #118	; 0x76
 8000732:	1f43      	subs	r3, r0, #5
 8000734:	409d      	lsls	r5, r3
 8000736:	2300      	movs	r3, #0
 8000738:	427f      	negs	r7, r7
 800073a:	4699      	mov	r9, r3
 800073c:	469a      	mov	sl, r3
 800073e:	1a3f      	subs	r7, r7, r0
 8000740:	e777      	b.n	8000632 <__aeabi_fdiv+0x32>
 8000742:	4640      	mov	r0, r8
 8000744:	f000 fca8 	bl	8001098 <__clzsi2>
 8000748:	4642      	mov	r2, r8
 800074a:	1f43      	subs	r3, r0, #5
 800074c:	409a      	lsls	r2, r3
 800074e:	2376      	movs	r3, #118	; 0x76
 8000750:	425b      	negs	r3, r3
 8000752:	4690      	mov	r8, r2
 8000754:	1a1b      	subs	r3, r3, r0
 8000756:	2200      	movs	r2, #0
 8000758:	e77d      	b.n	8000656 <__aeabi_fdiv+0x56>
 800075a:	23ff      	movs	r3, #255	; 0xff
 800075c:	2203      	movs	r2, #3
 800075e:	e77a      	b.n	8000656 <__aeabi_fdiv+0x56>
 8000760:	000e      	movs	r6, r1
 8000762:	20ff      	movs	r0, #255	; 0xff
 8000764:	2500      	movs	r5, #0
 8000766:	e7ac      	b.n	80006c2 <__aeabi_fdiv+0xc2>
 8000768:	2001      	movs	r0, #1
 800076a:	1ac0      	subs	r0, r0, r3
 800076c:	281b      	cmp	r0, #27
 800076e:	dca6      	bgt.n	80006be <__aeabi_fdiv+0xbe>
 8000770:	379e      	adds	r7, #158	; 0x9e
 8000772:	002a      	movs	r2, r5
 8000774:	40bd      	lsls	r5, r7
 8000776:	40c2      	lsrs	r2, r0
 8000778:	1e6b      	subs	r3, r5, #1
 800077a:	419d      	sbcs	r5, r3
 800077c:	4315      	orrs	r5, r2
 800077e:	076b      	lsls	r3, r5, #29
 8000780:	d004      	beq.n	800078c <__aeabi_fdiv+0x18c>
 8000782:	230f      	movs	r3, #15
 8000784:	402b      	ands	r3, r5
 8000786:	2b04      	cmp	r3, #4
 8000788:	d000      	beq.n	800078c <__aeabi_fdiv+0x18c>
 800078a:	3504      	adds	r5, #4
 800078c:	016b      	lsls	r3, r5, #5
 800078e:	d544      	bpl.n	800081a <__aeabi_fdiv+0x21a>
 8000790:	2001      	movs	r0, #1
 8000792:	2500      	movs	r5, #0
 8000794:	e795      	b.n	80006c2 <__aeabi_fdiv+0xc2>
 8000796:	20ff      	movs	r0, #255	; 0xff
 8000798:	2500      	movs	r5, #0
 800079a:	e792      	b.n	80006c2 <__aeabi_fdiv+0xc2>
 800079c:	2580      	movs	r5, #128	; 0x80
 800079e:	2600      	movs	r6, #0
 80007a0:	20ff      	movs	r0, #255	; 0xff
 80007a2:	03ed      	lsls	r5, r5, #15
 80007a4:	e78d      	b.n	80006c2 <__aeabi_fdiv+0xc2>
 80007a6:	2300      	movs	r3, #0
 80007a8:	4698      	mov	r8, r3
 80007aa:	2080      	movs	r0, #128	; 0x80
 80007ac:	03c0      	lsls	r0, r0, #15
 80007ae:	4205      	tst	r5, r0
 80007b0:	d009      	beq.n	80007c6 <__aeabi_fdiv+0x1c6>
 80007b2:	4643      	mov	r3, r8
 80007b4:	4203      	tst	r3, r0
 80007b6:	d106      	bne.n	80007c6 <__aeabi_fdiv+0x1c6>
 80007b8:	4645      	mov	r5, r8
 80007ba:	4305      	orrs	r5, r0
 80007bc:	026d      	lsls	r5, r5, #9
 80007be:	0026      	movs	r6, r4
 80007c0:	20ff      	movs	r0, #255	; 0xff
 80007c2:	0a6d      	lsrs	r5, r5, #9
 80007c4:	e77d      	b.n	80006c2 <__aeabi_fdiv+0xc2>
 80007c6:	2080      	movs	r0, #128	; 0x80
 80007c8:	03c0      	lsls	r0, r0, #15
 80007ca:	4305      	orrs	r5, r0
 80007cc:	026d      	lsls	r5, r5, #9
 80007ce:	20ff      	movs	r0, #255	; 0xff
 80007d0:	0a6d      	lsrs	r5, r5, #9
 80007d2:	e776      	b.n	80006c2 <__aeabi_fdiv+0xc2>
 80007d4:	4642      	mov	r2, r8
 80007d6:	016b      	lsls	r3, r5, #5
 80007d8:	0150      	lsls	r0, r2, #5
 80007da:	4283      	cmp	r3, r0
 80007dc:	d219      	bcs.n	8000812 <__aeabi_fdiv+0x212>
 80007de:	221b      	movs	r2, #27
 80007e0:	2500      	movs	r5, #0
 80007e2:	3f01      	subs	r7, #1
 80007e4:	2601      	movs	r6, #1
 80007e6:	001c      	movs	r4, r3
 80007e8:	006d      	lsls	r5, r5, #1
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	db01      	blt.n	80007f4 <__aeabi_fdiv+0x1f4>
 80007f0:	4298      	cmp	r0, r3
 80007f2:	d801      	bhi.n	80007f8 <__aeabi_fdiv+0x1f8>
 80007f4:	1a1b      	subs	r3, r3, r0
 80007f6:	4335      	orrs	r5, r6
 80007f8:	3a01      	subs	r2, #1
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d1f3      	bne.n	80007e6 <__aeabi_fdiv+0x1e6>
 80007fe:	1e5a      	subs	r2, r3, #1
 8000800:	4193      	sbcs	r3, r2
 8000802:	431d      	orrs	r5, r3
 8000804:	003b      	movs	r3, r7
 8000806:	337f      	adds	r3, #127	; 0x7f
 8000808:	000e      	movs	r6, r1
 800080a:	2b00      	cmp	r3, #0
 800080c:	dd00      	ble.n	8000810 <__aeabi_fdiv+0x210>
 800080e:	e741      	b.n	8000694 <__aeabi_fdiv+0x94>
 8000810:	e7aa      	b.n	8000768 <__aeabi_fdiv+0x168>
 8000812:	221a      	movs	r2, #26
 8000814:	2501      	movs	r5, #1
 8000816:	1a1b      	subs	r3, r3, r0
 8000818:	e7e4      	b.n	80007e4 <__aeabi_fdiv+0x1e4>
 800081a:	01ad      	lsls	r5, r5, #6
 800081c:	2000      	movs	r0, #0
 800081e:	0a6d      	lsrs	r5, r5, #9
 8000820:	e74f      	b.n	80006c2 <__aeabi_fdiv+0xc2>
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	08003114 	.word	0x08003114
 8000828:	f7ffffff 	.word	0xf7ffffff
 800082c:	08003154 	.word	0x08003154

08000830 <__eqsf2>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	0042      	lsls	r2, r0, #1
 8000834:	0245      	lsls	r5, r0, #9
 8000836:	024e      	lsls	r6, r1, #9
 8000838:	004c      	lsls	r4, r1, #1
 800083a:	0fc3      	lsrs	r3, r0, #31
 800083c:	0a6d      	lsrs	r5, r5, #9
 800083e:	2001      	movs	r0, #1
 8000840:	0e12      	lsrs	r2, r2, #24
 8000842:	0a76      	lsrs	r6, r6, #9
 8000844:	0e24      	lsrs	r4, r4, #24
 8000846:	0fc9      	lsrs	r1, r1, #31
 8000848:	2aff      	cmp	r2, #255	; 0xff
 800084a:	d006      	beq.n	800085a <__eqsf2+0x2a>
 800084c:	2cff      	cmp	r4, #255	; 0xff
 800084e:	d003      	beq.n	8000858 <__eqsf2+0x28>
 8000850:	42a2      	cmp	r2, r4
 8000852:	d101      	bne.n	8000858 <__eqsf2+0x28>
 8000854:	42b5      	cmp	r5, r6
 8000856:	d006      	beq.n	8000866 <__eqsf2+0x36>
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	2d00      	cmp	r5, #0
 800085c:	d1fc      	bne.n	8000858 <__eqsf2+0x28>
 800085e:	2cff      	cmp	r4, #255	; 0xff
 8000860:	d1fa      	bne.n	8000858 <__eqsf2+0x28>
 8000862:	2e00      	cmp	r6, #0
 8000864:	d1f8      	bne.n	8000858 <__eqsf2+0x28>
 8000866:	428b      	cmp	r3, r1
 8000868:	d006      	beq.n	8000878 <__eqsf2+0x48>
 800086a:	2001      	movs	r0, #1
 800086c:	2a00      	cmp	r2, #0
 800086e:	d1f3      	bne.n	8000858 <__eqsf2+0x28>
 8000870:	0028      	movs	r0, r5
 8000872:	1e43      	subs	r3, r0, #1
 8000874:	4198      	sbcs	r0, r3
 8000876:	e7ef      	b.n	8000858 <__eqsf2+0x28>
 8000878:	2000      	movs	r0, #0
 800087a:	e7ed      	b.n	8000858 <__eqsf2+0x28>

0800087c <__gesf2>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	0042      	lsls	r2, r0, #1
 8000880:	0245      	lsls	r5, r0, #9
 8000882:	024e      	lsls	r6, r1, #9
 8000884:	004c      	lsls	r4, r1, #1
 8000886:	0fc3      	lsrs	r3, r0, #31
 8000888:	0a6d      	lsrs	r5, r5, #9
 800088a:	0e12      	lsrs	r2, r2, #24
 800088c:	0a76      	lsrs	r6, r6, #9
 800088e:	0e24      	lsrs	r4, r4, #24
 8000890:	0fc8      	lsrs	r0, r1, #31
 8000892:	2aff      	cmp	r2, #255	; 0xff
 8000894:	d01b      	beq.n	80008ce <__gesf2+0x52>
 8000896:	2cff      	cmp	r4, #255	; 0xff
 8000898:	d00e      	beq.n	80008b8 <__gesf2+0x3c>
 800089a:	2a00      	cmp	r2, #0
 800089c:	d11b      	bne.n	80008d6 <__gesf2+0x5a>
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d101      	bne.n	80008a6 <__gesf2+0x2a>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	d01c      	beq.n	80008e0 <__gesf2+0x64>
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d00c      	beq.n	80008c4 <__gesf2+0x48>
 80008aa:	4283      	cmp	r3, r0
 80008ac:	d01c      	beq.n	80008e8 <__gesf2+0x6c>
 80008ae:	2102      	movs	r1, #2
 80008b0:	1e58      	subs	r0, r3, #1
 80008b2:	4008      	ands	r0, r1
 80008b4:	3801      	subs	r0, #1
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d122      	bne.n	8000902 <__gesf2+0x86>
 80008bc:	2a00      	cmp	r2, #0
 80008be:	d1f4      	bne.n	80008aa <__gesf2+0x2e>
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d1f2      	bne.n	80008aa <__gesf2+0x2e>
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d1f6      	bne.n	80008b6 <__gesf2+0x3a>
 80008c8:	2001      	movs	r0, #1
 80008ca:	4240      	negs	r0, r0
 80008cc:	e7f3      	b.n	80008b6 <__gesf2+0x3a>
 80008ce:	2d00      	cmp	r5, #0
 80008d0:	d117      	bne.n	8000902 <__gesf2+0x86>
 80008d2:	2cff      	cmp	r4, #255	; 0xff
 80008d4:	d0f0      	beq.n	80008b8 <__gesf2+0x3c>
 80008d6:	2c00      	cmp	r4, #0
 80008d8:	d1e7      	bne.n	80008aa <__gesf2+0x2e>
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d1e5      	bne.n	80008aa <__gesf2+0x2e>
 80008de:	e7e6      	b.n	80008ae <__gesf2+0x32>
 80008e0:	2000      	movs	r0, #0
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d0e7      	beq.n	80008b6 <__gesf2+0x3a>
 80008e6:	e7e2      	b.n	80008ae <__gesf2+0x32>
 80008e8:	42a2      	cmp	r2, r4
 80008ea:	dc05      	bgt.n	80008f8 <__gesf2+0x7c>
 80008ec:	dbea      	blt.n	80008c4 <__gesf2+0x48>
 80008ee:	42b5      	cmp	r5, r6
 80008f0:	d802      	bhi.n	80008f8 <__gesf2+0x7c>
 80008f2:	d3e7      	bcc.n	80008c4 <__gesf2+0x48>
 80008f4:	2000      	movs	r0, #0
 80008f6:	e7de      	b.n	80008b6 <__gesf2+0x3a>
 80008f8:	4243      	negs	r3, r0
 80008fa:	4158      	adcs	r0, r3
 80008fc:	0040      	lsls	r0, r0, #1
 80008fe:	3801      	subs	r0, #1
 8000900:	e7d9      	b.n	80008b6 <__gesf2+0x3a>
 8000902:	2002      	movs	r0, #2
 8000904:	4240      	negs	r0, r0
 8000906:	e7d6      	b.n	80008b6 <__gesf2+0x3a>

08000908 <__lesf2>:
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	0042      	lsls	r2, r0, #1
 800090c:	0245      	lsls	r5, r0, #9
 800090e:	024e      	lsls	r6, r1, #9
 8000910:	004c      	lsls	r4, r1, #1
 8000912:	0fc3      	lsrs	r3, r0, #31
 8000914:	0a6d      	lsrs	r5, r5, #9
 8000916:	0e12      	lsrs	r2, r2, #24
 8000918:	0a76      	lsrs	r6, r6, #9
 800091a:	0e24      	lsrs	r4, r4, #24
 800091c:	0fc8      	lsrs	r0, r1, #31
 800091e:	2aff      	cmp	r2, #255	; 0xff
 8000920:	d00b      	beq.n	800093a <__lesf2+0x32>
 8000922:	2cff      	cmp	r4, #255	; 0xff
 8000924:	d00d      	beq.n	8000942 <__lesf2+0x3a>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d11f      	bne.n	800096a <__lesf2+0x62>
 800092a:	2c00      	cmp	r4, #0
 800092c:	d116      	bne.n	800095c <__lesf2+0x54>
 800092e:	2e00      	cmp	r6, #0
 8000930:	d114      	bne.n	800095c <__lesf2+0x54>
 8000932:	2000      	movs	r0, #0
 8000934:	2d00      	cmp	r5, #0
 8000936:	d010      	beq.n	800095a <__lesf2+0x52>
 8000938:	e009      	b.n	800094e <__lesf2+0x46>
 800093a:	2d00      	cmp	r5, #0
 800093c:	d10c      	bne.n	8000958 <__lesf2+0x50>
 800093e:	2cff      	cmp	r4, #255	; 0xff
 8000940:	d113      	bne.n	800096a <__lesf2+0x62>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d108      	bne.n	8000958 <__lesf2+0x50>
 8000946:	2a00      	cmp	r2, #0
 8000948:	d008      	beq.n	800095c <__lesf2+0x54>
 800094a:	4283      	cmp	r3, r0
 800094c:	d012      	beq.n	8000974 <__lesf2+0x6c>
 800094e:	2102      	movs	r1, #2
 8000950:	1e58      	subs	r0, r3, #1
 8000952:	4008      	ands	r0, r1
 8000954:	3801      	subs	r0, #1
 8000956:	e000      	b.n	800095a <__lesf2+0x52>
 8000958:	2002      	movs	r0, #2
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	2d00      	cmp	r5, #0
 800095e:	d1f4      	bne.n	800094a <__lesf2+0x42>
 8000960:	2800      	cmp	r0, #0
 8000962:	d1fa      	bne.n	800095a <__lesf2+0x52>
 8000964:	2001      	movs	r0, #1
 8000966:	4240      	negs	r0, r0
 8000968:	e7f7      	b.n	800095a <__lesf2+0x52>
 800096a:	2c00      	cmp	r4, #0
 800096c:	d1ed      	bne.n	800094a <__lesf2+0x42>
 800096e:	2e00      	cmp	r6, #0
 8000970:	d1eb      	bne.n	800094a <__lesf2+0x42>
 8000972:	e7ec      	b.n	800094e <__lesf2+0x46>
 8000974:	42a2      	cmp	r2, r4
 8000976:	dc05      	bgt.n	8000984 <__lesf2+0x7c>
 8000978:	dbf2      	blt.n	8000960 <__lesf2+0x58>
 800097a:	42b5      	cmp	r5, r6
 800097c:	d802      	bhi.n	8000984 <__lesf2+0x7c>
 800097e:	d3ef      	bcc.n	8000960 <__lesf2+0x58>
 8000980:	2000      	movs	r0, #0
 8000982:	e7ea      	b.n	800095a <__lesf2+0x52>
 8000984:	4243      	negs	r3, r0
 8000986:	4158      	adcs	r0, r3
 8000988:	0040      	lsls	r0, r0, #1
 800098a:	3801      	subs	r0, #1
 800098c:	e7e5      	b.n	800095a <__lesf2+0x52>
 800098e:	46c0      	nop			; (mov r8, r8)

08000990 <__aeabi_fmul>:
 8000990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000992:	464f      	mov	r7, r9
 8000994:	4646      	mov	r6, r8
 8000996:	46d6      	mov	lr, sl
 8000998:	0244      	lsls	r4, r0, #9
 800099a:	0045      	lsls	r5, r0, #1
 800099c:	b5c0      	push	{r6, r7, lr}
 800099e:	0a64      	lsrs	r4, r4, #9
 80009a0:	1c0f      	adds	r7, r1, #0
 80009a2:	0e2d      	lsrs	r5, r5, #24
 80009a4:	0fc6      	lsrs	r6, r0, #31
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_fmul+0x1c>
 80009aa:	e08d      	b.n	8000ac8 <__aeabi_fmul+0x138>
 80009ac:	2dff      	cmp	r5, #255	; 0xff
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fmul+0x22>
 80009b0:	e092      	b.n	8000ad8 <__aeabi_fmul+0x148>
 80009b2:	2300      	movs	r3, #0
 80009b4:	2080      	movs	r0, #128	; 0x80
 80009b6:	4699      	mov	r9, r3
 80009b8:	469a      	mov	sl, r3
 80009ba:	00e4      	lsls	r4, r4, #3
 80009bc:	04c0      	lsls	r0, r0, #19
 80009be:	4304      	orrs	r4, r0
 80009c0:	3d7f      	subs	r5, #127	; 0x7f
 80009c2:	0278      	lsls	r0, r7, #9
 80009c4:	0a43      	lsrs	r3, r0, #9
 80009c6:	4698      	mov	r8, r3
 80009c8:	007b      	lsls	r3, r7, #1
 80009ca:	0e1b      	lsrs	r3, r3, #24
 80009cc:	0fff      	lsrs	r7, r7, #31
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fmul+0x44>
 80009d2:	e070      	b.n	8000ab6 <__aeabi_fmul+0x126>
 80009d4:	2bff      	cmp	r3, #255	; 0xff
 80009d6:	d100      	bne.n	80009da <__aeabi_fmul+0x4a>
 80009d8:	e086      	b.n	8000ae8 <__aeabi_fmul+0x158>
 80009da:	4642      	mov	r2, r8
 80009dc:	00d0      	lsls	r0, r2, #3
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	3b7f      	subs	r3, #127	; 0x7f
 80009e2:	18ed      	adds	r5, r5, r3
 80009e4:	2300      	movs	r3, #0
 80009e6:	04d2      	lsls	r2, r2, #19
 80009e8:	4302      	orrs	r2, r0
 80009ea:	4690      	mov	r8, r2
 80009ec:	469c      	mov	ip, r3
 80009ee:	0031      	movs	r1, r6
 80009f0:	464b      	mov	r3, r9
 80009f2:	4079      	eors	r1, r7
 80009f4:	1c68      	adds	r0, r5, #1
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	d81c      	bhi.n	8000a34 <__aeabi_fmul+0xa4>
 80009fa:	4a76      	ldr	r2, [pc, #472]	; (8000bd4 <__aeabi_fmul+0x244>)
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	58d3      	ldr	r3, [r2, r3]
 8000a00:	469f      	mov	pc, r3
 8000a02:	0039      	movs	r1, r7
 8000a04:	4644      	mov	r4, r8
 8000a06:	46e2      	mov	sl, ip
 8000a08:	4653      	mov	r3, sl
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d00f      	beq.n	8000a2e <__aeabi_fmul+0x9e>
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fmul+0x84>
 8000a12:	e0d7      	b.n	8000bc4 <__aeabi_fmul+0x234>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d137      	bne.n	8000a88 <__aeabi_fmul+0xf8>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	2400      	movs	r4, #0
 8000a1c:	05c0      	lsls	r0, r0, #23
 8000a1e:	4320      	orrs	r0, r4
 8000a20:	07c9      	lsls	r1, r1, #31
 8000a22:	4308      	orrs	r0, r1
 8000a24:	bce0      	pop	{r5, r6, r7}
 8000a26:	46ba      	mov	sl, r7
 8000a28:	46b1      	mov	r9, r6
 8000a2a:	46a8      	mov	r8, r5
 8000a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a2e:	20ff      	movs	r0, #255	; 0xff
 8000a30:	2400      	movs	r4, #0
 8000a32:	e7f3      	b.n	8000a1c <__aeabi_fmul+0x8c>
 8000a34:	0c26      	lsrs	r6, r4, #16
 8000a36:	0424      	lsls	r4, r4, #16
 8000a38:	0c22      	lsrs	r2, r4, #16
 8000a3a:	4644      	mov	r4, r8
 8000a3c:	0424      	lsls	r4, r4, #16
 8000a3e:	0c24      	lsrs	r4, r4, #16
 8000a40:	4643      	mov	r3, r8
 8000a42:	0027      	movs	r7, r4
 8000a44:	0c1b      	lsrs	r3, r3, #16
 8000a46:	4357      	muls	r7, r2
 8000a48:	4374      	muls	r4, r6
 8000a4a:	435a      	muls	r2, r3
 8000a4c:	435e      	muls	r6, r3
 8000a4e:	1912      	adds	r2, r2, r4
 8000a50:	0c3b      	lsrs	r3, r7, #16
 8000a52:	189b      	adds	r3, r3, r2
 8000a54:	429c      	cmp	r4, r3
 8000a56:	d903      	bls.n	8000a60 <__aeabi_fmul+0xd0>
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	0252      	lsls	r2, r2, #9
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	4466      	add	r6, ip
 8000a60:	043f      	lsls	r7, r7, #16
 8000a62:	041a      	lsls	r2, r3, #16
 8000a64:	0c3f      	lsrs	r7, r7, #16
 8000a66:	19d2      	adds	r2, r2, r7
 8000a68:	0194      	lsls	r4, r2, #6
 8000a6a:	1e67      	subs	r7, r4, #1
 8000a6c:	41bc      	sbcs	r4, r7
 8000a6e:	0c1b      	lsrs	r3, r3, #16
 8000a70:	0e92      	lsrs	r2, r2, #26
 8000a72:	199b      	adds	r3, r3, r6
 8000a74:	4314      	orrs	r4, r2
 8000a76:	019b      	lsls	r3, r3, #6
 8000a78:	431c      	orrs	r4, r3
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	d400      	bmi.n	8000a80 <__aeabi_fmul+0xf0>
 8000a7e:	e09b      	b.n	8000bb8 <__aeabi_fmul+0x228>
 8000a80:	2301      	movs	r3, #1
 8000a82:	0862      	lsrs	r2, r4, #1
 8000a84:	401c      	ands	r4, r3
 8000a86:	4314      	orrs	r4, r2
 8000a88:	0002      	movs	r2, r0
 8000a8a:	327f      	adds	r2, #127	; 0x7f
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	dd64      	ble.n	8000b5a <__aeabi_fmul+0x1ca>
 8000a90:	0763      	lsls	r3, r4, #29
 8000a92:	d004      	beq.n	8000a9e <__aeabi_fmul+0x10e>
 8000a94:	230f      	movs	r3, #15
 8000a96:	4023      	ands	r3, r4
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fmul+0x10e>
 8000a9c:	3404      	adds	r4, #4
 8000a9e:	0123      	lsls	r3, r4, #4
 8000aa0:	d503      	bpl.n	8000aaa <__aeabi_fmul+0x11a>
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	4b4c      	ldr	r3, [pc, #304]	; (8000bd8 <__aeabi_fmul+0x248>)
 8000aa6:	3280      	adds	r2, #128	; 0x80
 8000aa8:	401c      	ands	r4, r3
 8000aaa:	2afe      	cmp	r2, #254	; 0xfe
 8000aac:	dcbf      	bgt.n	8000a2e <__aeabi_fmul+0x9e>
 8000aae:	01a4      	lsls	r4, r4, #6
 8000ab0:	0a64      	lsrs	r4, r4, #9
 8000ab2:	b2d0      	uxtb	r0, r2
 8000ab4:	e7b2      	b.n	8000a1c <__aeabi_fmul+0x8c>
 8000ab6:	4643      	mov	r3, r8
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d13d      	bne.n	8000b38 <__aeabi_fmul+0x1a8>
 8000abc:	464a      	mov	r2, r9
 8000abe:	3301      	adds	r3, #1
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	4691      	mov	r9, r2
 8000ac4:	469c      	mov	ip, r3
 8000ac6:	e792      	b.n	80009ee <__aeabi_fmul+0x5e>
 8000ac8:	2c00      	cmp	r4, #0
 8000aca:	d129      	bne.n	8000b20 <__aeabi_fmul+0x190>
 8000acc:	2304      	movs	r3, #4
 8000ace:	4699      	mov	r9, r3
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	2500      	movs	r5, #0
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	e774      	b.n	80009c2 <__aeabi_fmul+0x32>
 8000ad8:	2c00      	cmp	r4, #0
 8000ada:	d11b      	bne.n	8000b14 <__aeabi_fmul+0x184>
 8000adc:	2308      	movs	r3, #8
 8000ade:	4699      	mov	r9, r3
 8000ae0:	3b06      	subs	r3, #6
 8000ae2:	25ff      	movs	r5, #255	; 0xff
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	e76c      	b.n	80009c2 <__aeabi_fmul+0x32>
 8000ae8:	4643      	mov	r3, r8
 8000aea:	35ff      	adds	r5, #255	; 0xff
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10b      	bne.n	8000b08 <__aeabi_fmul+0x178>
 8000af0:	2302      	movs	r3, #2
 8000af2:	464a      	mov	r2, r9
 8000af4:	431a      	orrs	r2, r3
 8000af6:	4691      	mov	r9, r2
 8000af8:	469c      	mov	ip, r3
 8000afa:	e778      	b.n	80009ee <__aeabi_fmul+0x5e>
 8000afc:	4653      	mov	r3, sl
 8000afe:	0031      	movs	r1, r6
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d000      	beq.n	8000b06 <__aeabi_fmul+0x176>
 8000b04:	e783      	b.n	8000a0e <__aeabi_fmul+0x7e>
 8000b06:	e792      	b.n	8000a2e <__aeabi_fmul+0x9e>
 8000b08:	2303      	movs	r3, #3
 8000b0a:	464a      	mov	r2, r9
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	4691      	mov	r9, r2
 8000b10:	469c      	mov	ip, r3
 8000b12:	e76c      	b.n	80009ee <__aeabi_fmul+0x5e>
 8000b14:	230c      	movs	r3, #12
 8000b16:	4699      	mov	r9, r3
 8000b18:	3b09      	subs	r3, #9
 8000b1a:	25ff      	movs	r5, #255	; 0xff
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	e750      	b.n	80009c2 <__aeabi_fmul+0x32>
 8000b20:	0020      	movs	r0, r4
 8000b22:	f000 fab9 	bl	8001098 <__clzsi2>
 8000b26:	2576      	movs	r5, #118	; 0x76
 8000b28:	1f43      	subs	r3, r0, #5
 8000b2a:	409c      	lsls	r4, r3
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	426d      	negs	r5, r5
 8000b30:	4699      	mov	r9, r3
 8000b32:	469a      	mov	sl, r3
 8000b34:	1a2d      	subs	r5, r5, r0
 8000b36:	e744      	b.n	80009c2 <__aeabi_fmul+0x32>
 8000b38:	4640      	mov	r0, r8
 8000b3a:	f000 faad 	bl	8001098 <__clzsi2>
 8000b3e:	4642      	mov	r2, r8
 8000b40:	1f43      	subs	r3, r0, #5
 8000b42:	409a      	lsls	r2, r3
 8000b44:	2300      	movs	r3, #0
 8000b46:	1a2d      	subs	r5, r5, r0
 8000b48:	4690      	mov	r8, r2
 8000b4a:	469c      	mov	ip, r3
 8000b4c:	3d76      	subs	r5, #118	; 0x76
 8000b4e:	e74e      	b.n	80009ee <__aeabi_fmul+0x5e>
 8000b50:	2480      	movs	r4, #128	; 0x80
 8000b52:	2100      	movs	r1, #0
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	03e4      	lsls	r4, r4, #15
 8000b58:	e760      	b.n	8000a1c <__aeabi_fmul+0x8c>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	1a9b      	subs	r3, r3, r2
 8000b5e:	2b1b      	cmp	r3, #27
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_fmul+0x1d4>
 8000b62:	e759      	b.n	8000a18 <__aeabi_fmul+0x88>
 8000b64:	0022      	movs	r2, r4
 8000b66:	309e      	adds	r0, #158	; 0x9e
 8000b68:	40da      	lsrs	r2, r3
 8000b6a:	4084      	lsls	r4, r0
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	1e62      	subs	r2, r4, #1
 8000b70:	4194      	sbcs	r4, r2
 8000b72:	431c      	orrs	r4, r3
 8000b74:	0763      	lsls	r3, r4, #29
 8000b76:	d004      	beq.n	8000b82 <__aeabi_fmul+0x1f2>
 8000b78:	230f      	movs	r3, #15
 8000b7a:	4023      	ands	r3, r4
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_fmul+0x1f2>
 8000b80:	3404      	adds	r4, #4
 8000b82:	0163      	lsls	r3, r4, #5
 8000b84:	d51a      	bpl.n	8000bbc <__aeabi_fmul+0x22c>
 8000b86:	2001      	movs	r0, #1
 8000b88:	2400      	movs	r4, #0
 8000b8a:	e747      	b.n	8000a1c <__aeabi_fmul+0x8c>
 8000b8c:	2080      	movs	r0, #128	; 0x80
 8000b8e:	03c0      	lsls	r0, r0, #15
 8000b90:	4204      	tst	r4, r0
 8000b92:	d009      	beq.n	8000ba8 <__aeabi_fmul+0x218>
 8000b94:	4643      	mov	r3, r8
 8000b96:	4203      	tst	r3, r0
 8000b98:	d106      	bne.n	8000ba8 <__aeabi_fmul+0x218>
 8000b9a:	4644      	mov	r4, r8
 8000b9c:	4304      	orrs	r4, r0
 8000b9e:	0264      	lsls	r4, r4, #9
 8000ba0:	0039      	movs	r1, r7
 8000ba2:	20ff      	movs	r0, #255	; 0xff
 8000ba4:	0a64      	lsrs	r4, r4, #9
 8000ba6:	e739      	b.n	8000a1c <__aeabi_fmul+0x8c>
 8000ba8:	2080      	movs	r0, #128	; 0x80
 8000baa:	03c0      	lsls	r0, r0, #15
 8000bac:	4304      	orrs	r4, r0
 8000bae:	0264      	lsls	r4, r4, #9
 8000bb0:	0031      	movs	r1, r6
 8000bb2:	20ff      	movs	r0, #255	; 0xff
 8000bb4:	0a64      	lsrs	r4, r4, #9
 8000bb6:	e731      	b.n	8000a1c <__aeabi_fmul+0x8c>
 8000bb8:	0028      	movs	r0, r5
 8000bba:	e765      	b.n	8000a88 <__aeabi_fmul+0xf8>
 8000bbc:	01a4      	lsls	r4, r4, #6
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	0a64      	lsrs	r4, r4, #9
 8000bc2:	e72b      	b.n	8000a1c <__aeabi_fmul+0x8c>
 8000bc4:	2080      	movs	r0, #128	; 0x80
 8000bc6:	03c0      	lsls	r0, r0, #15
 8000bc8:	4304      	orrs	r4, r0
 8000bca:	0264      	lsls	r4, r4, #9
 8000bcc:	20ff      	movs	r0, #255	; 0xff
 8000bce:	0a64      	lsrs	r4, r4, #9
 8000bd0:	e724      	b.n	8000a1c <__aeabi_fmul+0x8c>
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	08003194 	.word	0x08003194
 8000bd8:	f7ffffff 	.word	0xf7ffffff

08000bdc <__aeabi_fsub>:
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	46ce      	mov	lr, r9
 8000be0:	4647      	mov	r7, r8
 8000be2:	0243      	lsls	r3, r0, #9
 8000be4:	0a5b      	lsrs	r3, r3, #9
 8000be6:	024e      	lsls	r6, r1, #9
 8000be8:	00da      	lsls	r2, r3, #3
 8000bea:	4694      	mov	ip, r2
 8000bec:	0a72      	lsrs	r2, r6, #9
 8000bee:	4691      	mov	r9, r2
 8000bf0:	0045      	lsls	r5, r0, #1
 8000bf2:	004a      	lsls	r2, r1, #1
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	0e2d      	lsrs	r5, r5, #24
 8000bf8:	001f      	movs	r7, r3
 8000bfa:	0fc4      	lsrs	r4, r0, #31
 8000bfc:	0e12      	lsrs	r2, r2, #24
 8000bfe:	0fc9      	lsrs	r1, r1, #31
 8000c00:	09b6      	lsrs	r6, r6, #6
 8000c02:	2aff      	cmp	r2, #255	; 0xff
 8000c04:	d05b      	beq.n	8000cbe <__aeabi_fsub+0xe2>
 8000c06:	2001      	movs	r0, #1
 8000c08:	4041      	eors	r1, r0
 8000c0a:	428c      	cmp	r4, r1
 8000c0c:	d039      	beq.n	8000c82 <__aeabi_fsub+0xa6>
 8000c0e:	1aa8      	subs	r0, r5, r2
 8000c10:	2800      	cmp	r0, #0
 8000c12:	dd5a      	ble.n	8000cca <__aeabi_fsub+0xee>
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d06a      	beq.n	8000cee <__aeabi_fsub+0x112>
 8000c18:	2dff      	cmp	r5, #255	; 0xff
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_fsub+0x42>
 8000c1c:	e0d9      	b.n	8000dd2 <__aeabi_fsub+0x1f6>
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	04d2      	lsls	r2, r2, #19
 8000c22:	4316      	orrs	r6, r2
 8000c24:	281b      	cmp	r0, #27
 8000c26:	dc00      	bgt.n	8000c2a <__aeabi_fsub+0x4e>
 8000c28:	e0e9      	b.n	8000dfe <__aeabi_fsub+0x222>
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	1a18      	subs	r0, r3, r0
 8000c30:	0143      	lsls	r3, r0, #5
 8000c32:	d400      	bmi.n	8000c36 <__aeabi_fsub+0x5a>
 8000c34:	e0b4      	b.n	8000da0 <__aeabi_fsub+0x1c4>
 8000c36:	0180      	lsls	r0, r0, #6
 8000c38:	0987      	lsrs	r7, r0, #6
 8000c3a:	0038      	movs	r0, r7
 8000c3c:	f000 fa2c 	bl	8001098 <__clzsi2>
 8000c40:	3805      	subs	r0, #5
 8000c42:	4087      	lsls	r7, r0
 8000c44:	4285      	cmp	r5, r0
 8000c46:	dc00      	bgt.n	8000c4a <__aeabi_fsub+0x6e>
 8000c48:	e0cc      	b.n	8000de4 <__aeabi_fsub+0x208>
 8000c4a:	1a2d      	subs	r5, r5, r0
 8000c4c:	48b5      	ldr	r0, [pc, #724]	; (8000f24 <__aeabi_fsub+0x348>)
 8000c4e:	4038      	ands	r0, r7
 8000c50:	0743      	lsls	r3, r0, #29
 8000c52:	d004      	beq.n	8000c5e <__aeabi_fsub+0x82>
 8000c54:	230f      	movs	r3, #15
 8000c56:	4003      	ands	r3, r0
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_fsub+0x82>
 8000c5c:	3004      	adds	r0, #4
 8000c5e:	0143      	lsls	r3, r0, #5
 8000c60:	d400      	bmi.n	8000c64 <__aeabi_fsub+0x88>
 8000c62:	e0a0      	b.n	8000da6 <__aeabi_fsub+0x1ca>
 8000c64:	1c6a      	adds	r2, r5, #1
 8000c66:	2dfe      	cmp	r5, #254	; 0xfe
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fsub+0x90>
 8000c6a:	e08d      	b.n	8000d88 <__aeabi_fsub+0x1ac>
 8000c6c:	0180      	lsls	r0, r0, #6
 8000c6e:	0a47      	lsrs	r7, r0, #9
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	05d0      	lsls	r0, r2, #23
 8000c74:	4338      	orrs	r0, r7
 8000c76:	07e4      	lsls	r4, r4, #31
 8000c78:	4320      	orrs	r0, r4
 8000c7a:	bcc0      	pop	{r6, r7}
 8000c7c:	46b9      	mov	r9, r7
 8000c7e:	46b0      	mov	r8, r6
 8000c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c82:	1aa8      	subs	r0, r5, r2
 8000c84:	4680      	mov	r8, r0
 8000c86:	2800      	cmp	r0, #0
 8000c88:	dd45      	ble.n	8000d16 <__aeabi_fsub+0x13a>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d070      	beq.n	8000d70 <__aeabi_fsub+0x194>
 8000c8e:	2dff      	cmp	r5, #255	; 0xff
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fsub+0xb8>
 8000c92:	e09e      	b.n	8000dd2 <__aeabi_fsub+0x1f6>
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	04db      	lsls	r3, r3, #19
 8000c98:	431e      	orrs	r6, r3
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	2b1b      	cmp	r3, #27
 8000c9e:	dc00      	bgt.n	8000ca2 <__aeabi_fsub+0xc6>
 8000ca0:	e0d2      	b.n	8000e48 <__aeabi_fsub+0x26c>
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	4460      	add	r0, ip
 8000ca6:	0143      	lsls	r3, r0, #5
 8000ca8:	d57a      	bpl.n	8000da0 <__aeabi_fsub+0x1c4>
 8000caa:	3501      	adds	r5, #1
 8000cac:	2dff      	cmp	r5, #255	; 0xff
 8000cae:	d06b      	beq.n	8000d88 <__aeabi_fsub+0x1ac>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	4a9d      	ldr	r2, [pc, #628]	; (8000f28 <__aeabi_fsub+0x34c>)
 8000cb4:	4003      	ands	r3, r0
 8000cb6:	0840      	lsrs	r0, r0, #1
 8000cb8:	4010      	ands	r0, r2
 8000cba:	4318      	orrs	r0, r3
 8000cbc:	e7c8      	b.n	8000c50 <__aeabi_fsub+0x74>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d020      	beq.n	8000d04 <__aeabi_fsub+0x128>
 8000cc2:	428c      	cmp	r4, r1
 8000cc4:	d023      	beq.n	8000d0e <__aeabi_fsub+0x132>
 8000cc6:	0028      	movs	r0, r5
 8000cc8:	38ff      	subs	r0, #255	; 0xff
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d039      	beq.n	8000d42 <__aeabi_fsub+0x166>
 8000cce:	1b57      	subs	r7, r2, r5
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_fsub+0xfa>
 8000cd4:	e09d      	b.n	8000e12 <__aeabi_fsub+0x236>
 8000cd6:	4663      	mov	r3, ip
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d100      	bne.n	8000cde <__aeabi_fsub+0x102>
 8000cdc:	e0db      	b.n	8000e96 <__aeabi_fsub+0x2ba>
 8000cde:	1e7b      	subs	r3, r7, #1
 8000ce0:	2f01      	cmp	r7, #1
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_fsub+0x10a>
 8000ce4:	e10d      	b.n	8000f02 <__aeabi_fsub+0x326>
 8000ce6:	2fff      	cmp	r7, #255	; 0xff
 8000ce8:	d071      	beq.n	8000dce <__aeabi_fsub+0x1f2>
 8000cea:	001f      	movs	r7, r3
 8000cec:	e098      	b.n	8000e20 <__aeabi_fsub+0x244>
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x118>
 8000cf2:	e0a7      	b.n	8000e44 <__aeabi_fsub+0x268>
 8000cf4:	1e42      	subs	r2, r0, #1
 8000cf6:	2801      	cmp	r0, #1
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fsub+0x120>
 8000cfa:	e0e6      	b.n	8000eca <__aeabi_fsub+0x2ee>
 8000cfc:	28ff      	cmp	r0, #255	; 0xff
 8000cfe:	d068      	beq.n	8000dd2 <__aeabi_fsub+0x1f6>
 8000d00:	0010      	movs	r0, r2
 8000d02:	e78f      	b.n	8000c24 <__aeabi_fsub+0x48>
 8000d04:	2001      	movs	r0, #1
 8000d06:	4041      	eors	r1, r0
 8000d08:	42a1      	cmp	r1, r4
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_fsub+0x132>
 8000d0c:	e77f      	b.n	8000c0e <__aeabi_fsub+0x32>
 8000d0e:	20ff      	movs	r0, #255	; 0xff
 8000d10:	4240      	negs	r0, r0
 8000d12:	4680      	mov	r8, r0
 8000d14:	44a8      	add	r8, r5
 8000d16:	4640      	mov	r0, r8
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d038      	beq.n	8000d8e <__aeabi_fsub+0x1b2>
 8000d1c:	1b51      	subs	r1, r2, r5
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_fsub+0x148>
 8000d22:	e0ae      	b.n	8000e82 <__aeabi_fsub+0x2a6>
 8000d24:	2aff      	cmp	r2, #255	; 0xff
 8000d26:	d100      	bne.n	8000d2a <__aeabi_fsub+0x14e>
 8000d28:	e0df      	b.n	8000eea <__aeabi_fsub+0x30e>
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	4660      	mov	r0, ip
 8000d2e:	04db      	lsls	r3, r3, #19
 8000d30:	4318      	orrs	r0, r3
 8000d32:	4684      	mov	ip, r0
 8000d34:	291b      	cmp	r1, #27
 8000d36:	dc00      	bgt.n	8000d3a <__aeabi_fsub+0x15e>
 8000d38:	e0d9      	b.n	8000eee <__aeabi_fsub+0x312>
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	0015      	movs	r5, r2
 8000d3e:	1980      	adds	r0, r0, r6
 8000d40:	e7b1      	b.n	8000ca6 <__aeabi_fsub+0xca>
 8000d42:	20fe      	movs	r0, #254	; 0xfe
 8000d44:	1c6a      	adds	r2, r5, #1
 8000d46:	4210      	tst	r0, r2
 8000d48:	d171      	bne.n	8000e2e <__aeabi_fsub+0x252>
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fsub+0x174>
 8000d4e:	e0a6      	b.n	8000e9e <__aeabi_fsub+0x2c2>
 8000d50:	4663      	mov	r3, ip
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_fsub+0x17c>
 8000d56:	e0d9      	b.n	8000f0c <__aeabi_fsub+0x330>
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_fsub+0x184>
 8000d5e:	e788      	b.n	8000c72 <__aeabi_fsub+0x96>
 8000d60:	1b98      	subs	r0, r3, r6
 8000d62:	0143      	lsls	r3, r0, #5
 8000d64:	d400      	bmi.n	8000d68 <__aeabi_fsub+0x18c>
 8000d66:	e0e1      	b.n	8000f2c <__aeabi_fsub+0x350>
 8000d68:	4663      	mov	r3, ip
 8000d6a:	000c      	movs	r4, r1
 8000d6c:	1af0      	subs	r0, r6, r3
 8000d6e:	e76f      	b.n	8000c50 <__aeabi_fsub+0x74>
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d100      	bne.n	8000d76 <__aeabi_fsub+0x19a>
 8000d74:	e0b7      	b.n	8000ee6 <__aeabi_fsub+0x30a>
 8000d76:	0002      	movs	r2, r0
 8000d78:	3a01      	subs	r2, #1
 8000d7a:	2801      	cmp	r0, #1
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_fsub+0x1a4>
 8000d7e:	e09c      	b.n	8000eba <__aeabi_fsub+0x2de>
 8000d80:	28ff      	cmp	r0, #255	; 0xff
 8000d82:	d026      	beq.n	8000dd2 <__aeabi_fsub+0x1f6>
 8000d84:	4690      	mov	r8, r2
 8000d86:	e788      	b.n	8000c9a <__aeabi_fsub+0xbe>
 8000d88:	22ff      	movs	r2, #255	; 0xff
 8000d8a:	2700      	movs	r7, #0
 8000d8c:	e771      	b.n	8000c72 <__aeabi_fsub+0x96>
 8000d8e:	20fe      	movs	r0, #254	; 0xfe
 8000d90:	1c6a      	adds	r2, r5, #1
 8000d92:	4210      	tst	r0, r2
 8000d94:	d064      	beq.n	8000e60 <__aeabi_fsub+0x284>
 8000d96:	2aff      	cmp	r2, #255	; 0xff
 8000d98:	d0f6      	beq.n	8000d88 <__aeabi_fsub+0x1ac>
 8000d9a:	0015      	movs	r5, r2
 8000d9c:	4466      	add	r6, ip
 8000d9e:	0870      	lsrs	r0, r6, #1
 8000da0:	0743      	lsls	r3, r0, #29
 8000da2:	d000      	beq.n	8000da6 <__aeabi_fsub+0x1ca>
 8000da4:	e756      	b.n	8000c54 <__aeabi_fsub+0x78>
 8000da6:	08c3      	lsrs	r3, r0, #3
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d012      	beq.n	8000dd2 <__aeabi_fsub+0x1f6>
 8000dac:	025b      	lsls	r3, r3, #9
 8000dae:	0a5f      	lsrs	r7, r3, #9
 8000db0:	b2ea      	uxtb	r2, r5
 8000db2:	e75e      	b.n	8000c72 <__aeabi_fsub+0x96>
 8000db4:	4662      	mov	r2, ip
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d100      	bne.n	8000dbc <__aeabi_fsub+0x1e0>
 8000dba:	e096      	b.n	8000eea <__aeabi_fsub+0x30e>
 8000dbc:	2e00      	cmp	r6, #0
 8000dbe:	d008      	beq.n	8000dd2 <__aeabi_fsub+0x1f6>
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	03d2      	lsls	r2, r2, #15
 8000dc4:	4213      	tst	r3, r2
 8000dc6:	d004      	beq.n	8000dd2 <__aeabi_fsub+0x1f6>
 8000dc8:	4648      	mov	r0, r9
 8000dca:	4210      	tst	r0, r2
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_fsub+0x1f6>
 8000dce:	000c      	movs	r4, r1
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0d8      	beq.n	8000d88 <__aeabi_fsub+0x1ac>
 8000dd6:	2780      	movs	r7, #128	; 0x80
 8000dd8:	03ff      	lsls	r7, r7, #15
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	027f      	lsls	r7, r7, #9
 8000dde:	22ff      	movs	r2, #255	; 0xff
 8000de0:	0a7f      	lsrs	r7, r7, #9
 8000de2:	e746      	b.n	8000c72 <__aeabi_fsub+0x96>
 8000de4:	2320      	movs	r3, #32
 8000de6:	003a      	movs	r2, r7
 8000de8:	1b45      	subs	r5, r0, r5
 8000dea:	0038      	movs	r0, r7
 8000dec:	3501      	adds	r5, #1
 8000dee:	40ea      	lsrs	r2, r5
 8000df0:	1b5d      	subs	r5, r3, r5
 8000df2:	40a8      	lsls	r0, r5
 8000df4:	1e43      	subs	r3, r0, #1
 8000df6:	4198      	sbcs	r0, r3
 8000df8:	2500      	movs	r5, #0
 8000dfa:	4310      	orrs	r0, r2
 8000dfc:	e728      	b.n	8000c50 <__aeabi_fsub+0x74>
 8000dfe:	2320      	movs	r3, #32
 8000e00:	1a1b      	subs	r3, r3, r0
 8000e02:	0032      	movs	r2, r6
 8000e04:	409e      	lsls	r6, r3
 8000e06:	40c2      	lsrs	r2, r0
 8000e08:	0030      	movs	r0, r6
 8000e0a:	1e43      	subs	r3, r0, #1
 8000e0c:	4198      	sbcs	r0, r3
 8000e0e:	4310      	orrs	r0, r2
 8000e10:	e70c      	b.n	8000c2c <__aeabi_fsub+0x50>
 8000e12:	2aff      	cmp	r2, #255	; 0xff
 8000e14:	d0db      	beq.n	8000dce <__aeabi_fsub+0x1f2>
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	4660      	mov	r0, ip
 8000e1a:	04db      	lsls	r3, r3, #19
 8000e1c:	4318      	orrs	r0, r3
 8000e1e:	4684      	mov	ip, r0
 8000e20:	2f1b      	cmp	r7, #27
 8000e22:	dd56      	ble.n	8000ed2 <__aeabi_fsub+0x2f6>
 8000e24:	2001      	movs	r0, #1
 8000e26:	000c      	movs	r4, r1
 8000e28:	0015      	movs	r5, r2
 8000e2a:	1a30      	subs	r0, r6, r0
 8000e2c:	e700      	b.n	8000c30 <__aeabi_fsub+0x54>
 8000e2e:	4663      	mov	r3, ip
 8000e30:	1b9f      	subs	r7, r3, r6
 8000e32:	017b      	lsls	r3, r7, #5
 8000e34:	d43d      	bmi.n	8000eb2 <__aeabi_fsub+0x2d6>
 8000e36:	2f00      	cmp	r7, #0
 8000e38:	d000      	beq.n	8000e3c <__aeabi_fsub+0x260>
 8000e3a:	e6fe      	b.n	8000c3a <__aeabi_fsub+0x5e>
 8000e3c:	2400      	movs	r4, #0
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2700      	movs	r7, #0
 8000e42:	e716      	b.n	8000c72 <__aeabi_fsub+0x96>
 8000e44:	0005      	movs	r5, r0
 8000e46:	e7af      	b.n	8000da8 <__aeabi_fsub+0x1cc>
 8000e48:	0032      	movs	r2, r6
 8000e4a:	4643      	mov	r3, r8
 8000e4c:	4641      	mov	r1, r8
 8000e4e:	40da      	lsrs	r2, r3
 8000e50:	2320      	movs	r3, #32
 8000e52:	1a5b      	subs	r3, r3, r1
 8000e54:	409e      	lsls	r6, r3
 8000e56:	0030      	movs	r0, r6
 8000e58:	1e43      	subs	r3, r0, #1
 8000e5a:	4198      	sbcs	r0, r3
 8000e5c:	4310      	orrs	r0, r2
 8000e5e:	e721      	b.n	8000ca4 <__aeabi_fsub+0xc8>
 8000e60:	2d00      	cmp	r5, #0
 8000e62:	d1a7      	bne.n	8000db4 <__aeabi_fsub+0x1d8>
 8000e64:	4663      	mov	r3, ip
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d059      	beq.n	8000f1e <__aeabi_fsub+0x342>
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_fsub+0x296>
 8000e70:	e6ff      	b.n	8000c72 <__aeabi_fsub+0x96>
 8000e72:	0030      	movs	r0, r6
 8000e74:	4460      	add	r0, ip
 8000e76:	0143      	lsls	r3, r0, #5
 8000e78:	d592      	bpl.n	8000da0 <__aeabi_fsub+0x1c4>
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <__aeabi_fsub+0x348>)
 8000e7c:	3501      	adds	r5, #1
 8000e7e:	4018      	ands	r0, r3
 8000e80:	e78e      	b.n	8000da0 <__aeabi_fsub+0x1c4>
 8000e82:	4663      	mov	r3, ip
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d047      	beq.n	8000f18 <__aeabi_fsub+0x33c>
 8000e88:	1e4b      	subs	r3, r1, #1
 8000e8a:	2901      	cmp	r1, #1
 8000e8c:	d015      	beq.n	8000eba <__aeabi_fsub+0x2de>
 8000e8e:	29ff      	cmp	r1, #255	; 0xff
 8000e90:	d02b      	beq.n	8000eea <__aeabi_fsub+0x30e>
 8000e92:	0019      	movs	r1, r3
 8000e94:	e74e      	b.n	8000d34 <__aeabi_fsub+0x158>
 8000e96:	000c      	movs	r4, r1
 8000e98:	464b      	mov	r3, r9
 8000e9a:	003d      	movs	r5, r7
 8000e9c:	e784      	b.n	8000da8 <__aeabi_fsub+0x1cc>
 8000e9e:	4662      	mov	r2, ip
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	d18b      	bne.n	8000dbc <__aeabi_fsub+0x1e0>
 8000ea4:	2e00      	cmp	r6, #0
 8000ea6:	d192      	bne.n	8000dce <__aeabi_fsub+0x1f2>
 8000ea8:	2780      	movs	r7, #128	; 0x80
 8000eaa:	2400      	movs	r4, #0
 8000eac:	22ff      	movs	r2, #255	; 0xff
 8000eae:	03ff      	lsls	r7, r7, #15
 8000eb0:	e6df      	b.n	8000c72 <__aeabi_fsub+0x96>
 8000eb2:	4663      	mov	r3, ip
 8000eb4:	000c      	movs	r4, r1
 8000eb6:	1af7      	subs	r7, r6, r3
 8000eb8:	e6bf      	b.n	8000c3a <__aeabi_fsub+0x5e>
 8000eba:	0030      	movs	r0, r6
 8000ebc:	4460      	add	r0, ip
 8000ebe:	2501      	movs	r5, #1
 8000ec0:	0143      	lsls	r3, r0, #5
 8000ec2:	d400      	bmi.n	8000ec6 <__aeabi_fsub+0x2ea>
 8000ec4:	e76c      	b.n	8000da0 <__aeabi_fsub+0x1c4>
 8000ec6:	2502      	movs	r5, #2
 8000ec8:	e6f2      	b.n	8000cb0 <__aeabi_fsub+0xd4>
 8000eca:	4663      	mov	r3, ip
 8000ecc:	2501      	movs	r5, #1
 8000ece:	1b98      	subs	r0, r3, r6
 8000ed0:	e6ae      	b.n	8000c30 <__aeabi_fsub+0x54>
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	4664      	mov	r4, ip
 8000ed6:	4660      	mov	r0, ip
 8000ed8:	40fc      	lsrs	r4, r7
 8000eda:	1bdf      	subs	r7, r3, r7
 8000edc:	40b8      	lsls	r0, r7
 8000ede:	1e43      	subs	r3, r0, #1
 8000ee0:	4198      	sbcs	r0, r3
 8000ee2:	4320      	orrs	r0, r4
 8000ee4:	e79f      	b.n	8000e26 <__aeabi_fsub+0x24a>
 8000ee6:	0005      	movs	r5, r0
 8000ee8:	e75e      	b.n	8000da8 <__aeabi_fsub+0x1cc>
 8000eea:	464b      	mov	r3, r9
 8000eec:	e771      	b.n	8000dd2 <__aeabi_fsub+0x1f6>
 8000eee:	2320      	movs	r3, #32
 8000ef0:	4665      	mov	r5, ip
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	40cd      	lsrs	r5, r1
 8000ef6:	1a59      	subs	r1, r3, r1
 8000ef8:	4088      	lsls	r0, r1
 8000efa:	1e43      	subs	r3, r0, #1
 8000efc:	4198      	sbcs	r0, r3
 8000efe:	4328      	orrs	r0, r5
 8000f00:	e71c      	b.n	8000d3c <__aeabi_fsub+0x160>
 8000f02:	4663      	mov	r3, ip
 8000f04:	000c      	movs	r4, r1
 8000f06:	2501      	movs	r5, #1
 8000f08:	1af0      	subs	r0, r6, r3
 8000f0a:	e691      	b.n	8000c30 <__aeabi_fsub+0x54>
 8000f0c:	2e00      	cmp	r6, #0
 8000f0e:	d095      	beq.n	8000e3c <__aeabi_fsub+0x260>
 8000f10:	000c      	movs	r4, r1
 8000f12:	464f      	mov	r7, r9
 8000f14:	2200      	movs	r2, #0
 8000f16:	e6ac      	b.n	8000c72 <__aeabi_fsub+0x96>
 8000f18:	464b      	mov	r3, r9
 8000f1a:	000d      	movs	r5, r1
 8000f1c:	e744      	b.n	8000da8 <__aeabi_fsub+0x1cc>
 8000f1e:	464f      	mov	r7, r9
 8000f20:	2200      	movs	r2, #0
 8000f22:	e6a6      	b.n	8000c72 <__aeabi_fsub+0x96>
 8000f24:	fbffffff 	.word	0xfbffffff
 8000f28:	7dffffff 	.word	0x7dffffff
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d000      	beq.n	8000f32 <__aeabi_fsub+0x356>
 8000f30:	e736      	b.n	8000da0 <__aeabi_fsub+0x1c4>
 8000f32:	2400      	movs	r4, #0
 8000f34:	2700      	movs	r7, #0
 8000f36:	e69c      	b.n	8000c72 <__aeabi_fsub+0x96>

08000f38 <__aeabi_f2iz>:
 8000f38:	0241      	lsls	r1, r0, #9
 8000f3a:	0042      	lsls	r2, r0, #1
 8000f3c:	0fc3      	lsrs	r3, r0, #31
 8000f3e:	0a49      	lsrs	r1, r1, #9
 8000f40:	2000      	movs	r0, #0
 8000f42:	0e12      	lsrs	r2, r2, #24
 8000f44:	2a7e      	cmp	r2, #126	; 0x7e
 8000f46:	dd03      	ble.n	8000f50 <__aeabi_f2iz+0x18>
 8000f48:	2a9d      	cmp	r2, #157	; 0x9d
 8000f4a:	dd02      	ble.n	8000f52 <__aeabi_f2iz+0x1a>
 8000f4c:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <__aeabi_f2iz+0x3c>)
 8000f4e:	1898      	adds	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	2080      	movs	r0, #128	; 0x80
 8000f54:	0400      	lsls	r0, r0, #16
 8000f56:	4301      	orrs	r1, r0
 8000f58:	2a95      	cmp	r2, #149	; 0x95
 8000f5a:	dc07      	bgt.n	8000f6c <__aeabi_f2iz+0x34>
 8000f5c:	2096      	movs	r0, #150	; 0x96
 8000f5e:	1a82      	subs	r2, r0, r2
 8000f60:	40d1      	lsrs	r1, r2
 8000f62:	4248      	negs	r0, r1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f3      	bne.n	8000f50 <__aeabi_f2iz+0x18>
 8000f68:	0008      	movs	r0, r1
 8000f6a:	e7f1      	b.n	8000f50 <__aeabi_f2iz+0x18>
 8000f6c:	3a96      	subs	r2, #150	; 0x96
 8000f6e:	4091      	lsls	r1, r2
 8000f70:	e7f7      	b.n	8000f62 <__aeabi_f2iz+0x2a>
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	7fffffff 	.word	0x7fffffff

08000f78 <__aeabi_i2f>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	d013      	beq.n	8000fa6 <__aeabi_i2f+0x2e>
 8000f7e:	17c3      	asrs	r3, r0, #31
 8000f80:	18c6      	adds	r6, r0, r3
 8000f82:	405e      	eors	r6, r3
 8000f84:	0fc4      	lsrs	r4, r0, #31
 8000f86:	0030      	movs	r0, r6
 8000f88:	f000 f886 	bl	8001098 <__clzsi2>
 8000f8c:	239e      	movs	r3, #158	; 0x9e
 8000f8e:	0005      	movs	r5, r0
 8000f90:	1a1b      	subs	r3, r3, r0
 8000f92:	2b96      	cmp	r3, #150	; 0x96
 8000f94:	dc0f      	bgt.n	8000fb6 <__aeabi_i2f+0x3e>
 8000f96:	2808      	cmp	r0, #8
 8000f98:	dd01      	ble.n	8000f9e <__aeabi_i2f+0x26>
 8000f9a:	3d08      	subs	r5, #8
 8000f9c:	40ae      	lsls	r6, r5
 8000f9e:	0276      	lsls	r6, r6, #9
 8000fa0:	0a76      	lsrs	r6, r6, #9
 8000fa2:	b2d8      	uxtb	r0, r3
 8000fa4:	e002      	b.n	8000fac <__aeabi_i2f+0x34>
 8000fa6:	2400      	movs	r4, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	2600      	movs	r6, #0
 8000fac:	05c0      	lsls	r0, r0, #23
 8000fae:	4330      	orrs	r0, r6
 8000fb0:	07e4      	lsls	r4, r4, #31
 8000fb2:	4320      	orrs	r0, r4
 8000fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb6:	2b99      	cmp	r3, #153	; 0x99
 8000fb8:	dd0c      	ble.n	8000fd4 <__aeabi_i2f+0x5c>
 8000fba:	2205      	movs	r2, #5
 8000fbc:	0031      	movs	r1, r6
 8000fbe:	1a12      	subs	r2, r2, r0
 8000fc0:	40d1      	lsrs	r1, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	0001      	movs	r1, r0
 8000fc6:	0030      	movs	r0, r6
 8000fc8:	311b      	adds	r1, #27
 8000fca:	4088      	lsls	r0, r1
 8000fcc:	1e41      	subs	r1, r0, #1
 8000fce:	4188      	sbcs	r0, r1
 8000fd0:	4302      	orrs	r2, r0
 8000fd2:	0016      	movs	r6, r2
 8000fd4:	2d05      	cmp	r5, #5
 8000fd6:	dc12      	bgt.n	8000ffe <__aeabi_i2f+0x86>
 8000fd8:	0031      	movs	r1, r6
 8000fda:	4f0d      	ldr	r7, [pc, #52]	; (8001010 <__aeabi_i2f+0x98>)
 8000fdc:	4039      	ands	r1, r7
 8000fde:	0772      	lsls	r2, r6, #29
 8000fe0:	d009      	beq.n	8000ff6 <__aeabi_i2f+0x7e>
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	4030      	ands	r0, r6
 8000fe6:	2804      	cmp	r0, #4
 8000fe8:	d005      	beq.n	8000ff6 <__aeabi_i2f+0x7e>
 8000fea:	3104      	adds	r1, #4
 8000fec:	014a      	lsls	r2, r1, #5
 8000fee:	d502      	bpl.n	8000ff6 <__aeabi_i2f+0x7e>
 8000ff0:	239f      	movs	r3, #159	; 0x9f
 8000ff2:	4039      	ands	r1, r7
 8000ff4:	1b5b      	subs	r3, r3, r5
 8000ff6:	0189      	lsls	r1, r1, #6
 8000ff8:	0a4e      	lsrs	r6, r1, #9
 8000ffa:	b2d8      	uxtb	r0, r3
 8000ffc:	e7d6      	b.n	8000fac <__aeabi_i2f+0x34>
 8000ffe:	1f6a      	subs	r2, r5, #5
 8001000:	4096      	lsls	r6, r2
 8001002:	0031      	movs	r1, r6
 8001004:	4f02      	ldr	r7, [pc, #8]	; (8001010 <__aeabi_i2f+0x98>)
 8001006:	4039      	ands	r1, r7
 8001008:	0772      	lsls	r2, r6, #29
 800100a:	d0f4      	beq.n	8000ff6 <__aeabi_i2f+0x7e>
 800100c:	e7e9      	b.n	8000fe2 <__aeabi_i2f+0x6a>
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	fbffffff 	.word	0xfbffffff

08001014 <__aeabi_ui2f>:
 8001014:	b570      	push	{r4, r5, r6, lr}
 8001016:	1e05      	subs	r5, r0, #0
 8001018:	d00e      	beq.n	8001038 <__aeabi_ui2f+0x24>
 800101a:	f000 f83d 	bl	8001098 <__clzsi2>
 800101e:	239e      	movs	r3, #158	; 0x9e
 8001020:	0004      	movs	r4, r0
 8001022:	1a1b      	subs	r3, r3, r0
 8001024:	2b96      	cmp	r3, #150	; 0x96
 8001026:	dc0c      	bgt.n	8001042 <__aeabi_ui2f+0x2e>
 8001028:	2808      	cmp	r0, #8
 800102a:	dd01      	ble.n	8001030 <__aeabi_ui2f+0x1c>
 800102c:	3c08      	subs	r4, #8
 800102e:	40a5      	lsls	r5, r4
 8001030:	026d      	lsls	r5, r5, #9
 8001032:	0a6d      	lsrs	r5, r5, #9
 8001034:	b2d8      	uxtb	r0, r3
 8001036:	e001      	b.n	800103c <__aeabi_ui2f+0x28>
 8001038:	2000      	movs	r0, #0
 800103a:	2500      	movs	r5, #0
 800103c:	05c0      	lsls	r0, r0, #23
 800103e:	4328      	orrs	r0, r5
 8001040:	bd70      	pop	{r4, r5, r6, pc}
 8001042:	2b99      	cmp	r3, #153	; 0x99
 8001044:	dd09      	ble.n	800105a <__aeabi_ui2f+0x46>
 8001046:	0002      	movs	r2, r0
 8001048:	0029      	movs	r1, r5
 800104a:	321b      	adds	r2, #27
 800104c:	4091      	lsls	r1, r2
 800104e:	1e4a      	subs	r2, r1, #1
 8001050:	4191      	sbcs	r1, r2
 8001052:	2205      	movs	r2, #5
 8001054:	1a12      	subs	r2, r2, r0
 8001056:	40d5      	lsrs	r5, r2
 8001058:	430d      	orrs	r5, r1
 800105a:	2c05      	cmp	r4, #5
 800105c:	dc12      	bgt.n	8001084 <__aeabi_ui2f+0x70>
 800105e:	0029      	movs	r1, r5
 8001060:	4e0c      	ldr	r6, [pc, #48]	; (8001094 <__aeabi_ui2f+0x80>)
 8001062:	4031      	ands	r1, r6
 8001064:	076a      	lsls	r2, r5, #29
 8001066:	d009      	beq.n	800107c <__aeabi_ui2f+0x68>
 8001068:	200f      	movs	r0, #15
 800106a:	4028      	ands	r0, r5
 800106c:	2804      	cmp	r0, #4
 800106e:	d005      	beq.n	800107c <__aeabi_ui2f+0x68>
 8001070:	3104      	adds	r1, #4
 8001072:	014a      	lsls	r2, r1, #5
 8001074:	d502      	bpl.n	800107c <__aeabi_ui2f+0x68>
 8001076:	239f      	movs	r3, #159	; 0x9f
 8001078:	4031      	ands	r1, r6
 800107a:	1b1b      	subs	r3, r3, r4
 800107c:	0189      	lsls	r1, r1, #6
 800107e:	0a4d      	lsrs	r5, r1, #9
 8001080:	b2d8      	uxtb	r0, r3
 8001082:	e7db      	b.n	800103c <__aeabi_ui2f+0x28>
 8001084:	1f62      	subs	r2, r4, #5
 8001086:	4095      	lsls	r5, r2
 8001088:	0029      	movs	r1, r5
 800108a:	4e02      	ldr	r6, [pc, #8]	; (8001094 <__aeabi_ui2f+0x80>)
 800108c:	4031      	ands	r1, r6
 800108e:	076a      	lsls	r2, r5, #29
 8001090:	d0f4      	beq.n	800107c <__aeabi_ui2f+0x68>
 8001092:	e7e9      	b.n	8001068 <__aeabi_ui2f+0x54>
 8001094:	fbffffff 	.word	0xfbffffff

08001098 <__clzsi2>:
 8001098:	211c      	movs	r1, #28
 800109a:	2301      	movs	r3, #1
 800109c:	041b      	lsls	r3, r3, #16
 800109e:	4298      	cmp	r0, r3
 80010a0:	d301      	bcc.n	80010a6 <__clzsi2+0xe>
 80010a2:	0c00      	lsrs	r0, r0, #16
 80010a4:	3910      	subs	r1, #16
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	4298      	cmp	r0, r3
 80010aa:	d301      	bcc.n	80010b0 <__clzsi2+0x18>
 80010ac:	0a00      	lsrs	r0, r0, #8
 80010ae:	3908      	subs	r1, #8
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d301      	bcc.n	80010ba <__clzsi2+0x22>
 80010b6:	0900      	lsrs	r0, r0, #4
 80010b8:	3904      	subs	r1, #4
 80010ba:	a202      	add	r2, pc, #8	; (adr r2, 80010c4 <__clzsi2+0x2c>)
 80010bc:	5c10      	ldrb	r0, [r2, r0]
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	4770      	bx	lr
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	02020304 	.word	0x02020304
 80010c8:	01010101 	.word	0x01010101
	...

080010d4 <PrintSetTemperature>:
	PrintDeviceStatus(status);
	PrintPower(power);
	ssd1306_UpdateScreen();
}

void PrintSetTemperature(uint16_t setTemp){
 80010d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char stringSetTemperature[6] ;
	ssd1306_SetCursor(0, 0);
 80010d6:	2100      	movs	r1, #0
void PrintSetTemperature(uint16_t setTemp){
 80010d8:	0004      	movs	r4, r0
	ssd1306_SetCursor(0, 0);
 80010da:	0008      	movs	r0, r1
 80010dc:	f001 ff60 	bl	8002fa0 <ssd1306_SetCursor>
	ssd1306_WriteString("SET:", Font_7x10, 1);
 80010e0:	4d1a      	ldr	r5, [pc, #104]	; (800114c <PrintSetTemperature+0x78>)
 80010e2:	2301      	movs	r3, #1
 80010e4:	686a      	ldr	r2, [r5, #4]
 80010e6:	6829      	ldr	r1, [r5, #0]
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <PrintSetTemperature+0x7c>)
 80010ea:	f001 ff45 	bl	8002f78 <ssd1306_WriteString>
	stringSetTemperature[0] = '0' + ((int) setTemp % 1000 / 100);
 80010ee:	21fa      	movs	r1, #250	; 0xfa
 80010f0:	0020      	movs	r0, r4
 80010f2:	0089      	lsls	r1, r1, #2
 80010f4:	f7ff f88e 	bl	8000214 <__aeabi_uidivmod>
 80010f8:	b288      	uxth	r0, r1
 80010fa:	2164      	movs	r1, #100	; 0x64
 80010fc:	f7ff f804 	bl	8000108 <__udivsi3>
 8001100:	466b      	mov	r3, sp
 8001102:	3030      	adds	r0, #48	; 0x30
 8001104:	7018      	strb	r0, [r3, #0]
	stringSetTemperature[1] = '0' + ((int) setTemp % 100 / 10);
 8001106:	2164      	movs	r1, #100	; 0x64
 8001108:	0020      	movs	r0, r4
 800110a:	f7ff f883 	bl	8000214 <__aeabi_uidivmod>
 800110e:	b288      	uxth	r0, r1
 8001110:	210a      	movs	r1, #10
 8001112:	f7fe fff9 	bl	8000108 <__udivsi3>
 8001116:	466b      	mov	r3, sp
 8001118:	3030      	adds	r0, #48	; 0x30
 800111a:	7058      	strb	r0, [r3, #1]
	stringSetTemperature[2] = '0' + ((int) setTemp % 10);
 800111c:	210a      	movs	r1, #10
 800111e:	0020      	movs	r0, r4
 8001120:	f7ff f878 	bl	8000214 <__aeabi_uidivmod>
 8001124:	466b      	mov	r3, sp
 8001126:	3130      	adds	r1, #48	; 0x30
	stringSetTemperature[3] = '*';
 8001128:	466a      	mov	r2, sp
	stringSetTemperature[2] = '0' + ((int) setTemp % 10);
 800112a:	7099      	strb	r1, [r3, #2]
	stringSetTemperature[3] = '*';
 800112c:	232a      	movs	r3, #42	; 0x2a
	stringSetTemperature[4] = 'C';
	stringSetTemperature[5] = '\0';
 800112e:	2100      	movs	r1, #0
	stringSetTemperature[3] = '*';
 8001130:	70d3      	strb	r3, [r2, #3]
	stringSetTemperature[4] = 'C';
 8001132:	3319      	adds	r3, #25
 8001134:	7113      	strb	r3, [r2, #4]
	ssd1306_SetCursor(28, 0);
 8001136:	201c      	movs	r0, #28
	stringSetTemperature[5] = '\0';
 8001138:	7151      	strb	r1, [r2, #5]
	ssd1306_SetCursor(28, 0);
 800113a:	f001 ff31 	bl	8002fa0 <ssd1306_SetCursor>
	ssd1306_WriteString(stringSetTemperature, Font_7x10, 1);
 800113e:	cd06      	ldmia	r5!, {r1, r2}
 8001140:	2301      	movs	r3, #1
 8001142:	4668      	mov	r0, sp
 8001144:	f001 ff18 	bl	8002f78 <ssd1306_WriteString>
}
 8001148:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	20000018 	.word	0x20000018
 8001150:	080031d4 	.word	0x080031d4

08001154 <PrintCurrentTemperature>:

void PrintCurrentTemperature(uint16_t currnetTemp){
 8001154:	b513      	push	{r0, r1, r4, lr}
	char stringCurrentTemperature[6];
	stringCurrentTemperature[0] = '0' + ((int) currnetTemp % 1000 / 100);
 8001156:	21fa      	movs	r1, #250	; 0xfa
 8001158:	0089      	lsls	r1, r1, #2
void PrintCurrentTemperature(uint16_t currnetTemp){
 800115a:	0004      	movs	r4, r0
	stringCurrentTemperature[0] = '0' + ((int) currnetTemp % 1000 / 100);
 800115c:	f7ff f85a 	bl	8000214 <__aeabi_uidivmod>
 8001160:	b288      	uxth	r0, r1
 8001162:	2164      	movs	r1, #100	; 0x64
 8001164:	f7fe ffd0 	bl	8000108 <__udivsi3>
 8001168:	466b      	mov	r3, sp
 800116a:	3030      	adds	r0, #48	; 0x30
 800116c:	7018      	strb	r0, [r3, #0]
	stringCurrentTemperature[1] = '0' + ((int) currnetTemp % 100 / 10);
 800116e:	2164      	movs	r1, #100	; 0x64
 8001170:	0020      	movs	r0, r4
 8001172:	f7ff f84f 	bl	8000214 <__aeabi_uidivmod>
 8001176:	b288      	uxth	r0, r1
 8001178:	210a      	movs	r1, #10
 800117a:	f7fe ffc5 	bl	8000108 <__udivsi3>
 800117e:	466b      	mov	r3, sp
 8001180:	3030      	adds	r0, #48	; 0x30
 8001182:	7058      	strb	r0, [r3, #1]
	stringCurrentTemperature[2] = '0' + ((int) currnetTemp % 10);
 8001184:	210a      	movs	r1, #10
 8001186:	0020      	movs	r0, r4
 8001188:	f7ff f844 	bl	8000214 <__aeabi_uidivmod>
 800118c:	466b      	mov	r3, sp
 800118e:	3130      	adds	r1, #48	; 0x30
	stringCurrentTemperature[3] = '*';
 8001190:	466a      	mov	r2, sp
	stringCurrentTemperature[2] = '0' + ((int) currnetTemp % 10);
 8001192:	7099      	strb	r1, [r3, #2]
	stringCurrentTemperature[3] = '*';
 8001194:	232a      	movs	r3, #42	; 0x2a
 8001196:	70d3      	strb	r3, [r2, #3]
	stringCurrentTemperature[4] = 'C';
 8001198:	3319      	adds	r3, #25
 800119a:	7113      	strb	r3, [r2, #4]
	stringCurrentTemperature[5] = '\0';
 800119c:	2300      	movs	r3, #0
	ssd1306_SetCursor(73, 2);
 800119e:	2102      	movs	r1, #2
	stringCurrentTemperature[5] = '\0';
 80011a0:	7153      	strb	r3, [r2, #5]
	ssd1306_SetCursor(73, 2);
 80011a2:	2049      	movs	r0, #73	; 0x49
 80011a4:	f001 fefc 	bl	8002fa0 <ssd1306_SetCursor>
	ssd1306_WriteString(stringCurrentTemperature, Font_11x18, 1);
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <PrintCurrentTemperature+0x64>)
 80011aa:	2301      	movs	r3, #1
 80011ac:	ca06      	ldmia	r2, {r1, r2}
 80011ae:	4668      	mov	r0, sp
 80011b0:	f001 fee2 	bl	8002f78 <ssd1306_WriteString>
}
 80011b4:	bd13      	pop	{r0, r1, r4, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000010 	.word	0x20000010

080011bc <PrintPower>:

void PrintPower(uint8_t power){
 80011bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011be:	0006      	movs	r6, r0
	char stringPower[4] ;
	ssd1306_SetCursor(73, 22);
 80011c0:	2116      	movs	r1, #22
 80011c2:	2049      	movs	r0, #73	; 0x49
 80011c4:	f001 feec 	bl	8002fa0 <ssd1306_SetCursor>
	ssd1306_WriteString("POW:", Font_7x10, 1);
 80011c8:	4d12      	ldr	r5, [pc, #72]	; (8001214 <PrintPower+0x58>)
 80011ca:	2301      	movs	r3, #1
 80011cc:	686a      	ldr	r2, [r5, #4]
 80011ce:	6829      	ldr	r1, [r5, #0]
 80011d0:	4811      	ldr	r0, [pc, #68]	; (8001218 <PrintPower+0x5c>)
 80011d2:	f001 fed1 	bl	8002f78 <ssd1306_WriteString>
	stringPower[0] = '0' + ((int) power % 100 / 10);
 80011d6:	0030      	movs	r0, r6
 80011d8:	2164      	movs	r1, #100	; 0x64
 80011da:	f7ff f81b 	bl	8000214 <__aeabi_uidivmod>
 80011de:	b2c8      	uxtb	r0, r1
 80011e0:	210a      	movs	r1, #10
 80011e2:	f7fe ff91 	bl	8000108 <__udivsi3>
 80011e6:	ac01      	add	r4, sp, #4
 80011e8:	3030      	adds	r0, #48	; 0x30
 80011ea:	7020      	strb	r0, [r4, #0]
	stringPower[1] = '0' + ((int) power % 10);
 80011ec:	210a      	movs	r1, #10
 80011ee:	0030      	movs	r0, r6
 80011f0:	f7ff f810 	bl	8000214 <__aeabi_uidivmod>
	stringPower[2] = 'W';
 80011f4:	2357      	movs	r3, #87	; 0x57
 80011f6:	70a3      	strb	r3, [r4, #2]
	stringPower[3] = '\0';
 80011f8:	2300      	movs	r3, #0
	stringPower[1] = '0' + ((int) power % 10);
 80011fa:	3130      	adds	r1, #48	; 0x30
 80011fc:	7061      	strb	r1, [r4, #1]
	ssd1306_SetCursor(102, 22);
 80011fe:	2066      	movs	r0, #102	; 0x66
 8001200:	2116      	movs	r1, #22
	stringPower[3] = '\0';
 8001202:	70e3      	strb	r3, [r4, #3]
	ssd1306_SetCursor(102, 22);
 8001204:	f001 fecc 	bl	8002fa0 <ssd1306_SetCursor>
	ssd1306_WriteString(stringPower, Font_7x10, 1);
 8001208:	cd06      	ldmia	r5!, {r1, r2}
 800120a:	2301      	movs	r3, #1
 800120c:	0020      	movs	r0, r4
 800120e:	f001 feb3 	bl	8002f78 <ssd1306_WriteString>
}
 8001212:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8001214:	20000018 	.word	0x20000018
 8001218:	080031d9 	.word	0x080031d9

0800121c <PrintDeviceStatus>:

void PrintDeviceStatus(bool status){
	ssd1306_SetCursor(0, 22);
 800121c:	2116      	movs	r1, #22
void PrintDeviceStatus(bool status){
 800121e:	b510      	push	{r4, lr}
 8001220:	0004      	movs	r4, r0
	ssd1306_SetCursor(0, 22);
 8001222:	2000      	movs	r0, #0
 8001224:	f001 febc 	bl	8002fa0 <ssd1306_SetCursor>
	if(status==true)ssd1306_WriteString("WORKING", Font_7x10, 1);
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <PrintDeviceStatus+0x20>)
 800122a:	2301      	movs	r3, #1
 800122c:	ca06      	ldmia	r2, {r1, r2}
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <PrintDeviceStatus+0x24>)
 8001230:	2c00      	cmp	r4, #0
 8001232:	d100      	bne.n	8001236 <PrintDeviceStatus+0x1a>
	if(status==false)ssd1306_WriteString("RDY2WORK", Font_7x10, 1);
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <PrintDeviceStatus+0x28>)
 8001236:	f001 fe9f 	bl	8002f78 <ssd1306_WriteString>

}
 800123a:	bd10      	pop	{r4, pc}
 800123c:	20000018 	.word	0x20000018
 8001240:	080031de 	.word	0x080031de
 8001244:	080031e6 	.word	0x080031e6

08001248 <DrawMainScrean>:
void DrawMainScrean(uint16_t setTemp, uint16_t currnetTemp,bool status,uint8_t power){
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	000f      	movs	r7, r1
 800124c:	0006      	movs	r6, r0
 800124e:	0015      	movs	r5, r2
 8001250:	001c      	movs	r4, r3
	ssd1306_Fill(Black);
 8001252:	2000      	movs	r0, #0
 8001254:	f001 fe00 	bl	8002e58 <ssd1306_Fill>
	PrintCurrentTemperature(currnetTemp);
 8001258:	0038      	movs	r0, r7
 800125a:	f7ff ff7b 	bl	8001154 <PrintCurrentTemperature>
	PrintSetTemperature(setTemp);
 800125e:	0030      	movs	r0, r6
 8001260:	f7ff ff38 	bl	80010d4 <PrintSetTemperature>
	PrintDeviceStatus(status);
 8001264:	0028      	movs	r0, r5
 8001266:	f7ff ffd9 	bl	800121c <PrintDeviceStatus>
	PrintPower(power);
 800126a:	0020      	movs	r0, r4
 800126c:	f7ff ffa6 	bl	80011bc <PrintPower>
	ssd1306_UpdateScreen();
 8001270:	f001 fe00 	bl	8002e74 <ssd1306_UpdateScreen>
}
 8001274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001276 <Buzz>:

void Buzz(){
 8001276:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(Haptic_GPIO_Port, Haptic_Pin, GPIO_PIN_SET);
 8001278:	2490      	movs	r4, #144	; 0x90
 800127a:	05e4      	lsls	r4, r4, #23
 800127c:	2201      	movs	r2, #1
 800127e:	2120      	movs	r1, #32
 8001280:	0020      	movs	r0, r4
 8001282:	f001 f86d 	bl	8002360 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001286:	2014      	movs	r0, #20
 8001288:	f000 fcc2 	bl	8001c10 <HAL_Delay>
  HAL_GPIO_WritePin(Haptic_GPIO_Port, Haptic_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2120      	movs	r1, #32
 8001290:	0020      	movs	r0, r4
 8001292:	f001 f865 	bl	8002360 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001296:	2014      	movs	r0, #20
 8001298:	f000 fcba 	bl	8001c10 <HAL_Delay>
}
 800129c:	bd10      	pop	{r4, pc}
	...

080012a0 <MainScrean>:
void MainScrean(uint16_t *setTemp, uint16_t currnetTemp,uint8_t step, bool *screanState, bool status,uint8_t power){
 80012a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	ab08      	add	r3, sp, #32
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	0004      	movs	r4, r0
 80012aa:	000e      	movs	r6, r1
 80012ac:	9301      	str	r3, [sp, #4]
	if(HAL_GPIO_ReadPin(SW_BACK_GPIO_Port, SW_BACK_Pin)==GPIO_PIN_RESET){
 80012ae:	2120      	movs	r1, #32
void MainScrean(uint16_t *setTemp, uint16_t currnetTemp,uint8_t step, bool *screanState, bool status,uint8_t power){
 80012b0:	ab09      	add	r3, sp, #36	; 0x24
	if(HAL_GPIO_ReadPin(SW_BACK_GPIO_Port, SW_BACK_Pin)==GPIO_PIN_RESET){
 80012b2:	481e      	ldr	r0, [pc, #120]	; (800132c <MainScrean+0x8c>)
void MainScrean(uint16_t *setTemp, uint16_t currnetTemp,uint8_t step, bool *screanState, bool status,uint8_t power){
 80012b4:	0015      	movs	r5, r2
 80012b6:	781f      	ldrb	r7, [r3, #0]
	if(HAL_GPIO_ReadPin(SW_BACK_GPIO_Port, SW_BACK_Pin)==GPIO_PIN_RESET){
 80012b8:	f001 f84c 	bl	8002354 <HAL_GPIO_ReadPin>
 80012bc:	2800      	cmp	r0, #0
 80012be:	d10a      	bne.n	80012d6 <MainScrean+0x36>
		*setTemp = (*setTemp>400)?0:*setTemp;
 80012c0:	22c8      	movs	r2, #200	; 0xc8
		*setTemp -= step;
 80012c2:	8823      	ldrh	r3, [r4, #0]
		*setTemp = (*setTemp>400)?0:*setTemp;
 80012c4:	0052      	lsls	r2, r2, #1
		*setTemp -= step;
 80012c6:	1b5b      	subs	r3, r3, r5
 80012c8:	b29b      	uxth	r3, r3
		*setTemp = (*setTemp>400)?0:*setTemp;
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d900      	bls.n	80012d0 <MainScrean+0x30>
 80012ce:	0003      	movs	r3, r0
 80012d0:	8023      	strh	r3, [r4, #0]
		Buzz();
 80012d2:	f7ff ffd0 	bl	8001276 <Buzz>
	if(HAL_GPIO_ReadPin(SW_NEXT_GPIO_Port, SW_NEXT_Pin)==GPIO_PIN_RESET){
 80012d6:	2108      	movs	r1, #8
 80012d8:	4814      	ldr	r0, [pc, #80]	; (800132c <MainScrean+0x8c>)
 80012da:	f001 f83b 	bl	8002354 <HAL_GPIO_ReadPin>
 80012de:	2800      	cmp	r0, #0
 80012e0:	d10b      	bne.n	80012fa <MainScrean+0x5a>
		*setTemp += step;
 80012e2:	8822      	ldrh	r2, [r4, #0]
 80012e4:	1955      	adds	r5, r2, r5
		*setTemp = (*setTemp>400)?400:*setTemp;
 80012e6:	22c8      	movs	r2, #200	; 0xc8
 80012e8:	1c2b      	adds	r3, r5, #0
 80012ea:	b2ad      	uxth	r5, r5
 80012ec:	0052      	lsls	r2, r2, #1
 80012ee:	4295      	cmp	r5, r2
 80012f0:	d900      	bls.n	80012f4 <MainScrean+0x54>
 80012f2:	1c13      	adds	r3, r2, #0
 80012f4:	8023      	strh	r3, [r4, #0]
		Buzz();
 80012f6:	f7ff ffbe 	bl	8001276 <Buzz>
	if(HAL_GPIO_ReadPin(SW_SELECT_GPIO_Port, SW_SELECT_Pin)==GPIO_PIN_RESET){
 80012fa:	2110      	movs	r1, #16
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <MainScrean+0x8c>)
 80012fe:	f001 f829 	bl	8002354 <HAL_GPIO_ReadPin>
 8001302:	2800      	cmp	r0, #0
 8001304:	d10a      	bne.n	800131c <MainScrean+0x7c>
		*screanState=true;
 8001306:	2301      	movs	r3, #1
 8001308:	9a00      	ldr	r2, [sp, #0]
 800130a:	7013      	strb	r3, [r2, #0]
		Buzz();
 800130c:	f7ff ffb3 	bl	8001276 <Buzz>
		while(HAL_GPIO_ReadPin(SW_SELECT_GPIO_Port, SW_SELECT_Pin)==GPIO_PIN_RESET);
 8001310:	2110      	movs	r1, #16
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <MainScrean+0x8c>)
 8001314:	f001 f81e 	bl	8002354 <HAL_GPIO_ReadPin>
 8001318:	2800      	cmp	r0, #0
 800131a:	d0f9      	beq.n	8001310 <MainScrean+0x70>
	DrawMainScrean(*setTemp,currnetTemp,status,power);
 800131c:	003b      	movs	r3, r7
 800131e:	0031      	movs	r1, r6
 8001320:	8820      	ldrh	r0, [r4, #0]
 8001322:	9a01      	ldr	r2, [sp, #4]
 8001324:	f7ff ff90 	bl	8001248 <DrawMainScrean>
}
 8001328:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	48000400 	.word	0x48000400

08001330 <MenuScrean>:

void MenuScrean(bool *screanState, uint8_t *step,uint8_t *menuState){
 8001330:	b570      	push	{r4, r5, r6, lr}
 8001332:	0005      	movs	r5, r0
	ssd1306_Fill(Black);
 8001334:	2000      	movs	r0, #0
void MenuScrean(bool *screanState, uint8_t *step,uint8_t *menuState){
 8001336:	0014      	movs	r4, r2
	ssd1306_Fill(Black);
 8001338:	f001 fd8e 	bl	8002e58 <ssd1306_Fill>
	if(HAL_GPIO_ReadPin(SW_NEXT_GPIO_Port, SW_NEXT_Pin)==GPIO_PIN_RESET){
 800133c:	2108      	movs	r1, #8
 800133e:	482b      	ldr	r0, [pc, #172]	; (80013ec <MenuScrean+0xbc>)
 8001340:	f001 f808 	bl	8002354 <HAL_GPIO_ReadPin>
 8001344:	2800      	cmp	r0, #0
 8001346:	d10e      	bne.n	8001366 <MenuScrean+0x36>
		*menuState=*menuState+1;
 8001348:	7823      	ldrb	r3, [r4, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	b2db      	uxtb	r3, r3
		//*menuState = (*menuState>2)?0:*menuState;
		if(*menuState>2)*menuState=0;
 800134e:	2b02      	cmp	r3, #2
 8001350:	d900      	bls.n	8001354 <MenuScrean+0x24>
 8001352:	0003      	movs	r3, r0
 8001354:	7023      	strb	r3, [r4, #0]
		Buzz();
 8001356:	f7ff ff8e 	bl	8001276 <Buzz>
		while(HAL_GPIO_ReadPin(SW_NEXT_GPIO_Port, SW_NEXT_Pin)==GPIO_PIN_RESET);
 800135a:	2108      	movs	r1, #8
 800135c:	4823      	ldr	r0, [pc, #140]	; (80013ec <MenuScrean+0xbc>)
 800135e:	f000 fff9 	bl	8002354 <HAL_GPIO_ReadPin>
 8001362:	2800      	cmp	r0, #0
 8001364:	d0f9      	beq.n	800135a <MenuScrean+0x2a>
	}
	if(HAL_GPIO_ReadPin(SW_BACK_GPIO_Port, SW_BACK_Pin)==GPIO_PIN_RESET){
 8001366:	2120      	movs	r1, #32
 8001368:	4820      	ldr	r0, [pc, #128]	; (80013ec <MenuScrean+0xbc>)
 800136a:	f000 fff3 	bl	8002354 <HAL_GPIO_ReadPin>
 800136e:	2800      	cmp	r0, #0
 8001370:	d10f      	bne.n	8001392 <MenuScrean+0x62>

		*menuState=*menuState-1;
 8001372:	7823      	ldrb	r3, [r4, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	1c1a      	adds	r2, r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d900      	bls.n	8001380 <MenuScrean+0x50>
 800137e:	2202      	movs	r2, #2
 8001380:	7022      	strb	r2, [r4, #0]
		//*menuState = (*menuState>2)?2:*menuState;
		if(*menuState>2)*menuState=2;
		Buzz();
 8001382:	f7ff ff78 	bl	8001276 <Buzz>
		while(HAL_GPIO_ReadPin(SW_BACK_GPIO_Port, SW_BACK_Pin)==GPIO_PIN_RESET);
 8001386:	2120      	movs	r1, #32
 8001388:	4818      	ldr	r0, [pc, #96]	; (80013ec <MenuScrean+0xbc>)
 800138a:	f000 ffe3 	bl	8002354 <HAL_GPIO_ReadPin>
 800138e:	2800      	cmp	r0, #0
 8001390:	d0f9      	beq.n	8001386 <MenuScrean+0x56>
	}

	switch (*menuState){
 8001392:	7824      	ldrb	r4, [r4, #0]
 8001394:	2c00      	cmp	r4, #0
 8001396:	d004      	beq.n	80013a2 <MenuScrean+0x72>
 8001398:	2c01      	cmp	r4, #1
 800139a:	d01c      	beq.n	80013d6 <MenuScrean+0xa6>

				//Select_Step(*step);

		break;
	}
	ssd1306_UpdateScreen();
 800139c:	f001 fd6a 	bl	8002e74 <ssd1306_UpdateScreen>

}
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
		ssd1306_SetCursor(11,0);
 80013a2:	0021      	movs	r1, r4
 80013a4:	200b      	movs	r0, #11
 80013a6:	f001 fdfb 	bl	8002fa0 <ssd1306_SetCursor>
		ssd1306_WriteString("< Home screen >", Font_7x10, 1);
 80013aa:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <MenuScrean+0xc0>)
 80013ac:	2301      	movs	r3, #1
 80013ae:	ca06      	ldmia	r2, {r1, r2}
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <MenuScrean+0xc4>)
 80013b2:	f001 fde1 	bl	8002f78 <ssd1306_WriteString>
		if(HAL_GPIO_ReadPin(SW_SELECT_GPIO_Port, SW_SELECT_Pin)==GPIO_PIN_RESET){
 80013b6:	2110      	movs	r1, #16
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MenuScrean+0xbc>)
 80013ba:	f000 ffcb 	bl	8002354 <HAL_GPIO_ReadPin>
 80013be:	1e04      	subs	r4, r0, #0
 80013c0:	d1ec      	bne.n	800139c <MenuScrean+0x6c>
			Buzz();
 80013c2:	f7ff ff58 	bl	8001276 <Buzz>
			*screanState=false;
 80013c6:	702c      	strb	r4, [r5, #0]
			while(HAL_GPIO_ReadPin(SW_SELECT_GPIO_Port, SW_SELECT_Pin)==GPIO_PIN_RESET);
 80013c8:	2110      	movs	r1, #16
 80013ca:	4808      	ldr	r0, [pc, #32]	; (80013ec <MenuScrean+0xbc>)
 80013cc:	f000 ffc2 	bl	8002354 <HAL_GPIO_ReadPin>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	d0f9      	beq.n	80013c8 <MenuScrean+0x98>
 80013d4:	e7e2      	b.n	800139c <MenuScrean+0x6c>
			ssd1306_SetCursor(11,0);
 80013d6:	2100      	movs	r1, #0
 80013d8:	200b      	movs	r0, #11
 80013da:	f001 fde1 	bl	8002fa0 <ssd1306_SetCursor>
			ssd1306_WriteString("< Select Step >", Font_7x10, 1);
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <MenuScrean+0xc0>)
 80013e0:	0023      	movs	r3, r4
 80013e2:	ca06      	ldmia	r2, {r1, r2}
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MenuScrean+0xc8>)
 80013e6:	f001 fdc7 	bl	8002f78 <ssd1306_WriteString>
		break;
 80013ea:	e7d7      	b.n	800139c <MenuScrean+0x6c>
 80013ec:	48000400 	.word	0x48000400
 80013f0:	20000018 	.word	0x20000018
 80013f4:	080031ef 	.word	0x080031ef
 80013f8:	080031ff 	.word	0x080031ff

080013fc <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80013fc:	2301      	movs	r3, #1
 80013fe:	492a      	ldr	r1, [pc, #168]	; (80014a8 <SystemClock_Config+0xac>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b510      	push	{r4, lr}
 8001402:	680a      	ldr	r2, [r1, #0]
 8001404:	439a      	bics	r2, r3
 8001406:	431a      	orrs	r2, r3
 8001408:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800140a:	680a      	ldr	r2, [r1, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 800140c:	421a      	tst	r2, r3
 800140e:	d0fc      	beq.n	800140a <SystemClock_Config+0xe>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001410:	4c26      	ldr	r4, [pc, #152]	; (80014ac <SystemClock_Config+0xb0>)
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	4313      	orrs	r3, r2
 8001416:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001418:	2302      	movs	r3, #2
 800141a:	6822      	ldr	r2, [r4, #0]
  {
  }
  LL_RCC_HSI_Enable();

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800141c:	421a      	tst	r2, r3
 800141e:	d0fc      	beq.n	800141a <SystemClock_Config+0x1e>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001420:	22f8      	movs	r2, #248	; 0xf8
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	4393      	bics	r3, r2
 8001426:	001a      	movs	r2, r3
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	4313      	orrs	r3, r2
 800142c:	6023      	str	r3, [r4, #0]
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 800142e:	2301      	movs	r3, #1
 8001430:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001432:	4313      	orrs	r3, r2
 8001434:	6363      	str	r3, [r4, #52]	; 0x34
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 8001436:	2302      	movs	r3, #2
 8001438:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }
  LL_RCC_HSI_SetCalibTrimming(16);
  LL_RCC_HSI14_Enable();

   /* Wait till HSI14 is ready */
  while(LL_RCC_HSI14_IsReady() != 1)
 800143a:	421a      	tst	r2, r3
 800143c:	d0fc      	beq.n	8001438 <SystemClock_Config+0x3c>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 800143e:	22f8      	movs	r2, #248	; 0xf8
 8001440:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001442:	4393      	bics	r3, r2
 8001444:	001a      	movs	r2, r3
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	4313      	orrs	r3, r2
 800144a:	6363      	str	r3, [r4, #52]	; 0x34
  SET_BIT(RCC->CR2, RCC_CR2_HSI48ON);
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	4313      	orrs	r3, r2
 8001454:	6363      	str	r3, [r4, #52]	; 0x34
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI48RDY) == (RCC_CR2_HSI48RDY));
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	029b      	lsls	r3, r3, #10
 800145a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }
  LL_RCC_HSI14_SetCalibTrimming(16);
  LL_RCC_HSI48_Enable();

   /* Wait till HSI48 is ready */
  while(LL_RCC_HSI48_IsReady() != 1)
 800145c:	421a      	tst	r2, r3
 800145e:	d0fc      	beq.n	800145a <SystemClock_Config+0x5e>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001460:	22f0      	movs	r2, #240	; 0xf0
 8001462:	6863      	ldr	r3, [r4, #4]
 8001464:	4393      	bics	r3, r2
 8001466:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001468:	6863      	ldr	r3, [r4, #4]
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <SystemClock_Config+0xb4>)
 800146c:	4013      	ands	r3, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800146e:	2203      	movs	r2, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001470:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001472:	6863      	ldr	r3, [r4, #4]
 8001474:	4313      	orrs	r3, r2
 8001476:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001478:	3209      	adds	r2, #9
 800147a:	6863      	ldr	r3, [r4, #4]
 800147c:	4013      	ands	r3, r2
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI48);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI48)
 800147e:	2b0c      	cmp	r3, #12
 8001480:	d1fb      	bne.n	800147a <SystemClock_Config+0x7e>
  {

  }
  LL_SetSystemCoreClock(48000000);
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <SystemClock_Config+0xb8>)
 8001484:	f001 fcbc 	bl	8002e00 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001488:	2003      	movs	r0, #3
 800148a:	f000 fb7b 	bl	8001b84 <HAL_InitTick>
 800148e:	2800      	cmp	r0, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x9a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001492:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	e7fe      	b.n	8001494 <SystemClock_Config+0x98>
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8001496:	2204      	movs	r2, #4
 8001498:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800149a:	4393      	bics	r3, r2
 800149c:	6363      	str	r3, [r4, #52]	; 0x34
  *         @arg @ref LL_RCC_I2C1_CLKSOURCE_SYSCLK
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C1SW, I2CxSource);
 800149e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014a0:	320c      	adds	r2, #12
 80014a2:	4393      	bics	r3, r2
 80014a4:	6323      	str	r3, [r4, #48]	; 0x30
}
 80014a6:	bd10      	pop	{r4, pc}
 80014a8:	40022000 	.word	0x40022000
 80014ac:	40021000 	.word	0x40021000
 80014b0:	fffff8ff 	.word	0xfffff8ff
 80014b4:	02dc6c00 	.word	0x02dc6c00

080014b8 <main>:
{
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint16_t valADC = 0;
 80014ba:	270e      	movs	r7, #14
 80014bc:	2400      	movs	r4, #0
{
 80014be:	b09d      	sub	sp, #116	; 0x74
	volatile uint16_t tempADC = 0;
 80014c0:	ab04      	add	r3, sp, #16
	volatile uint16_t valADC = 0;
 80014c2:	446f      	add	r7, sp
 80014c4:	803c      	strh	r4, [r7, #0]
	volatile uint16_t tempADC = 0;
 80014c6:	801c      	strh	r4, [r3, #0]
	volatile uint16_t powerADC = 0;
 80014c8:	466b      	mov	r3, sp
PIDController pid = { PID_KP, PID_KI, PID_KD,
 80014ca:	2228      	movs	r2, #40	; 0x28
 80014cc:	0021      	movs	r1, r4
 80014ce:	a812      	add	r0, sp, #72	; 0x48
	volatile uint16_t powerADC = 0;
 80014d0:	825c      	strh	r4, [r3, #18]
PIDController pid = { PID_KP, PID_KI, PID_KD,
 80014d2:	f001 fe0b 	bl	80030ec <memset>
 80014d6:	4bac      	ldr	r3, [pc, #688]	; (8001788 <main+0x2d0>)
  HAL_GPIO_WritePin(GPIOA, Haptic_Pin|U_LED_Pin, GPIO_PIN_RESET);
 80014d8:	4dac      	ldr	r5, [pc, #688]	; (800178c <main+0x2d4>)
PIDController pid = { PID_KP, PID_KI, PID_KD,
 80014da:	930e      	str	r3, [sp, #56]	; 0x38
 80014dc:	4bac      	ldr	r3, [pc, #688]	; (8001790 <main+0x2d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2601      	movs	r6, #1
PIDController pid = { PID_KP, PID_KI, PID_KD,
 80014e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80014e2:	4bac      	ldr	r3, [pc, #688]	; (8001794 <main+0x2dc>)
 80014e4:	9310      	str	r3, [sp, #64]	; 0x40
 80014e6:	4bac      	ldr	r3, [pc, #688]	; (8001798 <main+0x2e0>)
 80014e8:	9311      	str	r3, [sp, #68]	; 0x44
 80014ea:	4bac      	ldr	r3, [pc, #688]	; (800179c <main+0x2e4>)
 80014ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80014ee:	4bac      	ldr	r3, [pc, #688]	; (80017a0 <main+0x2e8>)
 80014f0:	9314      	str	r3, [sp, #80]	; 0x50
 80014f2:	4bac      	ldr	r3, [pc, #688]	; (80017a4 <main+0x2ec>)
 80014f4:	9315      	str	r3, [sp, #84]	; 0x54
 80014f6:	4bac      	ldr	r3, [pc, #688]	; (80017a8 <main+0x2f0>)
 80014f8:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_Init();
 80014fa:	f000 fb67 	bl	8001bcc <HAL_Init>
  SystemClock_Config();
 80014fe:	f7ff ff7d 	bl	80013fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	2214      	movs	r2, #20
 8001504:	0021      	movs	r1, r4
 8001506:	a807      	add	r0, sp, #28
 8001508:	f001 fdf0 	bl	80030ec <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	2080      	movs	r0, #128	; 0x80
 800150e:	4ba7      	ldr	r3, [pc, #668]	; (80017ac <main+0x2f4>)
 8001510:	02c0      	lsls	r0, r0, #11
 8001512:	6959      	ldr	r1, [r3, #20]
 8001514:	4301      	orrs	r1, r0
 8001516:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, Haptic_Pin|U_LED_Pin, GPIO_PIN_RESET);
 8001520:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	9205      	str	r2, [sp, #20]
 8001524:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, Haptic_Pin|U_LED_Pin, GPIO_PIN_RESET);
 8001528:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	430a      	orrs	r2, r1
 800152c:	615a      	str	r2, [r3, #20]
 800152e:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, Haptic_Pin|U_LED_Pin, GPIO_PIN_RESET);
 8001530:	0022      	movs	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	400b      	ands	r3, r1
 8001534:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, Haptic_Pin|U_LED_Pin, GPIO_PIN_RESET);
 8001536:	0029      	movs	r1, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, Haptic_Pin|U_LED_Pin, GPIO_PIN_RESET);
 800153a:	f000 ff11 	bl	8002360 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PS_LED_GPIO_Port, PS_LED_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	2140      	movs	r1, #64	; 0x40
 8001542:	489b      	ldr	r0, [pc, #620]	; (80017b0 <main+0x2f8>)
 8001544:	f000 ff0c 	bl	8002360 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SW_TILT_GPIO_Port, &GPIO_InitStruct);
 8001548:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = SW_TILT_Pin;
 800154a:	2308      	movs	r3, #8
  HAL_GPIO_Init(SW_TILT_GPIO_Port, &GPIO_InitStruct);
 800154c:	a907      	add	r1, sp, #28
 800154e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = SW_TILT_Pin;
 8001550:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SW_TILT_GPIO_Port, &GPIO_InitStruct);
 8001556:	f000 fe4d 	bl	80021f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	2090      	movs	r0, #144	; 0x90
 800155c:	a907      	add	r1, sp, #28
 800155e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = Haptic_Pin|U_LED_Pin;
 8001560:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f000 fe44 	bl	80021f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_NEXT_Pin|SW_SELECT_Pin|SW_BACK_Pin;
 800156c:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	4890      	ldr	r0, [pc, #576]	; (80017b0 <main+0x2f8>)
 8001570:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = SW_NEXT_Pin|SW_SELECT_Pin|SW_BACK_Pin;
 8001572:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001576:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f000 fe3c 	bl	80021f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PS_LED_Pin;
 800157c:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(PS_LED_GPIO_Port, &GPIO_InitStruct);
 800157e:	a907      	add	r1, sp, #28
 8001580:	488b      	ldr	r0, [pc, #556]	; (80017b0 <main+0x2f8>)
  GPIO_InitStruct.Pin = PS_LED_Pin;
 8001582:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(PS_LED_GPIO_Port, &GPIO_InitStruct);
 800158a:	f000 fe33 	bl	80021f4 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800158e:	4d89      	ldr	r5, [pc, #548]	; (80017b4 <main+0x2fc>)
 8001590:	4b89      	ldr	r3, [pc, #548]	; (80017b8 <main+0x300>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001592:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8001594:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001596:	4b89      	ldr	r3, [pc, #548]	; (80017bc <main+0x304>)
  hi2c1.Init.OwnAddress1 = 0;
 8001598:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x2000090E;
 800159a:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159c:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159e:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015a0:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015a2:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a4:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a8:	f001 f810 	bl	80025cc <HAL_I2C_Init>
 80015ac:	0001      	movs	r1, r0
 80015ae:	42a0      	cmp	r0, r4
 80015b0:	d001      	beq.n	80015b6 <main+0xfe>
 80015b2:	b672      	cpsid	i
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <main+0xfc>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015b6:	0028      	movs	r0, r5
 80015b8:	f001 f93c 	bl	8002834 <HAL_I2CEx_ConfigAnalogFilter>
 80015bc:	1e01      	subs	r1, r0, #0
 80015be:	d001      	beq.n	80015c4 <main+0x10c>
 80015c0:	b672      	cpsid	i
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <main+0x10a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015c4:	0028      	movs	r0, r5
 80015c6:	f001 f95b 	bl	8002880 <HAL_I2CEx_ConfigDigitalFilter>
 80015ca:	1e05      	subs	r5, r0, #0
 80015cc:	d001      	beq.n	80015d2 <main+0x11a>
 80015ce:	b672      	cpsid	i
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <main+0x118>
  ADC_ChannelConfTypeDef sConfig = {0};
 80015d2:	0001      	movs	r1, r0
 80015d4:	220c      	movs	r2, #12
 80015d6:	a807      	add	r0, sp, #28
 80015d8:	f001 fd88 	bl	80030ec <memset>
  hadc.Instance = ADC1;
 80015dc:	4c78      	ldr	r4, [pc, #480]	; (80017c0 <main+0x308>)
 80015de:	4b79      	ldr	r3, [pc, #484]	; (80017c4 <main+0x30c>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015e0:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80015e2:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e4:	2304      	movs	r3, #4
 80015e6:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e8:	23c2      	movs	r3, #194	; 0xc2
 80015ea:	33ff      	adds	r3, #255	; 0xff
 80015ec:	61e3      	str	r3, [r4, #28]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80015ee:	61a5      	str	r5, [r4, #24]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015f0:	1d63      	adds	r3, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015f2:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015f4:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f6:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80015f8:	6126      	str	r6, [r4, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fa:	6225      	str	r5, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015fc:	77dd      	strb	r5, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015fe:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001600:	f000 fbd4 	bl	8001dac <HAL_ADC_Init>
 8001604:	2800      	cmp	r0, #0
 8001606:	d001      	beq.n	800160c <main+0x154>
 8001608:	b672      	cpsid	i
  while (1)
 800160a:	e7fe      	b.n	800160a <main+0x152>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	015b      	lsls	r3, r3, #5
 8001610:	9308      	str	r3, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001612:	2304      	movs	r3, #4
  sConfig.Channel = ADC_CHANNEL_0;
 8001614:	9007      	str	r0, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001616:	a907      	add	r1, sp, #28
 8001618:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800161a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800161c:	f000 fd20 	bl	8002060 <HAL_ADC_ConfigChannel>
 8001620:	2800      	cmp	r0, #0
 8001622:	d001      	beq.n	8001628 <main+0x170>
 8001624:	b672      	cpsid	i
  while (1)
 8001626:	e7fe      	b.n	8001626 <main+0x16e>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001628:	0020      	movs	r0, r4
 800162a:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_1;
 800162c:	9607      	str	r6, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800162e:	f000 fd17 	bl	8002060 <HAL_ADC_ConfigChannel>
 8001632:	2800      	cmp	r0, #0
 8001634:	d001      	beq.n	800163a <main+0x182>
 8001636:	b672      	cpsid	i
  while (1)
 8001638:	e7fe      	b.n	8001638 <main+0x180>
  sConfig.Channel = ADC_CHANNEL_2;
 800163a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800163c:	0020      	movs	r0, r4
 800163e:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_2;
 8001640:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001642:	f000 fd0d 	bl	8002060 <HAL_ADC_ConfigChannel>
 8001646:	1e06      	subs	r6, r0, #0
 8001648:	d001      	beq.n	800164e <main+0x196>
 800164a:	b672      	cpsid	i
  while (1)
 800164c:	e7fe      	b.n	800164c <main+0x194>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	0001      	movs	r1, r0
 8001650:	221c      	movs	r2, #28
 8001652:	a807      	add	r0, sp, #28
 8001654:	f001 fd4a 	bl	80030ec <memset>
  htim14.Instance = TIM14;
 8001658:	4d5b      	ldr	r5, [pc, #364]	; (80017c8 <main+0x310>)
 800165a:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <main+0x314>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800165c:	0028      	movs	r0, r5
  htim14.Instance = TIM14;
 800165e:	602b      	str	r3, [r5, #0]
  htim14.Init.Prescaler = 2;
 8001660:	2302      	movs	r3, #2
 8001662:	606b      	str	r3, [r5, #4]
  htim14.Init.Period = 65500;
 8001664:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <main+0x318>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	60ae      	str	r6, [r5, #8]
  htim14.Init.Period = 65500;
 8001668:	60eb      	str	r3, [r5, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800166a:	2380      	movs	r3, #128	; 0x80
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	612e      	str	r6, [r5, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800166e:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001670:	f001 fa24 	bl	8002abc <HAL_TIM_Base_Init>
 8001674:	2800      	cmp	r0, #0
 8001676:	d001      	beq.n	800167c <main+0x1c4>
 8001678:	b672      	cpsid	i
  while (1)
 800167a:	e7fe      	b.n	800167a <main+0x1c2>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800167c:	0028      	movs	r0, r5
 800167e:	f001 fa45 	bl	8002b0c <HAL_TIM_PWM_Init>
 8001682:	1e02      	subs	r2, r0, #0
 8001684:	d001      	beq.n	800168a <main+0x1d2>
 8001686:	b672      	cpsid	i
  while (1)
 8001688:	e7fe      	b.n	8001688 <main+0x1d0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800168c:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168e:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001690:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001692:	a907      	add	r1, sp, #28
 8001694:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001696:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001698:	f001 fa9c 	bl	8002bd4 <HAL_TIM_PWM_ConfigChannel>
 800169c:	2800      	cmp	r0, #0
 800169e:	d001      	beq.n	80016a4 <main+0x1ec>
 80016a0:	b672      	cpsid	i
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <main+0x1ea>
  HAL_TIM_MspPostInit(&htim14);
 80016a4:	0028      	movs	r0, r5
 80016a6:	f000 f9c3 	bl	8001a30 <HAL_TIM_MspPostInit>
  PIDController_Init(&pid);
 80016aa:	a80e      	add	r0, sp, #56	; 0x38
 80016ac:	f000 f8aa 	bl	8001804 <PIDController_Init>
  ssd1306_Init();
 80016b0:	f001 fc94 	bl	8002fdc <ssd1306_Init>
	  HAL_TIM_PWM_Stop(&PWM_timer, PWM_Chanel);
 80016b4:	4d44      	ldr	r5, [pc, #272]	; (80017c8 <main+0x310>)
 80016b6:	2100      	movs	r1, #0
 80016b8:	0028      	movs	r0, r5
 80016ba:	f001 fb9d 	bl	8002df8 <HAL_TIM_PWM_Stop>
	  HAL_Delay(40);
 80016be:	2028      	movs	r0, #40	; 0x28
 80016c0:	f000 faa6 	bl	8001c10 <HAL_Delay>
	  valADC = adc_read(ADC_CHANNEL_0);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 f9e5 	bl	8001a94 <adc_read>
 80016ca:	b280      	uxth	r0, r0
 80016cc:	8038      	strh	r0, [r7, #0]
	  HAL_Delay(10);
 80016ce:	200a      	movs	r0, #10
 80016d0:	f000 fa9e 	bl	8001c10 <HAL_Delay>
	  HAL_TIM_PWM_Start(&PWM_timer, PWM_Chanel);
 80016d4:	2100      	movs	r1, #0
 80016d6:	0028      	movs	r0, r5
 80016d8:	f001 fb44 	bl	8002d64 <HAL_TIM_PWM_Start>
	  HAL_ADC_Stop(&hadc);
 80016dc:	0020      	movs	r0, r4
 80016de:	f000 fc39 	bl	8001f54 <HAL_ADC_Stop>
	  currentTemperature = (uint16_t)(((3.3f*valADC/4095)/0.0079f)+ambientTemperature);
 80016e2:	8838      	ldrh	r0, [r7, #0]
 80016e4:	b280      	uxth	r0, r0
 80016e6:	f7ff fc47 	bl	8000f78 <__aeabi_i2f>
 80016ea:	493a      	ldr	r1, [pc, #232]	; (80017d4 <main+0x31c>)
 80016ec:	f7ff f950 	bl	8000990 <__aeabi_fmul>
 80016f0:	4939      	ldr	r1, [pc, #228]	; (80017d8 <main+0x320>)
 80016f2:	f7fe ff85 	bl	8000600 <__aeabi_fdiv>
 80016f6:	4939      	ldr	r1, [pc, #228]	; (80017dc <main+0x324>)
 80016f8:	f7fe ff82 	bl	8000600 <__aeabi_fdiv>
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <main+0x328>)
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	f7fe fde0 	bl	80002c4 <__aeabi_fadd>
 8001704:	f7fe fdc6 	bl	8000294 <__aeabi_f2uiz>
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <main+0x32c>)
 800170a:	b285      	uxth	r5, r0
 800170c:	801d      	strh	r5, [r3, #0]
	  power = (uint16_t)(((powerADC/11)/0.1f)*20);
 800170e:	466b      	mov	r3, sp
 8001710:	8a58      	ldrh	r0, [r3, #18]
 8001712:	210b      	movs	r1, #11
 8001714:	b280      	uxth	r0, r0
 8001716:	f7fe fcf7 	bl	8000108 <__udivsi3>
 800171a:	b280      	uxth	r0, r0
 800171c:	f7ff fc2c 	bl	8000f78 <__aeabi_i2f>
 8001720:	4931      	ldr	r1, [pc, #196]	; (80017e8 <main+0x330>)
 8001722:	f7fe ff6d 	bl	8000600 <__aeabi_fdiv>
 8001726:	4918      	ldr	r1, [pc, #96]	; (8001788 <main+0x2d0>)
 8001728:	f7ff f932 	bl	8000990 <__aeabi_fmul>
 800172c:	f7fe fdb2 	bl	8000294 <__aeabi_f2uiz>
 8001730:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <main+0x334>)
 8001732:	7018      	strb	r0, [r3, #0]
	  PIDController_Update(&pid, setTemperature, currentTemperature);
 8001734:	0028      	movs	r0, r5
 8001736:	f7ff fc6d 	bl	8001014 <__aeabi_ui2f>
 800173a:	4e2d      	ldr	r6, [pc, #180]	; (80017f0 <main+0x338>)
 800173c:	1c05      	adds	r5, r0, #0
 800173e:	8830      	ldrh	r0, [r6, #0]
 8001740:	f7ff fc68 	bl	8001014 <__aeabi_ui2f>
 8001744:	1c2a      	adds	r2, r5, #0
 8001746:	1c01      	adds	r1, r0, #0
 8001748:	a80e      	add	r0, sp, #56	; 0x38
 800174a:	f000 f862 	bl	8001812 <PIDController_Update>
	  if(screanState==false) MainScrean(&setTemperature, currentTemperature,step,&screanState,status,power);
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <main+0x33c>)
 8001750:	4929      	ldr	r1, [pc, #164]	; (80017f8 <main+0x340>)
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	2a00      	cmp	r2, #0
 8001756:	d112      	bne.n	800177e <main+0x2c6>
 8001758:	4824      	ldr	r0, [pc, #144]	; (80017ec <main+0x334>)
 800175a:	780a      	ldrb	r2, [r1, #0]
 800175c:	7800      	ldrb	r0, [r0, #0]
 800175e:	4921      	ldr	r1, [pc, #132]	; (80017e4 <main+0x32c>)
 8001760:	8809      	ldrh	r1, [r1, #0]
 8001762:	9001      	str	r0, [sp, #4]
 8001764:	4825      	ldr	r0, [pc, #148]	; (80017fc <main+0x344>)
 8001766:	7800      	ldrb	r0, [r0, #0]
 8001768:	9000      	str	r0, [sp, #0]
 800176a:	0030      	movs	r0, r6
 800176c:	f7ff fd98 	bl	80012a0 <MainScrean>
	  PWM_generation(pid.out);
 8001770:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001772:	f7fe fd8f 	bl	8000294 <__aeabi_f2uiz>
 8001776:	b2c0      	uxtb	r0, r0
 8001778:	f000 f9ac 	bl	8001ad4 <PWM_generation>
	  HAL_TIM_PWM_Stop(&PWM_timer, PWM_Chanel);
 800177c:	e79a      	b.n	80016b4 <main+0x1fc>
		  MenuScrean(&screanState,&step,&menuState);
 800177e:	0018      	movs	r0, r3
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <main+0x348>)
 8001782:	f7ff fdd5 	bl	8001330 <MenuScrean>
 8001786:	e7f3      	b.n	8001770 <main+0x2b8>
 8001788:	41a00000 	.word	0x41a00000
 800178c:	00008020 	.word	0x00008020
 8001790:	40a00000 	.word	0x40a00000
 8001794:	40200000 	.word	0x40200000
 8001798:	3e4ccccd 	.word	0x3e4ccccd
 800179c:	42c80000 	.word	0x42c80000
 80017a0:	c2480000 	.word	0xc2480000
 80017a4:	42480000 	.word	0x42480000
 80017a8:	3c23d70a 	.word	0x3c23d70a
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000400 	.word	0x48000400
 80017b4:	20000084 	.word	0x20000084
 80017b8:	40005400 	.word	0x40005400
 80017bc:	2000090e 	.word	0x2000090e
 80017c0:	20000044 	.word	0x20000044
 80017c4:	40012400 	.word	0x40012400
 80017c8:	200000d8 	.word	0x200000d8
 80017cc:	40002000 	.word	0x40002000
 80017d0:	0000ffdc 	.word	0x0000ffdc
 80017d4:	40533333 	.word	0x40533333
 80017d8:	457ff000 	.word	0x457ff000
 80017dc:	3c016f00 	.word	0x3c016f00
 80017e0:	2000003c 	.word	0x2000003c
 80017e4:	20000040 	.word	0x20000040
 80017e8:	3dcccccd 	.word	0x3dcccccd
 80017ec:	20000121 	.word	0x20000121
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000122 	.word	0x20000122
 80017f8:	20000003 	.word	0x20000003
 80017fc:	20000002 	.word	0x20000002
 8001800:	20000120 	.word	0x20000120

08001804 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8001804:	2300      	movs	r3, #0
 8001806:	6243      	str	r3, [r0, #36]	; 0x24
	pid->prevError  = 0.0f;
 8001808:	6283      	str	r3, [r0, #40]	; 0x28

	pid->differentiator  = 0.0f;
 800180a:	62c3      	str	r3, [r0, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 800180c:	6303      	str	r3, [r0, #48]	; 0x30

	pid->out = 0.0f;
 800180e:	6343      	str	r3, [r0, #52]	; 0x34

}
 8001810:	4770      	bx	lr

08001812 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8001812:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001814:	0004      	movs	r4, r0
 8001816:	b085      	sub	sp, #20
 8001818:	1c08      	adds	r0, r1, #0

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 800181a:	1c11      	adds	r1, r2, #0
float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 800181c:	9202      	str	r2, [sp, #8]
    float error = setpoint - measurement;
 800181e:	f7ff f9dd 	bl	8000bdc <__aeabi_fsub>


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8001822:	6821      	ldr	r1, [r4, #0]
    float error = setpoint - measurement;
 8001824:	9001      	str	r0, [sp, #4]
    float proportional = pid->Kp * error;
 8001826:	f7ff f8b3 	bl	8000990 <__aeabi_fmul>


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800182a:	21fc      	movs	r1, #252	; 0xfc
 800182c:	6a26      	ldr	r6, [r4, #32]
    float proportional = pid->Kp * error;
 800182e:	9003      	str	r0, [sp, #12]
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8001830:	0589      	lsls	r1, r1, #22
 8001832:	6860      	ldr	r0, [r4, #4]
 8001834:	f7ff f8ac 	bl	8000990 <__aeabi_fmul>
 8001838:	1c31      	adds	r1, r6, #0
 800183a:	f7ff f8a9 	bl	8000990 <__aeabi_fmul>
 800183e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001840:	1c05      	adds	r5, r0, #0
 8001842:	9801      	ldr	r0, [sp, #4]
 8001844:	f7fe fd3e 	bl	80002c4 <__aeabi_fadd>
 8001848:	1c01      	adds	r1, r0, #0
 800184a:	1c28      	adds	r0, r5, #0
 800184c:	f7ff f8a0 	bl	8000990 <__aeabi_fmul>
 8001850:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001852:	f7fe fd37 	bl	80002c4 <__aeabi_fadd>

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8001856:	69e7      	ldr	r7, [r4, #28]
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8001858:	6260      	str	r0, [r4, #36]	; 0x24
    if (pid->integrator > pid->limMaxInt) {
 800185a:	1c39      	adds	r1, r7, #0
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800185c:	1c05      	adds	r5, r0, #0
    if (pid->integrator > pid->limMaxInt) {
 800185e:	f7fe fd05 	bl	800026c <__aeabi_fcmpgt>
 8001862:	2800      	cmp	r0, #0
 8001864:	d001      	beq.n	800186a <PIDController_Update+0x58>

        pid->integrator = pid->limMaxInt;

    } else if (pid->integrator < pid->limMinInt) {

        pid->integrator = pid->limMinInt;
 8001866:	6267      	str	r7, [r4, #36]	; 0x24
 8001868:	e006      	b.n	8001878 <PIDController_Update+0x66>
    } else if (pid->integrator < pid->limMinInt) {
 800186a:	69a7      	ldr	r7, [r4, #24]
 800186c:	1c28      	adds	r0, r5, #0
 800186e:	1c39      	adds	r1, r7, #0
 8001870:	f7fe fce8 	bl	8000244 <__aeabi_fcmplt>
 8001874:	2800      	cmp	r0, #0
 8001876:	d1f6      	bne.n	8001866 <PIDController_Update+0x54>
	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8001878:	68e1      	ldr	r1, [r4, #12]
 800187a:	1c08      	adds	r0, r1, #0
 800187c:	f7fe fd22 	bl	80002c4 <__aeabi_fadd>
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001880:	68a1      	ldr	r1, [r4, #8]
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8001882:	1c05      	adds	r5, r0, #0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001884:	1c08      	adds	r0, r1, #0
 8001886:	f7fe fd1d 	bl	80002c4 <__aeabi_fadd>
 800188a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800188c:	1c07      	adds	r7, r0, #0
 800188e:	9802      	ldr	r0, [sp, #8]
 8001890:	f7ff f9a4 	bl	8000bdc <__aeabi_fsub>
 8001894:	1c01      	adds	r1, r0, #0
 8001896:	1c38      	adds	r0, r7, #0
 8001898:	f7ff f87a 	bl	8000990 <__aeabi_fmul>
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 800189c:	1c31      	adds	r1, r6, #0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800189e:	1c07      	adds	r7, r0, #0
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 80018a0:	1c28      	adds	r0, r5, #0
 80018a2:	f7ff f99b 	bl	8000bdc <__aeabi_fsub>
 80018a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80018a8:	f7ff f872 	bl	8000990 <__aeabi_fmul>
 80018ac:	1c01      	adds	r1, r0, #0
 80018ae:	1c38      	adds	r0, r7, #0
 80018b0:	f7fe fd08 	bl	80002c4 <__aeabi_fadd>
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	061b      	lsls	r3, r3, #24
 80018b8:	18c7      	adds	r7, r0, r3
                        / (2.0f * pid->tau + pid->T);
 80018ba:	1c29      	adds	r1, r5, #0
 80018bc:	1c30      	adds	r0, r6, #0
 80018be:	f7fe fd01 	bl	80002c4 <__aeabi_fadd>
 80018c2:	1c01      	adds	r1, r0, #0
 80018c4:	1c38      	adds	r0, r7, #0
 80018c6:	f7fe fe9b 	bl	8000600 <__aeabi_fdiv>


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 80018ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
                        / (2.0f * pid->tau + pid->T);
 80018cc:	1c05      	adds	r5, r0, #0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80018ce:	62e0      	str	r0, [r4, #44]	; 0x2c
    pid->out = proportional + pid->integrator + pid->differentiator;
 80018d0:	9803      	ldr	r0, [sp, #12]
 80018d2:	f7fe fcf7 	bl	80002c4 <__aeabi_fadd>
 80018d6:	1c29      	adds	r1, r5, #0
 80018d8:	f7fe fcf4 	bl	80002c4 <__aeabi_fadd>

    if (pid->out > pid->limMax) {
 80018dc:	6966      	ldr	r6, [r4, #20]
    pid->out = proportional + pid->integrator + pid->differentiator;
 80018de:	6360      	str	r0, [r4, #52]	; 0x34
    if (pid->out > pid->limMax) {
 80018e0:	1c31      	adds	r1, r6, #0
    pid->out = proportional + pid->integrator + pid->differentiator;
 80018e2:	1c05      	adds	r5, r0, #0
    if (pid->out > pid->limMax) {
 80018e4:	f7fe fcc2 	bl	800026c <__aeabi_fcmpgt>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d001      	beq.n	80018f0 <PIDController_Update+0xde>

        pid->out = pid->limMax;

    } else if (pid->out < pid->limMin) {

        pid->out = pid->limMin;
 80018ec:	6366      	str	r6, [r4, #52]	; 0x34
 80018ee:	e006      	b.n	80018fe <PIDController_Update+0xec>
    } else if (pid->out < pid->limMin) {
 80018f0:	6926      	ldr	r6, [r4, #16]
 80018f2:	1c28      	adds	r0, r5, #0
 80018f4:	1c31      	adds	r1, r6, #0
 80018f6:	f7fe fca5 	bl	8000244 <__aeabi_fcmplt>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d1f6      	bne.n	80018ec <PIDController_Update+0xda>

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80018fe:	9b01      	ldr	r3, [sp, #4]
    pid->prevMeasurement = measurement;

	/* Return controller output */
    return pid->out;
 8001900:	6b60      	ldr	r0, [r4, #52]	; 0x34
    pid->prevError       = error;
 8001902:	62a3      	str	r3, [r4, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8001904:	9b02      	ldr	r3, [sp, #8]
 8001906:	6323      	str	r3, [r4, #48]	; 0x30

}
 8001908:	b005      	add	sp, #20
 800190a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800190c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190c:	2001      	movs	r0, #1
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_MspInit+0x2c>)
{
 8001910:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	6999      	ldr	r1, [r3, #24]
 8001914:	4301      	orrs	r1, r0
 8001916:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	4002      	ands	r2, r0
 8001920:	9200      	str	r2, [sp, #0]
 8001922:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	430a      	orrs	r2, r1
 8001928:	61da      	str	r2, [r3, #28]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	400b      	ands	r3, r1
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	b002      	add	sp, #8
 8001934:	4770      	bx	lr
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	40021000 	.word	0x40021000

0800193c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800193c:	b510      	push	{r4, lr}
 800193e:	0004      	movs	r4, r0
 8001940:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	2214      	movs	r2, #20
 8001944:	2100      	movs	r1, #0
 8001946:	a803      	add	r0, sp, #12
 8001948:	f001 fbd0 	bl	80030ec <memset>
  if(hadc->Instance==ADC1)
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_ADC_MspInit+0x54>)
 800194e:	6822      	ldr	r2, [r4, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d11b      	bne.n	800198c <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001954:	2080      	movs	r0, #128	; 0x80
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_ADC_MspInit+0x58>)
 8001958:	0080      	lsls	r0, r0, #2
 800195a:	6999      	ldr	r1, [r3, #24]
 800195c:	4301      	orrs	r1, r0
 800195e:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001962:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001966:	4002      	ands	r2, r0
 8001968:	9201      	str	r2, [sp, #4]
 800196a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	695a      	ldr	r2, [r3, #20]
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = Thermocouple_Pin|Current_Pin|Ambient_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	430a      	orrs	r2, r1
 8001972:	615a      	str	r2, [r3, #20]
 8001974:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	400b      	ands	r3, r1
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Thermocouple_Pin|Current_Pin|Ambient_TEMP_Pin;
 800197e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = Thermocouple_Pin|Current_Pin|Ambient_TEMP_Pin;
 8001982:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001984:	3b04      	subs	r3, #4
 8001986:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f000 fc34 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800198c:	b008      	add	sp, #32
 800198e:	bd10      	pop	{r4, pc}
 8001990:	40012400 	.word	0x40012400
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001998:	b510      	push	{r4, lr}
 800199a:	0004      	movs	r4, r0
 800199c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	2214      	movs	r2, #20
 80019a0:	2100      	movs	r1, #0
 80019a2:	a803      	add	r0, sp, #12
 80019a4:	f001 fba2 	bl	80030ec <memset>
  if(hi2c->Instance==I2C1)
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_I2C_MspInit+0x60>)
 80019aa:	6822      	ldr	r2, [r4, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d120      	bne.n	80019f2 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	4c12      	ldr	r4, [pc, #72]	; (80019fc <HAL_I2C_MspInit+0x64>)
 80019b4:	02c9      	lsls	r1, r1, #11
 80019b6:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	4811      	ldr	r0, [pc, #68]	; (8001a00 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	430a      	orrs	r2, r1
 80019bc:	6162      	str	r2, [r4, #20]
 80019be:	6963      	ldr	r3, [r4, #20]
 80019c0:	400b      	ands	r3, r1
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019cc:	3b6f      	subs	r3, #111	; 0x6f
 80019ce:	3bff      	subs	r3, #255	; 0xff
 80019d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d2:	3b0f      	subs	r3, #15
 80019d4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80019d8:	3b02      	subs	r3, #2
 80019da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f000 fc0a 	bl	80021f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	69e2      	ldr	r2, [r4, #28]
 80019e4:	0389      	lsls	r1, r1, #14
 80019e6:	430a      	orrs	r2, r1
 80019e8:	61e2      	str	r2, [r4, #28]
 80019ea:	69e3      	ldr	r3, [r4, #28]
 80019ec:	400b      	ands	r3, r1
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019f2:	b008      	add	sp, #32
 80019f4:	bd10      	pop	{r4, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	40005400 	.word	0x40005400
 80019fc:	40021000 	.word	0x40021000
 8001a00:	48000400 	.word	0x48000400

08001a04 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM14)
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_TIM_Base_MspInit+0x24>)
 8001a06:	6802      	ldr	r2, [r0, #0]
{
 8001a08:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM14)
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d109      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a0e:	2080      	movs	r0, #128	; 0x80
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_TIM_Base_MspInit+0x28>)
 8001a12:	0040      	lsls	r0, r0, #1
 8001a14:	69d1      	ldr	r1, [r2, #28]
 8001a16:	4301      	orrs	r1, r0
 8001a18:	61d1      	str	r1, [r2, #28]
 8001a1a:	69d3      	ldr	r3, [r2, #28]
 8001a1c:	4003      	ands	r3, r0
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001a22:	b002      	add	sp, #8
 8001a24:	4770      	bx	lr
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	40002000 	.word	0x40002000
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a30:	b510      	push	{r4, lr}
 8001a32:	0004      	movs	r4, r0
 8001a34:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	2214      	movs	r2, #20
 8001a38:	2100      	movs	r1, #0
 8001a3a:	a801      	add	r0, sp, #4
 8001a3c:	f001 fb56 	bl	80030ec <memset>
  if(htim->Instance==TIM14)
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_TIM_MspPostInit+0x48>)
 8001a42:	6822      	ldr	r2, [r4, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d114      	bne.n	8001a72 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	2080      	movs	r0, #128	; 0x80
 8001a4a:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <HAL_TIM_MspPostInit+0x4c>)
 8001a4c:	0280      	lsls	r0, r0, #10
 8001a4e:	6951      	ldr	r1, [r2, #20]
 8001a50:	4301      	orrs	r1, r0
 8001a52:	6151      	str	r1, [r2, #20]
 8001a54:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001a56:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4003      	ands	r3, r0
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_Pin;
 8001a5e:	2310      	movs	r3, #16
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001a60:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = PWM_Pin;
 8001a62:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	3b0e      	subs	r3, #14
 8001a66:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001a68:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f000 fbc1 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001a72:	b006      	add	sp, #24
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	40002000 	.word	0x40002000
 8001a7c:	40021000 	.word	0x40021000

08001a80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler>

08001a82 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler>

08001a84 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8a:	f000 f8af 	bl	8001bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8e:	bd10      	pop	{r4, pc}

08001a90 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a90:	4770      	bx	lr
	...

08001a94 <adc_read>:
uint32_t adc_read(uint32_t channel)
{
	uint32_t value;
	ADC_ChannelConfTypeDef adc_ch;
	adc_ch.Channel = channel;
	adc_ch.Rank = 1;
 8001a94:	2301      	movs	r3, #1
{
 8001a96:	b530      	push	{r4, r5, lr}
	adc_ch.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
	HAL_ADC_ConfigChannel(&hadc, &adc_ch);
 8001a98:	4c0d      	ldr	r4, [pc, #52]	; (8001ad0 <adc_read+0x3c>)
{
 8001a9a:	b085      	sub	sp, #20
	HAL_ADC_ConfigChannel(&hadc, &adc_ch);
 8001a9c:	a901      	add	r1, sp, #4
	adc_ch.Channel = channel;
 8001a9e:	9001      	str	r0, [sp, #4]
	adc_ch.Rank = 1;
 8001aa0:	9302      	str	r3, [sp, #8]
	HAL_ADC_ConfigChannel(&hadc, &adc_ch);
 8001aa2:	0020      	movs	r0, r4
	adc_ch.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	9303      	str	r3, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc, &adc_ch);
 8001aa8:	f000 fada 	bl	8002060 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc);
 8001aac:	0020      	movs	r0, r4
 8001aae:	f000 fa25 	bl	8001efc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 8001ab2:	210a      	movs	r1, #10
 8001ab4:	0020      	movs	r0, r4
 8001ab6:	f000 fa6b 	bl	8001f90 <HAL_ADC_PollForConversion>
	value =HAL_ADC_GetValue(&hadc);
 8001aba:	0020      	movs	r0, r4
 8001abc:	f000 facc 	bl	8002058 <HAL_ADC_GetValue>
 8001ac0:	0005      	movs	r5, r0
	HAL_ADC_Stop(&hadc);
 8001ac2:	0020      	movs	r0, r4
 8001ac4:	f000 fa46 	bl	8001f54 <HAL_ADC_Stop>
	return value;
}
 8001ac8:	0028      	movs	r0, r5
 8001aca:	b005      	add	sp, #20
 8001acc:	bd30      	pop	{r4, r5, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	20000044 	.word	0x20000044

08001ad4 <PWM_generation>:

void PWM_generation(uint8_t percentage){
 8001ad4:	b510      	push	{r4, lr}
 8001ad6:	0004      	movs	r4, r0
	HAL_TIM_PWM_Start(&PWM_timer, PWM_Chanel);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <PWM_generation+0x20>)
 8001adc:	f001 f942 	bl	8002d64 <HAL_TIM_PWM_Start>
	if (percentage > 100) percentage=100;
	TIM14->CCR1 = percentage*655;
 8001ae0:	1c23      	adds	r3, r4, #0
 8001ae2:	2c64      	cmp	r4, #100	; 0x64
 8001ae4:	d900      	bls.n	8001ae8 <PWM_generation+0x14>
 8001ae6:	2364      	movs	r3, #100	; 0x64
 8001ae8:	4a03      	ldr	r2, [pc, #12]	; (8001af8 <PWM_generation+0x24>)
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	4353      	muls	r3, r2
 8001aee:	4a03      	ldr	r2, [pc, #12]	; (8001afc <PWM_generation+0x28>)
 8001af0:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001af2:	bd10      	pop	{r4, pc}
 8001af4:	200000d8 	.word	0x200000d8
 8001af8:	0000028f 	.word	0x0000028f
 8001afc:	40002000 	.word	0x40002000

08001b00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b00:	4813      	ldr	r0, [pc, #76]	; (8001b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b04:	f7ff ffc4 	bl	8001a90 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <LoopForever+0x6>)
    LDR R1, [R0]
 8001b0a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001b0c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <LoopForever+0xa>)
    CMP R1, R2
 8001b10:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001b12:	d105      	bne.n	8001b20 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001b14:	4811      	ldr	r0, [pc, #68]	; (8001b5c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001b16:	4912      	ldr	r1, [pc, #72]	; (8001b60 <LoopForever+0x12>)
    STR R1, [R0]
 8001b18:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001b1a:	4812      	ldr	r0, [pc, #72]	; (8001b64 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001b1c:	4912      	ldr	r1, [pc, #72]	; (8001b68 <LoopForever+0x1a>)
    STR R1, [R0]
 8001b1e:	6001      	str	r1, [r0, #0]

08001b20 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	4812      	ldr	r0, [pc, #72]	; (8001b6c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001b22:	4913      	ldr	r1, [pc, #76]	; (8001b70 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001b24:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <LoopForever+0x26>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001b38:	4c10      	ldr	r4, [pc, #64]	; (8001b7c <LoopForever+0x2e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b46:	f001 faad 	bl	80030a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4a:	f7ff fcb5 	bl	80014b8 <main>

08001b4e <LoopForever>:

LoopForever:
    b LoopForever
 8001b4e:	e7fe      	b.n	8001b4e <LoopForever>
  ldr   r0, =_estack
 8001b50:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001b54:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001b58:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001b5c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001b60:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001b64:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001b68:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001b74:	08003e94 	.word	0x08003e94
  ldr r2, =_sbss
 8001b78:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001b7c:	20000330 	.word	0x20000330

08001b80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC1_IRQHandler>
	...

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b88:	20fa      	movs	r0, #250	; 0xfa
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_InitTick+0x3c>)
 8001b8c:	0080      	lsls	r0, r0, #2
 8001b8e:	7819      	ldrb	r1, [r3, #0]
 8001b90:	f7fe faba 	bl	8000108 <__udivsi3>
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_InitTick+0x40>)
 8001b96:	0001      	movs	r1, r0
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	f7fe fab5 	bl	8000108 <__udivsi3>
 8001b9e:	f000 fb0f 	bl	80021c0 <HAL_SYSTICK_Config>
 8001ba2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001ba4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba6:	2c00      	cmp	r4, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001baa:	2d03      	cmp	r5, #3
 8001bac:	d807      	bhi.n	8001bbe <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bae:	3802      	subs	r0, #2
 8001bb0:	0022      	movs	r2, r4
 8001bb2:	0029      	movs	r1, r5
 8001bb4:	f000 fada 	bl	800216c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	0020      	movs	r0, r4
 8001bba:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_InitTick+0x44>)
 8001bbc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	20000004 	.word	0x20000004
 8001bc8:	2000000c 	.word	0x2000000c

08001bcc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	2310      	movs	r3, #16
 8001bce:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <HAL_Init+0x1c>)
{
 8001bd0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	f7ff ffd3 	bl	8001b84 <HAL_InitTick>
  HAL_MspInit();
 8001bde:	f7ff fe95 	bl	800190c <HAL_MspInit>
}
 8001be2:	2000      	movs	r0, #0
 8001be4:	bd10      	pop	{r4, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	40022000 	.word	0x40022000

08001bec <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_IncTick+0x10>)
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_IncTick+0x14>)
 8001bf0:	6811      	ldr	r1, [r2, #0]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	185b      	adds	r3, r3, r1
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	4770      	bx	lr
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	20000124 	.word	0x20000124
 8001c00:	20000008 	.word	0x20000008

08001c04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c04:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <HAL_GetTick+0x8>)
 8001c06:	6818      	ldr	r0, [r3, #0]
}
 8001c08:	4770      	bx	lr
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	20000124 	.word	0x20000124

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff fff6 	bl	8001c04 <HAL_GetTick>
 8001c18:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	1c63      	adds	r3, r4, #1
 8001c1c:	d002      	beq.n	8001c24 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_Delay+0x20>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c24:	f7ff ffee 	bl	8001c04 <HAL_GetTick>
 8001c28:	1b40      	subs	r0, r0, r5
 8001c2a:	42a0      	cmp	r0, r4
 8001c2c:	d3fa      	bcc.n	8001c24 <HAL_Delay+0x14>
  {
  }
}
 8001c2e:	bd70      	pop	{r4, r5, r6, pc}
 8001c30:	20000008 	.word	0x20000008

08001c34 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c34:	2103      	movs	r1, #3
 8001c36:	6803      	ldr	r3, [r0, #0]
{
 8001c38:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c3a:	689a      	ldr	r2, [r3, #8]
{
 8001c3c:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c3e:	400a      	ands	r2, r1
 8001c40:	2a01      	cmp	r2, #1
 8001c42:	d001      	beq.n	8001c48 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c44:	2000      	movs	r0, #0
}
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	4211      	tst	r1, r2
 8001c4c:	d102      	bne.n	8001c54 <ADC_Disable+0x20>
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	0412      	lsls	r2, r2, #16
 8001c52:	d5f7      	bpl.n	8001c44 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c54:	2205      	movs	r2, #5
 8001c56:	689d      	ldr	r5, [r3, #8]
 8001c58:	4015      	ands	r5, r2
 8001c5a:	2d01      	cmp	r5, #1
 8001c5c:	d11e      	bne.n	8001c9c <ADC_Disable+0x68>
      __HAL_ADC_DISABLE(hadc);
 8001c5e:	6899      	ldr	r1, [r3, #8]
 8001c60:	3a03      	subs	r2, #3
 8001c62:	430a      	orrs	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	2203      	movs	r2, #3
 8001c68:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001c6a:	f7ff ffcb 	bl	8001c04 <HAL_GetTick>
 8001c6e:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	422b      	tst	r3, r5
 8001c76:	d0e5      	beq.n	8001c44 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c78:	f7ff ffc4 	bl	8001c04 <HAL_GetTick>
 8001c7c:	1b80      	subs	r0, r0, r6
 8001c7e:	2802      	cmp	r0, #2
 8001c80:	d9f6      	bls.n	8001c70 <ADC_Disable+0x3c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	422b      	tst	r3, r5
 8001c88:	d0f2      	beq.n	8001c70 <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8001c8e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c90:	4313      	orrs	r3, r2
 8001c92:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c96:	431d      	orrs	r5, r3
 8001c98:	63e5      	str	r5, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001c9a:	e7d4      	b.n	8001c46 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9c:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ca8:	4303      	orrs	r3, r0
 8001caa:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001cac:	e7cb      	b.n	8001c46 <ADC_Disable+0x12>
	...

08001cb0 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001cb0:	2300      	movs	r3, #0
{
 8001cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cb4:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8001cb6:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cb8:	6803      	ldr	r3, [r0, #0]
{
 8001cba:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	2a01      	cmp	r2, #1
 8001cc2:	d107      	bne.n	8001cd4 <ADC_Enable+0x24>
 8001cc4:	6819      	ldr	r1, [r3, #0]
 8001cc6:	4211      	tst	r1, r2
 8001cc8:	d001      	beq.n	8001cce <ADC_Enable+0x1e>
  return HAL_OK;
 8001cca:	2000      	movs	r0, #0
}
 8001ccc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	0412      	lsls	r2, r2, #16
 8001cd2:	d4fa      	bmi.n	8001cca <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001cd4:	6899      	ldr	r1, [r3, #8]
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <ADC_Enable+0x94>)
 8001cd8:	4211      	tst	r1, r2
 8001cda:	d008      	beq.n	8001cee <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cdc:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cde:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ce8:	4303      	orrs	r3, r0
 8001cea:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001cec:	e7ee      	b.n	8001ccc <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8001cee:	2201      	movs	r2, #1
 8001cf0:	6899      	ldr	r1, [r3, #8]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <ADC_Enable+0x98>)
 8001cf8:	4914      	ldr	r1, [pc, #80]	; (8001d4c <ADC_Enable+0x9c>)
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	f7fe fa04 	bl	8000108 <__udivsi3>
 8001d00:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001d02:	9b01      	ldr	r3, [sp, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d119      	bne.n	8001d3c <ADC_Enable+0x8c>
    tickstart = HAL_GetTick();
 8001d08:	f7ff ff7c 	bl	8001c04 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d0c:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8001d0e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	422b      	tst	r3, r5
 8001d16:	d1d8      	bne.n	8001cca <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d18:	f7ff ff74 	bl	8001c04 <HAL_GetTick>
 8001d1c:	1b80      	subs	r0, r0, r6
 8001d1e:	2802      	cmp	r0, #2
 8001d20:	d9f6      	bls.n	8001d10 <ADC_Enable+0x60>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	422b      	tst	r3, r5
 8001d28:	d1f2      	bne.n	8001d10 <ADC_Enable+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8001d2e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d30:	4313      	orrs	r3, r2
 8001d32:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d36:	431d      	orrs	r5, r3
 8001d38:	63e5      	str	r5, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001d3a:	e7c7      	b.n	8001ccc <ADC_Enable+0x1c>
      wait_loop_index--;
 8001d3c:	9b01      	ldr	r3, [sp, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	e7de      	b.n	8001d02 <ADC_Enable+0x52>
 8001d44:	80000017 	.word	0x80000017
 8001d48:	20000004 	.word	0x20000004
 8001d4c:	000f4240 	.word	0x000f4240

08001d50 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001d50:	2204      	movs	r2, #4
 8001d52:	6803      	ldr	r3, [r0, #0]
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001d56:	6899      	ldr	r1, [r3, #8]
{
 8001d58:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001d5a:	4211      	tst	r1, r2
 8001d5c:	d101      	bne.n	8001d62 <ADC_ConversionStop+0x12>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d5e:	2000      	movs	r0, #0
}
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d62:	6899      	ldr	r1, [r3, #8]
 8001d64:	4211      	tst	r1, r2
 8001d66:	d006      	beq.n	8001d76 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001d68:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d6a:	0792      	lsls	r2, r2, #30
 8001d6c:	d403      	bmi.n	8001d76 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001d6e:	2210      	movs	r2, #16
 8001d70:	6899      	ldr	r1, [r3, #8]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001d76:	f7ff ff45 	bl	8001c04 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d7a:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8001d7c:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	4233      	tst	r3, r6
 8001d84:	d0eb      	beq.n	8001d5e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d86:	f7ff ff3d 	bl	8001c04 <HAL_GetTick>
 8001d8a:	1b40      	subs	r0, r0, r5
 8001d8c:	2802      	cmp	r0, #2
 8001d8e:	d9f6      	bls.n	8001d7e <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4233      	tst	r3, r6
 8001d96:	d0f2      	beq.n	8001d7e <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d98:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001da4:	4303      	orrs	r3, r0
 8001da6:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001da8:	e7da      	b.n	8001d60 <ADC_ConversionStop+0x10>
	...

08001dac <HAL_ADC_Init>:
{
 8001dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dae:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001db0:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001db2:	2c00      	cmp	r4, #0
 8001db4:	d100      	bne.n	8001db8 <HAL_ADC_Init+0xc>
 8001db6:	e080      	b.n	8001eba <HAL_ADC_Init+0x10e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
 8001dbe:	0022      	movs	r2, r4
 8001dc0:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc2:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001dc4:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001dc6:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001dc8:	f7ff fdb8 	bl	800193c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dce:	06db      	lsls	r3, r3, #27
 8001dd0:	d500      	bpl.n	8001dd4 <HAL_ADC_Init+0x28>
 8001dd2:	e087      	b.n	8001ee4 <HAL_ADC_Init+0x138>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	6899      	ldr	r1, [r3, #8]
 8001dda:	0008      	movs	r0, r1
 8001ddc:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001dde:	4211      	tst	r1, r2
 8001de0:	d000      	beq.n	8001de4 <HAL_ADC_Init+0x38>
 8001de2:	e07f      	b.n	8001ee4 <HAL_ADC_Init+0x138>
    ADC_STATE_CLR_SET(hadc->State,
 8001de4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001de6:	4942      	ldr	r1, [pc, #264]	; (8001ef0 <HAL_ADC_Init+0x144>)
 8001de8:	4011      	ands	r1, r2
 8001dea:	2202      	movs	r2, #2
 8001dec:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001dee:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001df0:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	400a      	ands	r2, r1
 8001df6:	2a01      	cmp	r2, #1
 8001df8:	d105      	bne.n	8001e06 <HAL_ADC_Init+0x5a>
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	4211      	tst	r1, r2
 8001dfe:	d10e      	bne.n	8001e1e <HAL_ADC_Init+0x72>
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	0412      	lsls	r2, r2, #16
 8001e04:	d40b      	bmi.n	8001e1e <HAL_ADC_Init+0x72>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e06:	2118      	movs	r1, #24
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	438a      	bics	r2, r1
 8001e0c:	68a1      	ldr	r1, [r4, #8]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001e12:	6919      	ldr	r1, [r3, #16]
 8001e14:	6862      	ldr	r2, [r4, #4]
 8001e16:	0089      	lsls	r1, r1, #2
 8001e18:	0889      	lsrs	r1, r1, #2
 8001e1a:	4311      	orrs	r1, r2
 8001e1c:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4934      	ldr	r1, [pc, #208]	; (8001ef4 <HAL_ADC_Init+0x148>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001e26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e28:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001e2a:	1e57      	subs	r7, r2, #1
 8001e2c:	1e7a      	subs	r2, r7, #1
 8001e2e:	4197      	sbcs	r7, r2
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001e30:	7e61      	ldrb	r1, [r4, #25]
 8001e32:	68e2      	ldr	r2, [r4, #12]
 8001e34:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e36:	03b6      	lsls	r6, r6, #14
 8001e38:	430e      	orrs	r6, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e3a:	7ea5      	ldrb	r5, [r4, #26]
 8001e3c:	4316      	orrs	r6, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001e3e:	6922      	ldr	r2, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e40:	0369      	lsls	r1, r5, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001e42:	033f      	lsls	r7, r7, #12
 8001e44:	430e      	orrs	r6, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001e46:	2a02      	cmp	r2, #2
 8001e48:	d100      	bne.n	8001e4c <HAL_ADC_Init+0xa0>
 8001e4a:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001e4c:	1d62      	adds	r2, r4, #5
 8001e4e:	7fd2      	ldrb	r2, [r2, #31]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e50:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001e52:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001e54:	4332      	orrs	r2, r6
 8001e56:	433a      	orrs	r2, r7
 8001e58:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e5a:	2901      	cmp	r1, #1
 8001e5c:	d104      	bne.n	8001e68 <HAL_ADC_Init+0xbc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d12c      	bne.n	8001ebc <HAL_ADC_Init+0x110>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	0249      	lsls	r1, r1, #9
 8001e66:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e68:	20c2      	movs	r0, #194	; 0xc2
 8001e6a:	69e1      	ldr	r1, [r4, #28]
 8001e6c:	30ff      	adds	r0, #255	; 0xff
 8001e6e:	4281      	cmp	r1, r0
 8001e70:	d002      	beq.n	8001e78 <HAL_ADC_Init+0xcc>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e72:	6a20      	ldr	r0, [r4, #32]
 8001e74:	4301      	orrs	r1, r0
 8001e76:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e78:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001e7a:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e7c:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001e7e:	4311      	orrs	r1, r2
 8001e80:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e84:	4281      	cmp	r1, r0
 8001e86:	d002      	beq.n	8001e8e <HAL_ADC_Init+0xe2>
 8001e88:	1e48      	subs	r0, r1, #1
 8001e8a:	2806      	cmp	r0, #6
 8001e8c:	d807      	bhi.n	8001e9e <HAL_ADC_Init+0xf2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e8e:	2507      	movs	r5, #7
 8001e90:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001e92:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e94:	43a8      	bics	r0, r5
 8001e96:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001e98:	6958      	ldr	r0, [r3, #20]
 8001e9a:	4301      	orrs	r1, r0
 8001e9c:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4915      	ldr	r1, [pc, #84]	; (8001ef8 <HAL_ADC_Init+0x14c>)
 8001ea2:	400b      	ands	r3, r1
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d111      	bne.n	8001ecc <HAL_ADC_Init+0x120>
      ADC_CLEAR_ERRORCODE(hadc);
 8001ea8:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001eac:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001eae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001eb0:	4393      	bics	r3, r2
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ebc:	2020      	movs	r0, #32
 8001ebe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001ec0:	4328      	orrs	r0, r5
 8001ec2:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ec6:	4301      	orrs	r1, r0
 8001ec8:	63e1      	str	r1, [r4, #60]	; 0x3c
 8001eca:	e7cd      	b.n	8001e68 <HAL_ADC_Init+0xbc>
      ADC_STATE_CLR_SET(hadc->State,
 8001ecc:	2212      	movs	r2, #18
 8001ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed0:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	2310      	movs	r3, #16
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ede:	4303      	orrs	r3, r0
 8001ee0:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001ee2:	e7ea      	b.n	8001eba <HAL_ADC_Init+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee4:	2310      	movs	r3, #16
 8001ee6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eea:	4313      	orrs	r3, r2
 8001eec:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001eee:	e7e4      	b.n	8001eba <HAL_ADC_Init+0x10e>
 8001ef0:	fffffefd 	.word	0xfffffefd
 8001ef4:	fffe0219 	.word	0xfffe0219
 8001ef8:	833fffe7 	.word	0x833fffe7

08001efc <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001efc:	6803      	ldr	r3, [r0, #0]
{
 8001efe:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f00:	689b      	ldr	r3, [r3, #8]
{
 8001f02:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8001f04:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f06:	075b      	lsls	r3, r3, #29
 8001f08:	d41a      	bmi.n	8001f40 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8001f0a:	0025      	movs	r5, r4
 8001f0c:	3534      	adds	r5, #52	; 0x34
 8001f0e:	782b      	ldrb	r3, [r5, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d015      	beq.n	8001f40 <HAL_ADC_Start+0x44>
 8001f14:	2301      	movs	r3, #1
 8001f16:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f18:	7e63      	ldrb	r3, [r4, #25]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d111      	bne.n	8001f42 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f20:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001f22:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001f24:	401a      	ands	r2, r3
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f2c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	63a3      	str	r3, [r4, #56]	; 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 8001f30:	63e0      	str	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001f32:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001f38:	6899      	ldr	r1, [r3, #8]
 8001f3a:	3a18      	subs	r2, #24
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	609a      	str	r2, [r3, #8]
}
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001f42:	0020      	movs	r0, r4
 8001f44:	f7ff feb4 	bl	8001cb0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001f48:	2800      	cmp	r0, #0
 8001f4a:	d0e8      	beq.n	8001f1e <HAL_ADC_Start+0x22>
 8001f4c:	e7f8      	b.n	8001f40 <HAL_ADC_Start+0x44>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	fffff0fe 	.word	0xfffff0fe

08001f54 <HAL_ADC_Stop>:
{ 
 8001f54:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001f56:	0006      	movs	r6, r0
 8001f58:	3634      	adds	r6, #52	; 0x34
 8001f5a:	7833      	ldrb	r3, [r6, #0]
{ 
 8001f5c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001f5e:	2002      	movs	r0, #2
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d012      	beq.n	8001f8a <HAL_ADC_Stop+0x36>
 8001f64:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001f66:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8001f68:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001f6a:	f7ff fef1 	bl	8001d50 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001f72:	0020      	movs	r0, r4
 8001f74:	f7ff fe5e 	bl	8001c34 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d104      	bne.n	8001f86 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f7e:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <HAL_ADC_Stop+0x38>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	431d      	orrs	r5, r3
 8001f84:	63a5      	str	r5, [r4, #56]	; 0x38
  __HAL_UNLOCK(hadc);
 8001f86:	2300      	movs	r3, #0
 8001f88:	7033      	strb	r3, [r6, #0]
}
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
 8001f8c:	fffffefe 	.word	0xfffffefe

08001f90 <HAL_ADC_PollForConversion>:
{
 8001f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f92:	6945      	ldr	r5, [r0, #20]
{
 8001f94:	0004      	movs	r4, r0
 8001f96:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f98:	2d08      	cmp	r5, #8
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001f9c:	6803      	ldr	r3, [r0, #0]
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001fa2:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001fa4:	4203      	tst	r3, r0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa8:	2320      	movs	r3, #32
 8001faa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8001fac:	3434      	adds	r4, #52	; 0x34
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	7023      	strb	r3, [r4, #0]
}
 8001fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8001fb8:	f7ff fe24 	bl	8001c04 <HAL_GetTick>
 8001fbc:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4215      	tst	r5, r2
 8001fc4:	d022      	beq.n	800200c <HAL_ADC_PollForConversion+0x7c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	63a2      	str	r2, [r4, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fd0:	22c0      	movs	r2, #192	; 0xc0
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	4211      	tst	r1, r2
 8001fd8:	d112      	bne.n	8002000 <HAL_ADC_PollForConversion+0x70>
 8001fda:	7ea2      	ldrb	r2, [r4, #26]
 8001fdc:	2a00      	cmp	r2, #0
 8001fde:	d10f      	bne.n	8002000 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	0712      	lsls	r2, r2, #28
 8001fe4:	d50c      	bpl.n	8002000 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	0752      	lsls	r2, r2, #29
 8001fea:	d427      	bmi.n	800203c <HAL_ADC_PollForConversion+0xac>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fec:	210c      	movs	r1, #12
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	438a      	bics	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001ff4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ff6:	4917      	ldr	r1, [pc, #92]	; (8002054 <HAL_ADC_PollForConversion+0xc4>)
 8001ff8:	4011      	ands	r1, r2
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002000:	7e20      	ldrb	r0, [r4, #24]
 8002002:	2800      	cmp	r0, #0
 8002004:	d123      	bne.n	800204e <HAL_ADC_PollForConversion+0xbe>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002006:	220c      	movs	r2, #12
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e7d4      	b.n	8001fb6 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 800200c:	1c72      	adds	r2, r6, #1
 800200e:	d0d7      	beq.n	8001fc0 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002010:	2e00      	cmp	r6, #0
 8002012:	d10d      	bne.n	8002030 <HAL_ADC_PollForConversion+0xa0>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002014:	002a      	movs	r2, r5
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	401a      	ands	r2, r3
 800201c:	421d      	tst	r5, r3
 800201e:	d1ce      	bne.n	8001fbe <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002020:	2304      	movs	r3, #4
 8002022:	6ba1      	ldr	r1, [r4, #56]	; 0x38
          __HAL_UNLOCK(hadc);
 8002024:	3434      	adds	r4, #52	; 0x34
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002026:	430b      	orrs	r3, r1
 8002028:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 800202a:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 800202c:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 800202e:	e7c2      	b.n	8001fb6 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002030:	f7ff fde8 	bl	8001c04 <HAL_GetTick>
 8002034:	1bc0      	subs	r0, r0, r7
 8002036:	42b0      	cmp	r0, r6
 8002038:	d8ec      	bhi.n	8002014 <HAL_ADC_PollForConversion+0x84>
 800203a:	e7c0      	b.n	8001fbe <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203c:	2220      	movs	r2, #32
 800203e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002040:	430a      	orrs	r2, r1
 8002042:	63a2      	str	r2, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002044:	2201      	movs	r2, #1
 8002046:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002048:	430a      	orrs	r2, r1
 800204a:	63e2      	str	r2, [r4, #60]	; 0x3c
 800204c:	e7d8      	b.n	8002000 <HAL_ADC_PollForConversion+0x70>
  return HAL_OK;
 800204e:	2000      	movs	r0, #0
 8002050:	e7b1      	b.n	8001fb6 <HAL_ADC_PollForConversion+0x26>
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	fffffefe 	.word	0xfffffefe

08002058 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002058:	6803      	ldr	r3, [r0, #0]
 800205a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800205c:	4770      	bx	lr
	...

08002060 <HAL_ADC_ConfigChannel>:
{
 8002060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002062:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002064:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8002066:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002068:	3434      	adds	r4, #52	; 0x34
 800206a:	7822      	ldrb	r2, [r4, #0]
{
 800206c:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800206e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8002070:	2002      	movs	r0, #2
 8002072:	2a01      	cmp	r2, #1
 8002074:	d02b      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x6e>
 8002076:	3801      	subs	r0, #1
 8002078:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	6896      	ldr	r6, [r2, #8]
 800207e:	0776      	lsls	r6, r6, #29
 8002080:	d461      	bmi.n	8002146 <HAL_ADC_ConfigChannel+0xe6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002082:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8002084:	4f32      	ldr	r7, [pc, #200]	; (8002150 <HAL_ADC_ConfigChannel+0xf0>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002086:	4098      	lsls	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002088:	001e      	movs	r6, r3
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800208a:	4684      	mov	ip, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 800208c:	6848      	ldr	r0, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800208e:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8002090:	42b8      	cmp	r0, r7
 8002092:	d040      	beq.n	8002116 <HAL_ADC_ConfigChannel+0xb6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002094:	4660      	mov	r0, ip
 8002096:	6a97      	ldr	r7, [r2, #40]	; 0x28
 8002098:	4338      	orrs	r0, r7
 800209a:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800209c:	2080      	movs	r0, #128	; 0x80
 800209e:	0540      	lsls	r0, r0, #21
 80020a0:	4285      	cmp	r5, r0
 80020a2:	d00f      	beq.n	80020c4 <HAL_ADC_ConfigChannel+0x64>
 80020a4:	3d01      	subs	r5, #1
 80020a6:	2d06      	cmp	r5, #6
 80020a8:	d90c      	bls.n	80020c4 <HAL_ADC_ConfigChannel+0x64>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80020aa:	2007      	movs	r0, #7
 80020ac:	6955      	ldr	r5, [r2, #20]
 80020ae:	6889      	ldr	r1, [r1, #8]
 80020b0:	4005      	ands	r5, r0
 80020b2:	42a9      	cmp	r1, r5
 80020b4:	d006      	beq.n	80020c4 <HAL_ADC_ConfigChannel+0x64>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020b6:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80020b8:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020ba:	4385      	bics	r5, r0
 80020bc:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80020be:	6955      	ldr	r5, [r2, #20]
 80020c0:	4329      	orrs	r1, r5
 80020c2:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020c4:	2e02      	cmp	r6, #2
 80020c6:	d903      	bls.n	80020d0 <HAL_ADC_ConfigChannel+0x70>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80020ca:	2300      	movs	r3, #0
 80020cc:	7023      	strb	r3, [r4, #0]
}
 80020ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80020d0:	4820      	ldr	r0, [pc, #128]	; (8002154 <HAL_ADC_ConfigChannel+0xf4>)
 80020d2:	6801      	ldr	r1, [r0, #0]
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d01b      	beq.n	8002110 <HAL_ADC_ConfigChannel+0xb0>
 80020d8:	001a      	movs	r2, r3
 80020da:	3a11      	subs	r2, #17
 80020dc:	4255      	negs	r5, r2
 80020de:	416a      	adcs	r2, r5
 80020e0:	4d1d      	ldr	r5, [pc, #116]	; (8002158 <HAL_ADC_ConfigChannel+0xf8>)
 80020e2:	4252      	negs	r2, r2
 80020e4:	402a      	ands	r2, r5
 80020e6:	2580      	movs	r5, #128	; 0x80
 80020e8:	046d      	lsls	r5, r5, #17
 80020ea:	1952      	adds	r2, r2, r5
 80020ec:	430a      	orrs	r2, r1
 80020ee:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d1e9      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_ADC_ConfigChannel+0xfc>)
 80020f6:	491a      	ldr	r1, [pc, #104]	; (8002160 <HAL_ADC_ConfigChannel+0x100>)
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	f7fe f805 	bl	8000108 <__udivsi3>
 80020fe:	230a      	movs	r3, #10
 8002100:	4343      	muls	r3, r0
            wait_loop_index--;
 8002102:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002104:	9b01      	ldr	r3, [sp, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0de      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x68>
            wait_loop_index--;
 800210a:	9b01      	ldr	r3, [sp, #4]
 800210c:	3b01      	subs	r3, #1
 800210e:	e7f8      	b.n	8002102 <HAL_ADC_ConfigChannel+0xa2>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	0412      	lsls	r2, r2, #16
 8002114:	e7ea      	b.n	80020ec <HAL_ADC_ConfigChannel+0x8c>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002116:	4660      	mov	r0, ip
 8002118:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800211a:	4381      	bics	r1, r0
 800211c:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800211e:	2e02      	cmp	r6, #2
 8002120:	d8d2      	bhi.n	80020c8 <HAL_ADC_ConfigChannel+0x68>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002122:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <HAL_ADC_ConfigChannel+0xf4>)
 8002124:	6811      	ldr	r1, [r2, #0]
 8002126:	2b10      	cmp	r3, #16
 8002128:	d00b      	beq.n	8002142 <HAL_ADC_ConfigChannel+0xe2>
 800212a:	3b11      	subs	r3, #17
 800212c:	4258      	negs	r0, r3
 800212e:	4143      	adcs	r3, r0
 8002130:	20c0      	movs	r0, #192	; 0xc0
 8002132:	425b      	negs	r3, r3
 8002134:	0400      	lsls	r0, r0, #16
 8002136:	4003      	ands	r3, r0
 8002138:	480a      	ldr	r0, [pc, #40]	; (8002164 <HAL_ADC_ConfigChannel+0x104>)
 800213a:	181b      	adds	r3, r3, r0
 800213c:	400b      	ands	r3, r1
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e7c2      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x68>
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_ADC_ConfigChannel+0x108>)
 8002144:	e7fa      	b.n	800213c <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002146:	2220      	movs	r2, #32
 8002148:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800214a:	430a      	orrs	r2, r1
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 800214e:	e7bc      	b.n	80020ca <HAL_ADC_ConfigChannel+0x6a>
 8002150:	00001001 	.word	0x00001001
 8002154:	40012708 	.word	0x40012708
 8002158:	ff400000 	.word	0xff400000
 800215c:	20000004 	.word	0x20000004
 8002160:	000f4240 	.word	0x000f4240
 8002164:	feffffff 	.word	0xfeffffff
 8002168:	ff7fffff 	.word	0xff7fffff

0800216c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800216e:	25ff      	movs	r5, #255	; 0xff
 8002170:	2403      	movs	r4, #3
 8002172:	002a      	movs	r2, r5
 8002174:	4004      	ands	r4, r0
 8002176:	00e4      	lsls	r4, r4, #3
 8002178:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800217a:	0189      	lsls	r1, r1, #6
 800217c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800217e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002180:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002182:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8002184:	2800      	cmp	r0, #0
 8002186:	db0a      	blt.n	800219e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002188:	24c0      	movs	r4, #192	; 0xc0
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_NVIC_SetPriority+0x4c>)
 800218c:	0880      	lsrs	r0, r0, #2
 800218e:	0080      	lsls	r0, r0, #2
 8002190:	18c0      	adds	r0, r0, r3
 8002192:	00a4      	lsls	r4, r4, #2
 8002194:	5903      	ldr	r3, [r0, r4]
 8002196:	401a      	ands	r2, r3
 8002198:	4311      	orrs	r1, r2
 800219a:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800219c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800219e:	200f      	movs	r0, #15
 80021a0:	4003      	ands	r3, r0
 80021a2:	3b08      	subs	r3, #8
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <HAL_NVIC_SetPriority+0x50>)
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	181b      	adds	r3, r3, r0
 80021ac:	69d8      	ldr	r0, [r3, #28]
 80021ae:	4002      	ands	r2, r0
 80021b0:	4311      	orrs	r1, r2
 80021b2:	61d9      	str	r1, [r3, #28]
 80021b4:	e7f2      	b.n	800219c <HAL_NVIC_SetPriority+0x30>
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	2280      	movs	r2, #128	; 0x80
 80021c2:	1e43      	subs	r3, r0, #1
 80021c4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d20d      	bcs.n	80021e8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021cc:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d0:	4807      	ldr	r0, [pc, #28]	; (80021f0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d4:	6a03      	ldr	r3, [r0, #32]
 80021d6:	0609      	lsls	r1, r1, #24
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	430b      	orrs	r3, r1
 80021de:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021e8:	4770      	bx	lr
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	e000e010 	.word	0xe000e010
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80021f4:	2300      	movs	r3, #0
{
 80021f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f8:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	680a      	ldr	r2, [r1, #0]
 80021fc:	0014      	movs	r4, r2
 80021fe:	40dc      	lsrs	r4, r3
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8002202:	b007      	add	sp, #28
 8002204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002206:	2501      	movs	r5, #1
 8002208:	0014      	movs	r4, r2
 800220a:	409d      	lsls	r5, r3
 800220c:	402c      	ands	r4, r5
 800220e:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8002210:	422a      	tst	r2, r5
 8002212:	d100      	bne.n	8002216 <HAL_GPIO_Init+0x22>
 8002214:	e091      	b.n	800233a <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002216:	684a      	ldr	r2, [r1, #4]
 8002218:	005e      	lsls	r6, r3, #1
 800221a:	4694      	mov	ip, r2
 800221c:	2203      	movs	r2, #3
 800221e:	4664      	mov	r4, ip
 8002220:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002222:	2403      	movs	r4, #3
 8002224:	40b4      	lsls	r4, r6
 8002226:	43e4      	mvns	r4, r4
 8002228:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800222a:	1e54      	subs	r4, r2, #1
 800222c:	2c01      	cmp	r4, #1
 800222e:	d82a      	bhi.n	8002286 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8002230:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002232:	9c02      	ldr	r4, [sp, #8]
 8002234:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002236:	68cc      	ldr	r4, [r1, #12]
 8002238:	40b4      	lsls	r4, r6
 800223a:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 800223c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800223e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002240:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002242:	43ac      	bics	r4, r5
 8002244:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002246:	4664      	mov	r4, ip
 8002248:	0924      	lsrs	r4, r4, #4
 800224a:	403c      	ands	r4, r7
 800224c:	409c      	lsls	r4, r3
 800224e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002250:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8002252:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002254:	9c02      	ldr	r4, [sp, #8]
 8002256:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002258:	688c      	ldr	r4, [r1, #8]
 800225a:	40b4      	lsls	r4, r6
 800225c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800225e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002260:	2a02      	cmp	r2, #2
 8002262:	d112      	bne.n	800228a <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8002264:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002266:	2507      	movs	r5, #7
 8002268:	00a4      	lsls	r4, r4, #2
 800226a:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 800226c:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800226e:	9403      	str	r4, [sp, #12]
 8002270:	240f      	movs	r4, #15
 8002272:	401d      	ands	r5, r3
 8002274:	00ad      	lsls	r5, r5, #2
 8002276:	40ac      	lsls	r4, r5
 8002278:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800227a:	690c      	ldr	r4, [r1, #16]
 800227c:	40ac      	lsls	r4, r5
 800227e:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8002280:	9c03      	ldr	r4, [sp, #12]
 8002282:	6227      	str	r7, [r4, #32]
 8002284:	e001      	b.n	800228a <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002286:	2a03      	cmp	r2, #3
 8002288:	d1e3      	bne.n	8002252 <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 800228a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800228c:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800228e:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002290:	4025      	ands	r5, r4
 8002292:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002294:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8002296:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002298:	24c0      	movs	r4, #192	; 0xc0
 800229a:	4662      	mov	r2, ip
 800229c:	02a4      	lsls	r4, r4, #10
 800229e:	4222      	tst	r2, r4
 80022a0:	d04b      	beq.n	800233a <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	2501      	movs	r5, #1
 80022a4:	4a26      	ldr	r2, [pc, #152]	; (8002340 <HAL_GPIO_Init+0x14c>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022a6:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a8:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022aa:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ac:	432c      	orrs	r4, r5
 80022ae:	6194      	str	r4, [r2, #24]
 80022b0:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80022b2:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b4:	402a      	ands	r2, r5
 80022b6:	9205      	str	r2, [sp, #20]
 80022b8:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 80022ba:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_GPIO_Init+0x150>)
 80022bc:	00a4      	lsls	r4, r4, #2
 80022be:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022c0:	220f      	movs	r2, #15
 80022c2:	3502      	adds	r5, #2
 80022c4:	401d      	ands	r5, r3
 80022c6:	00ad      	lsls	r5, r5, #2
 80022c8:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 80022ca:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022cc:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ce:	2200      	movs	r2, #0
 80022d0:	42b8      	cmp	r0, r7
 80022d2:	d008      	beq.n	80022e6 <HAL_GPIO_Init+0xf2>
 80022d4:	4f1c      	ldr	r7, [pc, #112]	; (8002348 <HAL_GPIO_Init+0x154>)
 80022d6:	3201      	adds	r2, #1
 80022d8:	42b8      	cmp	r0, r7
 80022da:	d004      	beq.n	80022e6 <HAL_GPIO_Init+0xf2>
 80022dc:	4f1b      	ldr	r7, [pc, #108]	; (800234c <HAL_GPIO_Init+0x158>)
 80022de:	3201      	adds	r2, #1
 80022e0:	42b8      	cmp	r0, r7
 80022e2:	d000      	beq.n	80022e6 <HAL_GPIO_Init+0xf2>
 80022e4:	3203      	adds	r2, #3
 80022e6:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022e8:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ea:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022ec:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80022ee:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 80022f0:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->RTSR;
 80022f2:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80022f4:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 80022f6:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80022f8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022fa:	02ff      	lsls	r7, r7, #11
 80022fc:	d401      	bmi.n	8002302 <HAL_GPIO_Init+0x10e>
        temp &= ~(iocurrent);
 80022fe:	0035      	movs	r5, r6
 8002300:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002302:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8002304:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002306:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8002308:	9d01      	ldr	r5, [sp, #4]
 800230a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800230c:	02bf      	lsls	r7, r7, #10
 800230e:	d401      	bmi.n	8002314 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8002310:	0035      	movs	r5, r6
 8002312:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002314:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8002316:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8002318:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800231a:	9d01      	ldr	r5, [sp, #4]
 800231c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800231e:	03bf      	lsls	r7, r7, #14
 8002320:	d401      	bmi.n	8002326 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8002322:	0035      	movs	r5, r6
 8002324:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002326:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8002328:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800232a:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800232c:	9e01      	ldr	r6, [sp, #4]
 800232e:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002330:	03ff      	lsls	r7, r7, #15
 8002332:	d401      	bmi.n	8002338 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8002334:	4025      	ands	r5, r4
 8002336:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8002338:	6016      	str	r6, [r2, #0]
    position++;
 800233a:	3301      	adds	r3, #1
 800233c:	e75d      	b.n	80021fa <HAL_GPIO_Init+0x6>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	40021000 	.word	0x40021000
 8002344:	40010000 	.word	0x40010000
 8002348:	48000400 	.word	0x48000400
 800234c:	48000800 	.word	0x48000800
 8002350:	40010400 	.word	0x40010400

08002354 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002354:	6900      	ldr	r0, [r0, #16]
 8002356:	4008      	ands	r0, r1
 8002358:	1e43      	subs	r3, r0, #1
 800235a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800235c:	b2c0      	uxtb	r0, r0
  }
 800235e:	4770      	bx	lr

08002360 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002360:	2a00      	cmp	r2, #0
 8002362:	d001      	beq.n	8002368 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002364:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002366:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002368:	6281      	str	r1, [r0, #40]	; 0x28
}
 800236a:	e7fc      	b.n	8002366 <HAL_GPIO_WritePin+0x6>

0800236c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800236c:	6803      	ldr	r3, [r0, #0]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	0792      	lsls	r2, r2, #30
 8002372:	d501      	bpl.n	8002378 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002374:	2200      	movs	r2, #0
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002378:	2201      	movs	r2, #1
 800237a:	6999      	ldr	r1, [r3, #24]
 800237c:	4211      	tst	r1, r2
 800237e:	d102      	bne.n	8002386 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002380:	6999      	ldr	r1, [r3, #24]
 8002382:	430a      	orrs	r2, r1
 8002384:	619a      	str	r2, [r3, #24]
  }
}
 8002386:	4770      	bx	lr

08002388 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002388:	b530      	push	{r4, r5, lr}
 800238a:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800238c:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800238e:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002390:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002392:	0589      	lsls	r1, r1, #22
 8002394:	431a      	orrs	r2, r3
 8002396:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <I2C_TransferConfig+0x28>)
 800239a:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800239c:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800239e:	0d64      	lsrs	r4, r4, #21
 80023a0:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023a2:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80023a4:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023a6:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80023a8:	432a      	orrs	r2, r5
 80023aa:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023ac:	bd30      	pop	{r4, r5, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	03ff63ff 	.word	0x03ff63ff

080023b4 <I2C_IsErrorOccurred>:
{
 80023b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023b6:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80023b8:	6802      	ldr	r2, [r0, #0]
{
 80023ba:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 80023bc:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023be:	2310      	movs	r3, #16
 80023c0:	000f      	movs	r7, r1
{
 80023c2:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023c4:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 80023c6:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023c8:	4219      	tst	r1, r3
 80023ca:	d00e      	beq.n	80023ea <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023cc:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ce:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 80023d0:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	423a      	tst	r2, r7
 80023da:	d164      	bne.n	80024a6 <I2C_IsErrorOccurred+0xf2>
 80023dc:	9a01      	ldr	r2, [sp, #4]
 80023de:	2a00      	cmp	r2, #0
 80023e0:	d032      	beq.n	8002448 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 80023e2:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80023e4:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80023e6:	9b00      	ldr	r3, [sp, #0]
 80023e8:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023ea:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 80023ec:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023ee:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 80023f0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023f2:	420a      	tst	r2, r1
 80023f4:	d002      	beq.n	80023fc <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 80023f6:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023f8:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80023fa:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	00c9      	lsls	r1, r1, #3
 8002400:	420a      	tst	r2, r1
 8002402:	d003      	beq.n	800240c <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8002404:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002406:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002408:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 800240a:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	0089      	lsls	r1, r1, #2
 8002410:	420a      	tst	r2, r1
 8002412:	d04d      	beq.n	80024b0 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002414:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002416:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8002418:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 800241a:	0020      	movs	r0, r4
 800241c:	f7ff ffa6 	bl	800236c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	4925      	ldr	r1, [pc, #148]	; (80024b8 <I2C_IsErrorOccurred+0x104>)
 8002424:	6853      	ldr	r3, [r2, #4]
 8002426:	400b      	ands	r3, r1
 8002428:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800242a:	0023      	movs	r3, r4
 800242c:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800242e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002430:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 8002432:	4307      	orrs	r7, r0
 8002434:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002436:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	0022      	movs	r2, r4
 800243a:	2300      	movs	r3, #0
 800243c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800243e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002442:	2001      	movs	r0, #1
 8002444:	7023      	strb	r3, [r4, #0]
 8002446:	e035      	b.n	80024b4 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8002448:	1c72      	adds	r2, r6, #1
 800244a:	d0c4      	beq.n	80023d6 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800244c:	f7ff fbda 	bl	8001c04 <HAL_GetTick>
 8002450:	1b40      	subs	r0, r0, r5
 8002452:	42b0      	cmp	r0, r6
 8002454:	d801      	bhi.n	800245a <I2C_IsErrorOccurred+0xa6>
 8002456:	2e00      	cmp	r6, #0
 8002458:	d1bc      	bne.n	80023d4 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 800245a:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800245c:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 800245e:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002460:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002462:	7811      	ldrb	r1, [r2, #0]
 8002464:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002466:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8002468:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	0209      	lsls	r1, r1, #8
 800246e:	420a      	tst	r2, r1
 8002470:	d00c      	beq.n	800248c <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002476:	4210      	tst	r0, r2
 8002478:	d108      	bne.n	800248c <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 800247a:	4661      	mov	r1, ip
 800247c:	2920      	cmp	r1, #32
 800247e:	d005      	beq.n	800248c <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002486:	f7ff fbbd 	bl	8001c04 <HAL_GetTick>
 800248a:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	423b      	tst	r3, r7
 8002492:	d19f      	bne.n	80023d4 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002494:	f7ff fbb6 	bl	8001c04 <HAL_GetTick>
 8002498:	1b40      	subs	r0, r0, r5
 800249a:	2819      	cmp	r0, #25
 800249c:	d9f6      	bls.n	800248c <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024a0:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	e796      	b.n	80023d4 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 80024a6:	9a01      	ldr	r2, [sp, #4]
 80024a8:	2a00      	cmp	r2, #0
 80024aa:	d19a      	bne.n	80023e2 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ac:	61df      	str	r7, [r3, #28]
 80024ae:	e798      	b.n	80023e2 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d1b2      	bne.n	800241a <I2C_IsErrorOccurred+0x66>
}
 80024b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	fe00e800 	.word	0xfe00e800

080024bc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024be:	0004      	movs	r4, r0
 80024c0:	000d      	movs	r5, r1
 80024c2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024c4:	2702      	movs	r7, #2
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	423b      	tst	r3, r7
 80024cc:	d001      	beq.n	80024d2 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80024ce:	2000      	movs	r0, #0
}
 80024d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d2:	0032      	movs	r2, r6
 80024d4:	0029      	movs	r1, r5
 80024d6:	0020      	movs	r0, r4
 80024d8:	f7ff ff6c 	bl	80023b4 <I2C_IsErrorOccurred>
 80024dc:	2800      	cmp	r0, #0
 80024de:	d118      	bne.n	8002512 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80024e0:	1c6b      	adds	r3, r5, #1
 80024e2:	d0f0      	beq.n	80024c6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e4:	f7ff fb8e 	bl	8001c04 <HAL_GetTick>
 80024e8:	1b80      	subs	r0, r0, r6
 80024ea:	42a8      	cmp	r0, r5
 80024ec:	d801      	bhi.n	80024f2 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80024ee:	2d00      	cmp	r5, #0
 80024f0:	d1e9      	bne.n	80024c6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	001a      	movs	r2, r3
 80024f8:	403a      	ands	r2, r7
 80024fa:	423b      	tst	r3, r7
 80024fc:	d1e3      	bne.n	80024c6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024fe:	2120      	movs	r1, #32
 8002500:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002502:	430b      	orrs	r3, r1
 8002504:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002506:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8002508:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800250a:	3341      	adds	r3, #65	; 0x41
 800250c:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800250e:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8002510:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002512:	2001      	movs	r0, #1
 8002514:	e7dc      	b.n	80024d0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08002516 <I2C_WaitOnFlagUntilTimeout>:
{
 8002516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002518:	0004      	movs	r4, r0
 800251a:	000d      	movs	r5, r1
 800251c:	0017      	movs	r7, r2
 800251e:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002520:	6822      	ldr	r2, [r4, #0]
 8002522:	6993      	ldr	r3, [r2, #24]
 8002524:	402b      	ands	r3, r5
 8002526:	1b5b      	subs	r3, r3, r5
 8002528:	4259      	negs	r1, r3
 800252a:	414b      	adcs	r3, r1
 800252c:	42bb      	cmp	r3, r7
 800252e:	d001      	beq.n	8002534 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002530:	2000      	movs	r0, #0
 8002532:	e01f      	b.n	8002574 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002534:	1c73      	adds	r3, r6, #1
 8002536:	d0f4      	beq.n	8002522 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7ff fb64 	bl	8001c04 <HAL_GetTick>
 800253c:	9b06      	ldr	r3, [sp, #24]
 800253e:	1ac0      	subs	r0, r0, r3
 8002540:	42b0      	cmp	r0, r6
 8002542:	d801      	bhi.n	8002548 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002544:	2e00      	cmp	r6, #0
 8002546:	d1eb      	bne.n	8002520 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	402b      	ands	r3, r5
 800254e:	1b5b      	subs	r3, r3, r5
 8002550:	425a      	negs	r2, r3
 8002552:	4153      	adcs	r3, r2
 8002554:	42bb      	cmp	r3, r7
 8002556:	d1e3      	bne.n	8002520 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002558:	2220      	movs	r2, #32
 800255a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800255c:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800255e:	4313      	orrs	r3, r2
 8002560:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002562:	0023      	movs	r3, r4
 8002564:	3341      	adds	r3, #65	; 0x41
 8002566:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	0022      	movs	r2, r4
 800256a:	2300      	movs	r3, #0
 800256c:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800256e:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002570:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002572:	7023      	strb	r3, [r4, #0]
}
 8002574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002576 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002578:	0004      	movs	r4, r0
 800257a:	000e      	movs	r6, r1
 800257c:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800257e:	2520      	movs	r5, #32
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	422b      	tst	r3, r5
 8002586:	d001      	beq.n	800258c <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002588:	2000      	movs	r0, #0
}
 800258a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800258c:	003a      	movs	r2, r7
 800258e:	0031      	movs	r1, r6
 8002590:	0020      	movs	r0, r4
 8002592:	f7ff ff0f 	bl	80023b4 <I2C_IsErrorOccurred>
 8002596:	2800      	cmp	r0, #0
 8002598:	d115      	bne.n	80025c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259a:	f7ff fb33 	bl	8001c04 <HAL_GetTick>
 800259e:	1bc0      	subs	r0, r0, r7
 80025a0:	42b0      	cmp	r0, r6
 80025a2:	d801      	bhi.n	80025a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80025a4:	2e00      	cmp	r6, #0
 80025a6:	d1eb      	bne.n	8002580 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	001a      	movs	r2, r3
 80025ae:	402a      	ands	r2, r5
 80025b0:	422b      	tst	r3, r5
 80025b2:	d1e5      	bne.n	8002580 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025b6:	432b      	orrs	r3, r5
 80025b8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 80025bc:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80025be:	3341      	adds	r3, #65	; 0x41
 80025c0:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 80025c4:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
 80025c8:	e7df      	b.n	800258a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

080025cc <HAL_I2C_Init>:
{
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	0004      	movs	r4, r0
    return HAL_ERROR;
 80025d0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80025d2:	2c00      	cmp	r4, #0
 80025d4:	d03f      	beq.n	8002656 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025d6:	0025      	movs	r5, r4
 80025d8:	3541      	adds	r5, #65	; 0x41
 80025da:	782b      	ldrb	r3, [r5, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80025e2:	0023      	movs	r3, r4
 80025e4:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 80025e6:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80025e8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80025ea:	f7ff f9d5 	bl	8001998 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80025ee:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80025f0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80025f4:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025f6:	481d      	ldr	r0, [pc, #116]	; (800266c <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 80025f8:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025fa:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80025fc:	438a      	bics	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002600:	6861      	ldr	r1, [r4, #4]
 8002602:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_I2C_Init+0xa4>)
 8002604:	400a      	ands	r2, r1
 8002606:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	4002      	ands	r2, r0
 800260c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800260e:	68e2      	ldr	r2, [r4, #12]
 8002610:	2a01      	cmp	r2, #1
 8002612:	d121      	bne.n	8002658 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0209      	lsls	r1, r1, #8
 8002618:	4331      	orrs	r1, r6
 800261a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4915      	ldr	r1, [pc, #84]	; (8002674 <HAL_I2C_Init+0xa8>)
 8002620:	4311      	orrs	r1, r2
 8002622:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002624:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002626:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002628:	4002      	ands	r2, r0
 800262a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800262c:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800262e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002630:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002632:	69a1      	ldr	r1, [r4, #24]
 8002634:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002636:	430a      	orrs	r2, r1
 8002638:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800263a:	6a21      	ldr	r1, [r4, #32]
 800263c:	69e2      	ldr	r2, [r4, #28]
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002642:	2201      	movs	r2, #1
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800264a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800264e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002650:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002652:	3442      	adds	r4, #66	; 0x42
 8002654:	7020      	strb	r0, [r4, #0]
}
 8002656:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002658:	2184      	movs	r1, #132	; 0x84
 800265a:	0209      	lsls	r1, r1, #8
 800265c:	4331      	orrs	r1, r6
 800265e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002660:	2a02      	cmp	r2, #2
 8002662:	d1db      	bne.n	800261c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	e7d7      	b.n	800261c <HAL_I2C_Init+0x50>
 800266c:	ffff7fff 	.word	0xffff7fff
 8002670:	f0ffffff 	.word	0xf0ffffff
 8002674:	02008000 	.word	0x02008000

08002678 <HAL_I2C_Mem_Write>:
{
 8002678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	9304      	str	r3, [sp, #16]
 800267e:	ab0e      	add	r3, sp, #56	; 0x38
 8002680:	9203      	str	r2, [sp, #12]
 8002682:	cb04      	ldmia	r3!, {r2}
 8002684:	0004      	movs	r4, r0
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	9205      	str	r2, [sp, #20]
 800268a:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800268c:	0003      	movs	r3, r0
 800268e:	3341      	adds	r3, #65	; 0x41
 8002690:	9307      	str	r3, [sp, #28]
 8002692:	781b      	ldrb	r3, [r3, #0]
{
 8002694:	000f      	movs	r7, r1
    return HAL_BUSY;
 8002696:	2002      	movs	r0, #2
{
 8002698:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800269a:	2b20      	cmp	r3, #32
 800269c:	d108      	bne.n	80026b0 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 800269e:	2a00      	cmp	r2, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_I2C_Mem_Write+0x30>
 80026a2:	9b06      	ldr	r3, [sp, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80026ae:	2001      	movs	r0, #1
}
 80026b0:	b009      	add	sp, #36	; 0x24
 80026b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80026b4:	0023      	movs	r3, r4
 80026b6:	3340      	adds	r3, #64	; 0x40
 80026b8:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80026ba:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 80026bc:	2a01      	cmp	r2, #1
 80026be:	d0f7      	beq.n	80026b0 <HAL_I2C_Mem_Write+0x38>
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80026c4:	f7ff fa9e 	bl	8001c04 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026c8:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80026ca:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026cc:	9000      	str	r0, [sp, #0]
 80026ce:	2319      	movs	r3, #25
 80026d0:	2201      	movs	r2, #1
 80026d2:	0020      	movs	r0, r4
 80026d4:	0209      	lsls	r1, r1, #8
 80026d6:	f7ff ff1e 	bl	8002516 <I2C_WaitOnFlagUntilTimeout>
 80026da:	2800      	cmp	r0, #0
 80026dc:	d1e7      	bne.n	80026ae <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026de:	2321      	movs	r3, #33	; 0x21
 80026e0:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026e2:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026e4:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026e6:	0023      	movs	r3, r4
 80026e8:	3342      	adds	r3, #66	; 0x42
 80026ea:	9307      	str	r3, [sp, #28]
 80026ec:	2340      	movs	r3, #64	; 0x40
 80026ee:	9a07      	ldr	r2, [sp, #28]
 80026f0:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 80026f2:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80026f6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80026f8:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 80026fa:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80026fc:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026fe:	466b      	mov	r3, sp
 8002700:	7c1a      	ldrb	r2, [r3, #16]
 8002702:	4b4a      	ldr	r3, [pc, #296]	; (800282c <HAL_I2C_Mem_Write+0x1b4>)
 8002704:	0020      	movs	r0, r4
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	045b      	lsls	r3, r3, #17
 800270c:	f7ff fe3c 	bl	8002388 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002710:	002a      	movs	r2, r5
 8002712:	0031      	movs	r1, r6
 8002714:	0020      	movs	r0, r4
 8002716:	f7ff fed1 	bl	80024bc <I2C_WaitOnTXISFlagUntilTimeout>
 800271a:	2800      	cmp	r0, #0
 800271c:	d126      	bne.n	800276c <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800271e:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002720:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002722:	2a01      	cmp	r2, #1
 8002724:	d116      	bne.n	8002754 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002726:	466a      	mov	r2, sp
 8002728:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800272a:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800272e:	0020      	movs	r0, r4
 8002730:	0033      	movs	r3, r6
 8002732:	2200      	movs	r2, #0
 8002734:	9500      	str	r5, [sp, #0]
 8002736:	f7ff feee 	bl	8002516 <I2C_WaitOnFlagUntilTimeout>
 800273a:	2800      	cmp	r0, #0
 800273c:	d116      	bne.n	800276c <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800273e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002740:	2bff      	cmp	r3, #255	; 0xff
 8002742:	d817      	bhi.n	8002774 <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002744:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8002746:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002748:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800274a:	b292      	uxth	r2, r2
 800274c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	9000      	str	r0, [sp, #0]
 8002752:	e014      	b.n	800277e <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002754:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002756:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002758:	0a12      	lsrs	r2, r2, #8
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275c:	0020      	movs	r0, r4
 800275e:	002a      	movs	r2, r5
 8002760:	f7ff feac 	bl	80024bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002764:	2800      	cmp	r0, #0
 8002766:	d101      	bne.n	800276c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	e7dc      	b.n	8002726 <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 800276c:	2300      	movs	r3, #0
 800276e:	3440      	adds	r4, #64	; 0x40
 8002770:	7023      	strb	r3, [r4, #0]
 8002772:	e79c      	b.n	80026ae <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002774:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002776:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002778:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800277a:	045b      	lsls	r3, r3, #17
 800277c:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800277e:	0039      	movs	r1, r7
 8002780:	0020      	movs	r0, r4
 8002782:	f7ff fe01 	bl	8002388 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002786:	002a      	movs	r2, r5
 8002788:	0031      	movs	r1, r6
 800278a:	0020      	movs	r0, r4
 800278c:	f7ff fe96 	bl	80024bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002790:	2800      	cmp	r0, #0
 8002792:	d000      	beq.n	8002796 <HAL_I2C_Mem_Write+0x11e>
 8002794:	e78b      	b.n	80026ae <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002798:	6822      	ldr	r2, [r4, #0]
 800279a:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800279c:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800279e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80027a0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80027a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027ac:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027b0:	b292      	uxth	r2, r2
 80027b2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d017      	beq.n	80027e8 <HAL_I2C_Mem_Write+0x170>
 80027b8:	2a00      	cmp	r2, #0
 80027ba:	d115      	bne.n	80027e8 <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027bc:	0033      	movs	r3, r6
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	0020      	movs	r0, r4
 80027c2:	9500      	str	r5, [sp, #0]
 80027c4:	f7ff fea7 	bl	8002516 <I2C_WaitOnFlagUntilTimeout>
 80027c8:	2800      	cmp	r0, #0
 80027ca:	d000      	beq.n	80027ce <HAL_I2C_Mem_Write+0x156>
 80027cc:	e76f      	b.n	80026ae <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027d0:	2bff      	cmp	r3, #255	; 0xff
 80027d2:	d923      	bls.n	800281c <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d4:	23ff      	movs	r3, #255	; 0xff
 80027d6:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	22ff      	movs	r2, #255	; 0xff
 80027dc:	9000      	str	r0, [sp, #0]
 80027de:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e0:	0039      	movs	r1, r7
 80027e2:	0020      	movs	r0, r4
 80027e4:	f7ff fdd0 	bl	8002388 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80027e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1cb      	bne.n	8002786 <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ee:	002a      	movs	r2, r5
 80027f0:	0031      	movs	r1, r6
 80027f2:	0020      	movs	r0, r4
 80027f4:	f7ff febf 	bl	8002576 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d000      	beq.n	80027fe <HAL_I2C_Mem_Write+0x186>
 80027fc:	e757      	b.n	80026ae <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027fe:	2120      	movs	r1, #32
 8002800:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002802:	4d0b      	ldr	r5, [pc, #44]	; (8002830 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002804:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	402a      	ands	r2, r5
 800280a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800280c:	0023      	movs	r3, r4
 800280e:	3341      	adds	r3, #65	; 0x41
 8002810:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002812:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8002814:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002816:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002818:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800281a:	e749      	b.n	80026b0 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800281c:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 800281e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002820:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002822:	b292      	uxth	r2, r2
 8002824:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	9000      	str	r0, [sp, #0]
 800282a:	e7d9      	b.n	80027e0 <HAL_I2C_Mem_Write+0x168>
 800282c:	80002000 	.word	0x80002000
 8002830:	fe00e800 	.word	0xfe00e800

08002834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002834:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002836:	0004      	movs	r4, r0
 8002838:	3441      	adds	r4, #65	; 0x41
 800283a:	7822      	ldrb	r2, [r4, #0]
{
 800283c:	0003      	movs	r3, r0
 800283e:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002840:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002842:	b2d6      	uxtb	r6, r2
 8002844:	2a20      	cmp	r2, #32
 8002846:	d118      	bne.n	800287a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002848:	001d      	movs	r5, r3
 800284a:	3540      	adds	r5, #64	; 0x40
 800284c:	782a      	ldrb	r2, [r5, #0]
 800284e:	2a01      	cmp	r2, #1
 8002850:	d013      	beq.n	800287a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002852:	2224      	movs	r2, #36	; 0x24
 8002854:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3a23      	subs	r2, #35	; 0x23
 800285a:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800285c:	4807      	ldr	r0, [pc, #28]	; (800287c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800285e:	4391      	bics	r1, r2
 8002860:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002866:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002868:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	4339      	orrs	r1, r7
 800286e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002876:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002878:	7028      	strb	r0, [r5, #0]
  }
}
 800287a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287c:	ffffefff 	.word	0xffffefff

08002880 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002880:	0002      	movs	r2, r0
{
 8002882:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002884:	3241      	adds	r2, #65	; 0x41
 8002886:	7814      	ldrb	r4, [r2, #0]
{
 8002888:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800288a:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800288c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800288e:	2c20      	cmp	r4, #32
 8002890:	d117      	bne.n	80028c2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002892:	001c      	movs	r4, r3
 8002894:	3440      	adds	r4, #64	; 0x40
 8002896:	7826      	ldrb	r6, [r4, #0]
 8002898:	2e01      	cmp	r6, #1
 800289a:	d012      	beq.n	80028c2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800289c:	3022      	adds	r0, #34	; 0x22
 800289e:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3823      	subs	r0, #35	; 0x23
 80028a4:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80028a6:	4f07      	ldr	r7, [pc, #28]	; (80028c4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80028a8:	4386      	bics	r6, r0
 80028aa:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80028ac:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80028ae:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80028b0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80028b2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80028b4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	4308      	orrs	r0, r1
 80028ba:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80028bc:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028be:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80028c0:	7020      	strb	r0, [r4, #0]
  }
}
 80028c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028c4:	fffff0ff 	.word	0xfffff0ff

080028c8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c8:	2201      	movs	r2, #1
 80028ca:	6a03      	ldr	r3, [r0, #32]
{
 80028cc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ce:	4393      	bics	r3, r2
 80028d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028d6:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028d8:	3272      	adds	r2, #114	; 0x72
 80028da:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028dc:	680a      	ldr	r2, [r1, #0]
 80028de:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028e0:	2202      	movs	r2, #2
 80028e2:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028e4:	688a      	ldr	r2, [r1, #8]
 80028e6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <TIM_OC1_SetConfig+0x68>)
 80028ea:	4290      	cmp	r0, r2
 80028ec:	d005      	beq.n	80028fa <TIM_OC1_SetConfig+0x32>
 80028ee:	4e11      	ldr	r6, [pc, #68]	; (8002934 <TIM_OC1_SetConfig+0x6c>)
 80028f0:	42b0      	cmp	r0, r6
 80028f2:	d002      	beq.n	80028fa <TIM_OC1_SetConfig+0x32>
 80028f4:	4e10      	ldr	r6, [pc, #64]	; (8002938 <TIM_OC1_SetConfig+0x70>)
 80028f6:	42b0      	cmp	r0, r6
 80028f8:	d113      	bne.n	8002922 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028fa:	2608      	movs	r6, #8
 80028fc:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028fe:	68ce      	ldr	r6, [r1, #12]
 8002900:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002902:	2604      	movs	r6, #4
 8002904:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002906:	4290      	cmp	r0, r2
 8002908:	d005      	beq.n	8002916 <TIM_OC1_SetConfig+0x4e>
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <TIM_OC1_SetConfig+0x6c>)
 800290c:	4290      	cmp	r0, r2
 800290e:	d002      	beq.n	8002916 <TIM_OC1_SetConfig+0x4e>
 8002910:	4a09      	ldr	r2, [pc, #36]	; (8002938 <TIM_OC1_SetConfig+0x70>)
 8002912:	4290      	cmp	r0, r2
 8002914:	d105      	bne.n	8002922 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002918:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800291a:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800291c:	694c      	ldr	r4, [r1, #20]
 800291e:	4334      	orrs	r4, r6
 8002920:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002922:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002924:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002926:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002928:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292a:	6203      	str	r3, [r0, #32]
}
 800292c:	bd70      	pop	{r4, r5, r6, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800
 800293c:	fffffcff 	.word	0xfffffcff

08002940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002940:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002942:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002944:	6a03      	ldr	r3, [r0, #32]
 8002946:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <TIM_OC3_SetConfig+0x60>)
 8002948:	4013      	ands	r3, r2
 800294a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800294c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800294e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002950:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002952:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002954:	680d      	ldr	r5, [r1, #0]
 8002956:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002958:	4d12      	ldr	r5, [pc, #72]	; (80029a4 <TIM_OC3_SetConfig+0x64>)
 800295a:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800295c:	688d      	ldr	r5, [r1, #8]
 800295e:	022d      	lsls	r5, r5, #8
 8002960:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002962:	4d11      	ldr	r5, [pc, #68]	; (80029a8 <TIM_OC3_SetConfig+0x68>)
 8002964:	42a8      	cmp	r0, r5
 8002966:	d10e      	bne.n	8002986 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002968:	4d10      	ldr	r5, [pc, #64]	; (80029ac <TIM_OC3_SetConfig+0x6c>)
 800296a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800296c:	68cb      	ldr	r3, [r1, #12]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002972:	4d0f      	ldr	r5, [pc, #60]	; (80029b0 <TIM_OC3_SetConfig+0x70>)
 8002974:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002976:	4d0f      	ldr	r5, [pc, #60]	; (80029b4 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002978:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800297a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800297c:	698a      	ldr	r2, [r1, #24]
 800297e:	4332      	orrs	r2, r6
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	432a      	orrs	r2, r5
 8002984:	e005      	b.n	8002992 <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002986:	4d0c      	ldr	r5, [pc, #48]	; (80029b8 <TIM_OC3_SetConfig+0x78>)
 8002988:	42a8      	cmp	r0, r5
 800298a:	d0f4      	beq.n	8002976 <TIM_OC3_SetConfig+0x36>
 800298c:	4d0b      	ldr	r5, [pc, #44]	; (80029bc <TIM_OC3_SetConfig+0x7c>)
 800298e:	42a8      	cmp	r0, r5
 8002990:	d0f1      	beq.n	8002976 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002992:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002994:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002996:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002998:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299a:	6203      	str	r3, [r0, #32]
}
 800299c:	bd70      	pop	{r4, r5, r6, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	fffffeff 	.word	0xfffffeff
 80029a4:	fffffdff 	.word	0xfffffdff
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	fffff7ff 	.word	0xfffff7ff
 80029b0:	fffffbff 	.word	0xfffffbff
 80029b4:	ffffcfff 	.word	0xffffcfff
 80029b8:	40014400 	.word	0x40014400
 80029bc:	40014800 	.word	0x40014800

080029c0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029c0:	6a03      	ldr	r3, [r0, #32]
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <TIM_OC4_SetConfig+0x4c>)
{
 80029c4:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029c6:	4013      	ands	r3, r2
 80029c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ca:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029cc:	4c10      	ldr	r4, [pc, #64]	; (8002a10 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 80029ce:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80029d0:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029d2:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d4:	680c      	ldr	r4, [r1, #0]
 80029d6:	0224      	lsls	r4, r4, #8
 80029d8:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029da:	4c0e      	ldr	r4, [pc, #56]	; (8002a14 <TIM_OC4_SetConfig+0x54>)
 80029dc:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029de:	688c      	ldr	r4, [r1, #8]
 80029e0:	0324      	lsls	r4, r4, #12
 80029e2:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e4:	4c0c      	ldr	r4, [pc, #48]	; (8002a18 <TIM_OC4_SetConfig+0x58>)
 80029e6:	42a0      	cmp	r0, r4
 80029e8:	d005      	beq.n	80029f6 <TIM_OC4_SetConfig+0x36>
 80029ea:	4c0c      	ldr	r4, [pc, #48]	; (8002a1c <TIM_OC4_SetConfig+0x5c>)
 80029ec:	42a0      	cmp	r0, r4
 80029ee:	d002      	beq.n	80029f6 <TIM_OC4_SetConfig+0x36>
 80029f0:	4c0b      	ldr	r4, [pc, #44]	; (8002a20 <TIM_OC4_SetConfig+0x60>)
 80029f2:	42a0      	cmp	r0, r4
 80029f4:	d104      	bne.n	8002a00 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029f6:	4c0b      	ldr	r4, [pc, #44]	; (8002a24 <TIM_OC4_SetConfig+0x64>)
 80029f8:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029fa:	694c      	ldr	r4, [r1, #20]
 80029fc:	01a4      	lsls	r4, r4, #6
 80029fe:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a00:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a02:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002a04:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002a06:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a08:	6202      	str	r2, [r0, #32]
}
 8002a0a:	bd30      	pop	{r4, r5, pc}
 8002a0c:	ffffefff 	.word	0xffffefff
 8002a10:	ffff8cff 	.word	0xffff8cff
 8002a14:	ffffdfff 	.word	0xffffdfff
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40014400 	.word	0x40014400
 8002a20:	40014800 	.word	0x40014800
 8002a24:	ffffbfff 	.word	0xffffbfff

08002a28 <HAL_TIM_PWM_MspInit>:
 8002a28:	4770      	bx	lr
	...

08002a2c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <TIM_Base_SetConfig+0x78>)
{
 8002a2e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002a30:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a32:	4290      	cmp	r0, r2
 8002a34:	d006      	beq.n	8002a44 <TIM_Base_SetConfig+0x18>
 8002a36:	2480      	movs	r4, #128	; 0x80
 8002a38:	05e4      	lsls	r4, r4, #23
 8002a3a:	42a0      	cmp	r0, r4
 8002a3c:	d002      	beq.n	8002a44 <TIM_Base_SetConfig+0x18>
 8002a3e:	4c1a      	ldr	r4, [pc, #104]	; (8002aa8 <TIM_Base_SetConfig+0x7c>)
 8002a40:	42a0      	cmp	r0, r4
 8002a42:	d10c      	bne.n	8002a5e <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a44:	2470      	movs	r4, #112	; 0x70
 8002a46:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002a48:	684c      	ldr	r4, [r1, #4]
 8002a4a:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4c:	4290      	cmp	r0, r2
 8002a4e:	d00f      	beq.n	8002a70 <TIM_Base_SetConfig+0x44>
 8002a50:	2480      	movs	r4, #128	; 0x80
 8002a52:	05e4      	lsls	r4, r4, #23
 8002a54:	42a0      	cmp	r0, r4
 8002a56:	d00b      	beq.n	8002a70 <TIM_Base_SetConfig+0x44>
 8002a58:	4c13      	ldr	r4, [pc, #76]	; (8002aa8 <TIM_Base_SetConfig+0x7c>)
 8002a5a:	42a0      	cmp	r0, r4
 8002a5c:	d008      	beq.n	8002a70 <TIM_Base_SetConfig+0x44>
 8002a5e:	4c13      	ldr	r4, [pc, #76]	; (8002aac <TIM_Base_SetConfig+0x80>)
 8002a60:	42a0      	cmp	r0, r4
 8002a62:	d005      	beq.n	8002a70 <TIM_Base_SetConfig+0x44>
 8002a64:	4c12      	ldr	r4, [pc, #72]	; (8002ab0 <TIM_Base_SetConfig+0x84>)
 8002a66:	42a0      	cmp	r0, r4
 8002a68:	d002      	beq.n	8002a70 <TIM_Base_SetConfig+0x44>
 8002a6a:	4c12      	ldr	r4, [pc, #72]	; (8002ab4 <TIM_Base_SetConfig+0x88>)
 8002a6c:	42a0      	cmp	r0, r4
 8002a6e:	d103      	bne.n	8002a78 <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a70:	4c11      	ldr	r4, [pc, #68]	; (8002ab8 <TIM_Base_SetConfig+0x8c>)
 8002a72:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a74:	68cc      	ldr	r4, [r1, #12]
 8002a76:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a78:	2480      	movs	r4, #128	; 0x80
 8002a7a:	43a3      	bics	r3, r4
 8002a7c:	694c      	ldr	r4, [r1, #20]
 8002a7e:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002a80:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a82:	688b      	ldr	r3, [r1, #8]
 8002a84:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a86:	680b      	ldr	r3, [r1, #0]
 8002a88:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a8a:	4290      	cmp	r0, r2
 8002a8c:	d005      	beq.n	8002a9a <TIM_Base_SetConfig+0x6e>
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <TIM_Base_SetConfig+0x84>)
 8002a90:	4298      	cmp	r0, r3
 8002a92:	d002      	beq.n	8002a9a <TIM_Base_SetConfig+0x6e>
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <TIM_Base_SetConfig+0x88>)
 8002a96:	4298      	cmp	r0, r3
 8002a98:	d101      	bne.n	8002a9e <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 8002a9a:	690b      	ldr	r3, [r1, #16]
 8002a9c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	6143      	str	r3, [r0, #20]
}
 8002aa2:	bd10      	pop	{r4, pc}
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40002000 	.word	0x40002000
 8002ab0:	40014400 	.word	0x40014400
 8002ab4:	40014800 	.word	0x40014800
 8002ab8:	fffffcff 	.word	0xfffffcff

08002abc <HAL_TIM_Base_Init>:
{
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002ac0:	2001      	movs	r0, #1
  if (htim == NULL)
 8002ac2:	2c00      	cmp	r4, #0
 8002ac4:	d021      	beq.n	8002b0a <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac6:	0025      	movs	r5, r4
 8002ac8:	353d      	adds	r5, #61	; 0x3d
 8002aca:	782b      	ldrb	r3, [r5, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002ad2:	0023      	movs	r3, r4
 8002ad4:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ad6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002ad8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8002ada:	f7fe ff93 	bl	8001a04 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae2:	6820      	ldr	r0, [r4, #0]
 8002ae4:	1d21      	adds	r1, r4, #4
 8002ae6:	f7ff ffa1 	bl	8002a2c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aea:	0022      	movs	r2, r4
 8002aec:	2301      	movs	r3, #1
  return HAL_OK;
 8002aee:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af0:	3246      	adds	r2, #70	; 0x46
 8002af2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af6:	3a08      	subs	r2, #8
 8002af8:	7013      	strb	r3, [r2, #0]
 8002afa:	7053      	strb	r3, [r2, #1]
 8002afc:	7093      	strb	r3, [r2, #2]
 8002afe:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	7113      	strb	r3, [r2, #4]
 8002b02:	7153      	strb	r3, [r2, #5]
 8002b04:	7193      	strb	r3, [r2, #6]
 8002b06:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	702b      	strb	r3, [r5, #0]
}
 8002b0a:	bd70      	pop	{r4, r5, r6, pc}

08002b0c <HAL_TIM_PWM_Init>:
{
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002b10:	2001      	movs	r0, #1
  if (htim == NULL)
 8002b12:	2c00      	cmp	r4, #0
 8002b14:	d021      	beq.n	8002b5a <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	0025      	movs	r5, r4
 8002b18:	353d      	adds	r5, #61	; 0x3d
 8002b1a:	782b      	ldrb	r3, [r5, #0]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002b22:	0023      	movs	r3, r4
 8002b24:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002b26:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002b28:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002b2a:	f7ff ff7d 	bl	8002a28 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b32:	6820      	ldr	r0, [r4, #0]
 8002b34:	1d21      	adds	r1, r4, #4
 8002b36:	f7ff ff79 	bl	8002a2c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b3a:	0022      	movs	r2, r4
 8002b3c:	2301      	movs	r3, #1
  return HAL_OK;
 8002b3e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b40:	3246      	adds	r2, #70	; 0x46
 8002b42:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b46:	3a08      	subs	r2, #8
 8002b48:	7013      	strb	r3, [r2, #0]
 8002b4a:	7053      	strb	r3, [r2, #1]
 8002b4c:	7093      	strb	r3, [r2, #2]
 8002b4e:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	7113      	strb	r3, [r2, #4]
 8002b52:	7153      	strb	r3, [r2, #5]
 8002b54:	7193      	strb	r3, [r2, #6]
 8002b56:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	702b      	strb	r3, [r5, #0]
}
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}

08002b5c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	6a03      	ldr	r3, [r0, #32]
{
 8002b60:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b62:	4393      	bics	r3, r2
 8002b64:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b66:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b68:	4c15      	ldr	r4, [pc, #84]	; (8002bc0 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8002b6a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002b6c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b6e:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b70:	680c      	ldr	r4, [r1, #0]
 8002b72:	0224      	lsls	r4, r4, #8
 8002b74:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8002b76:	2420      	movs	r4, #32
 8002b78:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b7a:	688c      	ldr	r4, [r1, #8]
 8002b7c:	0124      	lsls	r4, r4, #4
 8002b7e:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b80:	4c10      	ldr	r4, [pc, #64]	; (8002bc4 <TIM_OC2_SetConfig+0x68>)
 8002b82:	42a0      	cmp	r0, r4
 8002b84:	d10f      	bne.n	8002ba6 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b86:	2480      	movs	r4, #128	; 0x80
 8002b88:	43a2      	bics	r2, r4
 8002b8a:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b8c:	68ca      	ldr	r2, [r1, #12]
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b92:	2440      	movs	r4, #64	; 0x40
 8002b94:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b96:	4e0c      	ldr	r6, [pc, #48]	; (8002bc8 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b98:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b9a:	401e      	ands	r6, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b9c:	698b      	ldr	r3, [r1, #24]
 8002b9e:	4323      	orrs	r3, r4
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4333      	orrs	r3, r6
 8002ba4:	e005      	b.n	8002bb2 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba6:	4c09      	ldr	r4, [pc, #36]	; (8002bcc <TIM_OC2_SetConfig+0x70>)
 8002ba8:	42a0      	cmp	r0, r4
 8002baa:	d0f4      	beq.n	8002b96 <TIM_OC2_SetConfig+0x3a>
 8002bac:	4c08      	ldr	r4, [pc, #32]	; (8002bd0 <TIM_OC2_SetConfig+0x74>)
 8002bae:	42a0      	cmp	r0, r4
 8002bb0:	d0f1      	beq.n	8002b96 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8002bb2:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002bb4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002bb6:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002bb8:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002bba:	6202      	str	r2, [r0, #32]
}
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	ffff8cff 	.word	0xffff8cff
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	fffff3ff 	.word	0xfffff3ff
 8002bcc:	40014400 	.word	0x40014400
 8002bd0:	40014800 	.word	0x40014800

08002bd4 <HAL_TIM_PWM_ConfigChannel>:
{
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002bd6:	0007      	movs	r7, r0
 8002bd8:	373c      	adds	r7, #60	; 0x3c
 8002bda:	783b      	ldrb	r3, [r7, #0]
{
 8002bdc:	0004      	movs	r4, r0
 8002bde:	000e      	movs	r6, r1
 8002be0:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8002be2:	2002      	movs	r0, #2
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d00a      	beq.n	8002bfe <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002be8:	3801      	subs	r0, #1
 8002bea:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 8002bec:	2a08      	cmp	r2, #8
 8002bee:	d03d      	beq.n	8002c6c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002bf0:	d806      	bhi.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	d017      	beq.n	8002c26 <HAL_TIM_PWM_ConfigChannel+0x52>
 8002bf6:	2a04      	cmp	r2, #4
 8002bf8:	d027      	beq.n	8002c4a <HAL_TIM_PWM_ConfigChannel+0x76>
  __HAL_UNLOCK(htim);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	703b      	strb	r3, [r7, #0]
}
 8002bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8002c00:	2a0c      	cmp	r2, #12
 8002c02:	d1fa      	bne.n	8002bfa <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c04:	6820      	ldr	r0, [r4, #0]
 8002c06:	f7ff fedb 	bl	80029c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	0112      	lsls	r2, r2, #4
 8002c10:	69d9      	ldr	r1, [r3, #28]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	491c      	ldr	r1, [pc, #112]	; (8002c8c <HAL_TIM_PWM_ConfigChannel+0xb8>)
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c1e:	6932      	ldr	r2, [r6, #16]
 8002c20:	69d9      	ldr	r1, [r3, #28]
 8002c22:	0212      	lsls	r2, r2, #8
 8002c24:	e02f      	b.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0xb2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c26:	6820      	ldr	r0, [r4, #0]
 8002c28:	f7ff fe4e 	bl	80028c8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	6999      	ldr	r1, [r3, #24]
 8002c32:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c34:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	6931      	ldr	r1, [r6, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c42:	430a      	orrs	r2, r1
 8002c44:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2000      	movs	r0, #0
      break;
 8002c48:	e7d7      	b.n	8002bfa <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c4a:	6820      	ldr	r0, [r4, #0]
 8002c4c:	f7ff ff86 	bl	8002b5c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	6999      	ldr	r1, [r3, #24]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	490b      	ldr	r1, [pc, #44]	; (8002c8c <HAL_TIM_PWM_ConfigChannel+0xb8>)
 8002c60:	400a      	ands	r2, r1
 8002c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c64:	6932      	ldr	r2, [r6, #16]
 8002c66:	6999      	ldr	r1, [r3, #24]
 8002c68:	0212      	lsls	r2, r2, #8
 8002c6a:	e7ea      	b.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	f7ff fe67 	bl	8002940 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c72:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	4315      	orrs	r5, r2
 8002c7a:	61dd      	str	r5, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	438a      	bics	r2, r1
 8002c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	6931      	ldr	r1, [r6, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c86:	430a      	orrs	r2, r1
 8002c88:	61da      	str	r2, [r3, #28]
 8002c8a:	e7dc      	b.n	8002c46 <HAL_TIM_PWM_ConfigChannel+0x72>
 8002c8c:	fffffbff 	.word	0xfffffbff

08002c90 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c90:	231f      	movs	r3, #31
{
 8002c92:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c94:	2401      	movs	r4, #1
 8002c96:	4019      	ands	r1, r3
 8002c98:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c9a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002c9c:	6a03      	ldr	r3, [r0, #32]
 8002c9e:	43a3      	bics	r3, r4
 8002ca0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ca2:	6a03      	ldr	r3, [r0, #32]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	6202      	str	r2, [r0, #32]
}
 8002ca8:	bd10      	pop	{r4, pc}
	...

08002cac <HAL_TIM_OC_Start>:
{
 8002cac:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cae:	0003      	movs	r3, r0
{
 8002cb0:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cb2:	2900      	cmp	r1, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_TIM_OC_Start+0x16>
    return HAL_ERROR;
 8002cb6:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cb8:	333e      	adds	r3, #62	; 0x3e
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	4282      	cmp	r2, r0
 8002cbe:	d018      	beq.n	8002cf2 <HAL_TIM_OC_Start+0x46>
}
 8002cc0:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cc2:	2904      	cmp	r1, #4
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_TIM_OC_Start+0x3a>
 8002cc6:	333f      	adds	r3, #63	; 0x3f
 8002cc8:	781b      	ldrb	r3, [r3, #0]
    return HAL_ERROR;
 8002cca:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	1e5a      	subs	r2, r3, #1
 8002cd0:	4193      	sbcs	r3, r2
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f3      	bne.n	8002cc0 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cd8:	2302      	movs	r3, #2
 8002cda:	0022      	movs	r2, r4
 8002cdc:	2904      	cmp	r1, #4
 8002cde:	d123      	bne.n	8002d28 <HAL_TIM_OC_Start+0x7c>
 8002ce0:	323f      	adds	r2, #63	; 0x3f
 8002ce2:	7013      	strb	r3, [r2, #0]
 8002ce4:	e007      	b.n	8002cf6 <HAL_TIM_OC_Start+0x4a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ce6:	2908      	cmp	r1, #8
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_OC_Start+0x42>
 8002cea:	3340      	adds	r3, #64	; 0x40
 8002cec:	e7ec      	b.n	8002cc8 <HAL_TIM_OC_Start+0x1c>
 8002cee:	3341      	adds	r3, #65	; 0x41
 8002cf0:	e7ea      	b.n	8002cc8 <HAL_TIM_OC_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	6820      	ldr	r0, [r4, #0]
 8002cfa:	f7ff ffc9 	bl	8002c90 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	4914      	ldr	r1, [pc, #80]	; (8002d54 <HAL_TIM_OC_Start+0xa8>)
 8002d02:	428b      	cmp	r3, r1
 8002d04:	d016      	beq.n	8002d34 <HAL_TIM_OC_Start+0x88>
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_TIM_OC_Start+0xac>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d013      	beq.n	8002d34 <HAL_TIM_OC_Start+0x88>
 8002d0c:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <HAL_TIM_OC_Start+0xb0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d010      	beq.n	8002d34 <HAL_TIM_OC_Start+0x88>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	05d2      	lsls	r2, r2, #23
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d114      	bne.n	8002d44 <HAL_TIM_OC_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d1a:	2107      	movs	r1, #7
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d20:	2a06      	cmp	r2, #6
 8002d22:	d112      	bne.n	8002d4a <HAL_TIM_OC_Start+0x9e>
  return HAL_OK;
 8002d24:	2000      	movs	r0, #0
 8002d26:	e7cb      	b.n	8002cc0 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d28:	2908      	cmp	r1, #8
 8002d2a:	d101      	bne.n	8002d30 <HAL_TIM_OC_Start+0x84>
 8002d2c:	3240      	adds	r2, #64	; 0x40
 8002d2e:	e7d8      	b.n	8002ce2 <HAL_TIM_OC_Start+0x36>
 8002d30:	3241      	adds	r2, #65	; 0x41
 8002d32:	e7d6      	b.n	8002ce2 <HAL_TIM_OC_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 8002d34:	2280      	movs	r2, #128	; 0x80
 8002d36:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002d38:	0212      	lsls	r2, r2, #8
 8002d3a:	4302      	orrs	r2, r0
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3e:	428b      	cmp	r3, r1
 8002d40:	d1e7      	bne.n	8002d12 <HAL_TIM_OC_Start+0x66>
 8002d42:	e7ea      	b.n	8002d1a <HAL_TIM_OC_Start+0x6e>
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <HAL_TIM_OC_Start+0xb4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d0e7      	beq.n	8002d1a <HAL_TIM_OC_Start+0x6e>
      __HAL_TIM_ENABLE(htim);
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e7e7      	b.n	8002d24 <HAL_TIM_OC_Start+0x78>
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40014400 	.word	0x40014400
 8002d5c:	40014800 	.word	0x40014800
 8002d60:	40000400 	.word	0x40000400

08002d64 <HAL_TIM_PWM_Start>:
 8002d64:	b510      	push	{r4, lr}
 8002d66:	f7ff ffa1 	bl	8002cac <HAL_TIM_OC_Start>
 8002d6a:	bd10      	pop	{r4, pc}

08002d6c <HAL_TIM_OC_Stop>:
{
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6800      	ldr	r0, [r0, #0]
{
 8002d74:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d76:	f7ff ff8b 	bl	8002c90 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <HAL_TIM_OC_Stop+0x74>)
 8002d7e:	4919      	ldr	r1, [pc, #100]	; (8002de4 <HAL_TIM_OC_Stop+0x78>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d005      	beq.n	8002d90 <HAL_TIM_OC_Stop+0x24>
 8002d84:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_TIM_OC_Stop+0x7c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d002      	beq.n	8002d90 <HAL_TIM_OC_Stop+0x24>
 8002d8a:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_TIM_OC_Stop+0x80>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d10a      	bne.n	8002da6 <HAL_TIM_OC_Stop+0x3a>
    __HAL_TIM_MOE_DISABLE(htim);
 8002d90:	6a1a      	ldr	r2, [r3, #32]
 8002d92:	420a      	tst	r2, r1
 8002d94:	d107      	bne.n	8002da6 <HAL_TIM_OC_Stop+0x3a>
 8002d96:	6a18      	ldr	r0, [r3, #32]
 8002d98:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <HAL_TIM_OC_Stop+0x84>)
 8002d9a:	4210      	tst	r0, r2
 8002d9c:	d103      	bne.n	8002da6 <HAL_TIM_OC_Stop+0x3a>
 8002d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da0:	4814      	ldr	r0, [pc, #80]	; (8002df4 <HAL_TIM_OC_Stop+0x88>)
 8002da2:	4002      	ands	r2, r0
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	420a      	tst	r2, r1
 8002daa:	d107      	bne.n	8002dbc <HAL_TIM_OC_Stop+0x50>
 8002dac:	6a19      	ldr	r1, [r3, #32]
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <HAL_TIM_OC_Stop+0x84>)
 8002db0:	4211      	tst	r1, r2
 8002db2:	d103      	bne.n	8002dbc <HAL_TIM_OC_Stop+0x50>
 8002db4:	2101      	movs	r1, #1
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	438a      	bics	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	2d00      	cmp	r5, #0
 8002dc0:	d103      	bne.n	8002dca <HAL_TIM_OC_Stop+0x5e>
 8002dc2:	343e      	adds	r4, #62	; 0x3e
}
 8002dc4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dc6:	7023      	strb	r3, [r4, #0]
}
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dca:	2d04      	cmp	r5, #4
 8002dcc:	d101      	bne.n	8002dd2 <HAL_TIM_OC_Stop+0x66>
 8002dce:	343f      	adds	r4, #63	; 0x3f
 8002dd0:	e7f8      	b.n	8002dc4 <HAL_TIM_OC_Stop+0x58>
 8002dd2:	2d08      	cmp	r5, #8
 8002dd4:	d101      	bne.n	8002dda <HAL_TIM_OC_Stop+0x6e>
 8002dd6:	3440      	adds	r4, #64	; 0x40
 8002dd8:	e7f4      	b.n	8002dc4 <HAL_TIM_OC_Stop+0x58>
 8002dda:	3441      	adds	r4, #65	; 0x41
 8002ddc:	e7f2      	b.n	8002dc4 <HAL_TIM_OC_Stop+0x58>
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	00001111 	.word	0x00001111
 8002de8:	40014400 	.word	0x40014400
 8002dec:	40014800 	.word	0x40014800
 8002df0:	00000444 	.word	0x00000444
 8002df4:	ffff7fff 	.word	0xffff7fff

08002df8 <HAL_TIM_PWM_Stop>:
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	f7ff ffb7 	bl	8002d6c <HAL_TIM_OC_Stop>
 8002dfe:	bd10      	pop	{r4, pc}

08002e00 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e00:	4b01      	ldr	r3, [pc, #4]	; (8002e08 <LL_SetSystemCoreClock+0x8>)
 8002e02:	6018      	str	r0, [r3, #0]
}
 8002e04:	4770      	bx	lr
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	20000004 	.word	0x20000004

08002e0c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002e0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002e0e:	2217      	movs	r2, #23
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e10:	2301      	movs	r3, #1
void ssd1306_WriteCommand(uint8_t byte) {
 8002e12:	446a      	add	r2, sp
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e14:	425b      	negs	r3, r3
void ssd1306_WriteCommand(uint8_t byte) {
 8002e16:	7010      	strb	r0, [r2, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e18:	9302      	str	r3, [sp, #8]
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	9200      	str	r2, [sp, #0]
 8002e1e:	2178      	movs	r1, #120	; 0x78
 8002e20:	2200      	movs	r2, #0
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <ssd1306_WriteCommand+0x24>)
 8002e26:	f7ff fc27 	bl	8002678 <HAL_I2C_Mem_Write>
}
 8002e2a:	b007      	add	sp, #28
 8002e2c:	bd00      	pop	{pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	20000084 	.word	0x20000084

08002e34 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002e36:	2301      	movs	r3, #1
 8002e38:	b289      	uxth	r1, r1
 8002e3a:	425b      	negs	r3, r3
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	9101      	str	r1, [sp, #4]
 8002e40:	9000      	str	r0, [sp, #0]
 8002e42:	2240      	movs	r2, #64	; 0x40
 8002e44:	2178      	movs	r1, #120	; 0x78
 8002e46:	3302      	adds	r3, #2
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <ssd1306_WriteData+0x20>)
 8002e4a:	f7ff fc15 	bl	8002678 <HAL_I2C_Mem_Write>
}
 8002e4e:	b005      	add	sp, #20
 8002e50:	bd00      	pop	{pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	20000084 	.word	0x20000084

08002e58 <ssd1306_Fill>:
/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002e58:	1e42      	subs	r2, r0, #1
 8002e5a:	4190      	sbcs	r0, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002e60:	4903      	ldr	r1, [pc, #12]	; (8002e70 <ssd1306_Fill+0x18>)
 8002e62:	4240      	negs	r0, r0
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002e64:	0092      	lsls	r2, r2, #2
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002e66:	54c8      	strb	r0, [r1, r3]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002e68:	3301      	adds	r3, #1
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d1fb      	bne.n	8002e66 <ssd1306_Fill+0xe>
    }
}
 8002e6e:	4770      	bx	lr
 8002e70:	2000012e 	.word	0x2000012e

08002e74 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	24b0      	movs	r4, #176	; 0xb0
 8002e78:	4d09      	ldr	r5, [pc, #36]	; (8002ea0 <ssd1306_UpdateScreen+0x2c>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002e7a:	0020      	movs	r0, r4
 8002e7c:	f7ff ffc6 	bl	8002e0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7ff ffc3 	bl	8002e0c <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e86:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002e88:	2010      	movs	r0, #16
 8002e8a:	f7ff ffbf 	bl	8002e0c <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e8e:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002e90:	0028      	movs	r0, r5
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	f7ff ffce 	bl	8002e34 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e98:	3580      	adds	r5, #128	; 0x80
 8002e9a:	2cb4      	cmp	r4, #180	; 0xb4
 8002e9c:	d1ed      	bne.n	8002e7a <ssd1306_UpdateScreen+0x6>
    }
}
 8002e9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ea0:	2000012e 	.word	0x2000012e

08002ea4 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002ea4:	b243      	sxtb	r3, r0
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002ea6:	b570      	push	{r4, r5, r6, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	db0f      	blt.n	8002ecc <ssd1306_DrawPixel+0x28>
 8002eac:	291f      	cmp	r1, #31
 8002eae:	d80d      	bhi.n	8002ecc <ssd1306_DrawPixel+0x28>
        return;
    }
   
    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002eb0:	2407      	movs	r4, #7
 8002eb2:	08cb      	lsrs	r3, r1, #3
 8002eb4:	400c      	ands	r4, r1
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	40a1      	lsls	r1, r4
 8002eba:	01db      	lsls	r3, r3, #7
 8002ebc:	4e05      	ldr	r6, [pc, #20]	; (8002ed4 <ssd1306_DrawPixel+0x30>)
 8002ebe:	1818      	adds	r0, r3, r0
 8002ec0:	5635      	ldrsb	r5, [r6, r0]
 8002ec2:	b24b      	sxtb	r3, r1
    if(color == White) {
 8002ec4:	2a01      	cmp	r2, #1
 8002ec6:	d102      	bne.n	8002ece <ssd1306_DrawPixel+0x2a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ec8:	432b      	orrs	r3, r5
 8002eca:	5433      	strb	r3, [r6, r0]
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
    }
}
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ece:	439d      	bics	r5, r3
 8002ed0:	5435      	strb	r5, [r6, r0]
 8002ed2:	e7fb      	b.n	8002ecc <ssd1306_DrawPixel+0x28>
 8002ed4:	2000012e 	.word	0x2000012e

08002ed8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002eda:	0004      	movs	r4, r0
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002edc:	b089      	sub	sp, #36	; 0x24
    if (ch < 32 || ch > 126)
 8002ede:	3c20      	subs	r4, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002ee0:	9304      	str	r3, [sp, #16]
    if (ch < 32 || ch > 126)
 8002ee2:	b2e3      	uxtb	r3, r4
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002ee4:	0005      	movs	r5, r0
 8002ee6:	9106      	str	r1, [sp, #24]
 8002ee8:	9207      	str	r2, [sp, #28]
    if (ch < 32 || ch > 126)
 8002eea:	2b5e      	cmp	r3, #94	; 0x5e
 8002eec:	d840      	bhi.n	8002f70 <ssd1306_WriteChar+0x98>
 8002eee:	ab06      	add	r3, sp, #24
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	9301      	str	r3, [sp, #4]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <ssd1306_WriteChar+0x9c>)
 8002ef6:	9901      	ldr	r1, [sp, #4]
 8002ef8:	881a      	ldrh	r2, [r3, #0]
 8002efa:	9200      	str	r2, [sp, #0]
 8002efc:	1852      	adds	r2, r2, r1
 8002efe:	2a80      	cmp	r2, #128	; 0x80
 8002f00:	dc36      	bgt.n	8002f70 <ssd1306_WriteChar+0x98>
 8002f02:	aa06      	add	r2, sp, #24
 8002f04:	7852      	ldrb	r2, [r2, #1]
 8002f06:	9202      	str	r2, [sp, #8]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002f08:	885b      	ldrh	r3, [r3, #2]
 8002f0a:	9303      	str	r3, [sp, #12]
 8002f0c:	189b      	adds	r3, r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	dc2e      	bgt.n	8002f70 <ssd1306_WriteChar+0x98>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002f12:	2700      	movs	r7, #0
 8002f14:	4354      	muls	r4, r2
 8002f16:	0064      	lsls	r4, r4, #1
 8002f18:	9b02      	ldr	r3, [sp, #8]
 8002f1a:	42bb      	cmp	r3, r7
 8002f1c:	d808      	bhi.n	8002f30 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002f1e:	9a01      	ldr	r2, [sp, #4]
 8002f20:	9b00      	ldr	r3, [sp, #0]
 8002f22:	4694      	mov	ip, r2
 8002f24:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <ssd1306_WriteChar+0x9c>)
 8002f26:	4463      	add	r3, ip
 8002f28:	8013      	strh	r3, [r2, #0]
    
    // Return written char for validation
    return ch;
}
 8002f2a:	0028      	movs	r0, r5
 8002f2c:	b009      	add	sp, #36	; 0x24
 8002f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8002f30:	2600      	movs	r6, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002f32:	9b07      	ldr	r3, [sp, #28]
 8002f34:	5b1b      	ldrh	r3, [r3, r4]
 8002f36:	9305      	str	r3, [sp, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002f38:	9b01      	ldr	r3, [sp, #4]
 8002f3a:	42b3      	cmp	r3, r6
 8002f3c:	d802      	bhi.n	8002f44 <ssd1306_WriteChar+0x6c>
    for(i = 0; i < Font.FontHeight; i++) {
 8002f3e:	3701      	adds	r7, #1
 8002f40:	3402      	adds	r4, #2
 8002f42:	e7e9      	b.n	8002f18 <ssd1306_WriteChar+0x40>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f44:	9b00      	ldr	r3, [sp, #0]
            if((b << j) & 0x8000)  {
 8002f46:	2280      	movs	r2, #128	; 0x80
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f48:	18f0      	adds	r0, r6, r3
 8002f4a:	9b03      	ldr	r3, [sp, #12]
            if((b << j) & 0x8000)  {
 8002f4c:	0212      	lsls	r2, r2, #8
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f4e:	18f9      	adds	r1, r7, r3
            if((b << j) & 0x8000)  {
 8002f50:	9b05      	ldr	r3, [sp, #20]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f52:	b2c0      	uxtb	r0, r0
            if((b << j) & 0x8000)  {
 8002f54:	40b3      	lsls	r3, r6
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f56:	b2c9      	uxtb	r1, r1
            if((b << j) & 0x8000)  {
 8002f58:	4213      	tst	r3, r2
 8002f5a:	d004      	beq.n	8002f66 <ssd1306_WriteChar+0x8e>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f5c:	9a04      	ldr	r2, [sp, #16]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002f5e:	f7ff ffa1 	bl	8002ea4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002f62:	3601      	adds	r6, #1
 8002f64:	e7e8      	b.n	8002f38 <ssd1306_WriteChar+0x60>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002f66:	9b04      	ldr	r3, [sp, #16]
 8002f68:	425a      	negs	r2, r3
 8002f6a:	415a      	adcs	r2, r3
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	e7f6      	b.n	8002f5e <ssd1306_WriteChar+0x86>
        return 0;
 8002f70:	2500      	movs	r5, #0
 8002f72:	e7da      	b.n	8002f2a <ssd1306_WriteChar+0x52>
 8002f74:	20000128 	.word	0x20000128

08002f78 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f7a:	0004      	movs	r4, r0
 8002f7c:	001d      	movs	r5, r3
 8002f7e:	9100      	str	r1, [sp, #0]
 8002f80:	9201      	str	r2, [sp, #4]
    while (*str) {
 8002f82:	7820      	ldrb	r0, [r4, #0]
 8002f84:	2800      	cmp	r0, #0
 8002f86:	d100      	bne.n	8002f8a <ssd1306_WriteString+0x12>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8002f88:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002f8a:	002b      	movs	r3, r5
 8002f8c:	9900      	ldr	r1, [sp, #0]
 8002f8e:	9a01      	ldr	r2, [sp, #4]
 8002f90:	f7ff ffa2 	bl	8002ed8 <ssd1306_WriteChar>
 8002f94:	0003      	movs	r3, r0
 8002f96:	7820      	ldrb	r0, [r4, #0]
 8002f98:	4283      	cmp	r3, r0
 8002f9a:	d1f5      	bne.n	8002f88 <ssd1306_WriteString+0x10>
        str++;
 8002f9c:	3401      	adds	r4, #1
 8002f9e:	e7f0      	b.n	8002f82 <ssd1306_WriteString+0xa>

08002fa0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8002fa0:	4b01      	ldr	r3, [pc, #4]	; (8002fa8 <ssd1306_SetCursor+0x8>)
 8002fa2:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8002fa4:	8059      	strh	r1, [r3, #2]
}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000128 	.word	0x20000128

08002fac <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002fac:	b510      	push	{r4, lr}
 8002fae:	0004      	movs	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002fb0:	2081      	movs	r0, #129	; 0x81
 8002fb2:	f7ff ff2b 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002fb6:	0020      	movs	r0, r4
 8002fb8:	f7ff ff28 	bl	8002e0c <ssd1306_WriteCommand>
}
 8002fbc:	bd10      	pop	{r4, pc}
	...

08002fc0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	b510      	push	{r4, lr}
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 8002fc4:	20ae      	movs	r0, #174	; 0xae
    if (on) {
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <ssd1306_SetDisplayOn+0xe>
        SSD1306.DisplayOn = 1;
 8002fca:	2301      	movs	r3, #1
        value = 0xAF;   // Display on
 8002fcc:	20af      	movs	r0, #175	; 0xaf
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
}
 8002fce:	4a02      	ldr	r2, [pc, #8]	; (8002fd8 <ssd1306_SetDisplayOn+0x18>)
 8002fd0:	7153      	strb	r3, [r2, #5]
    ssd1306_WriteCommand(value);
 8002fd2:	f7ff ff1b 	bl	8002e0c <ssd1306_WriteCommand>
}
 8002fd6:	bd10      	pop	{r4, pc}
 8002fd8:	20000128 	.word	0x20000128

08002fdc <ssd1306_Init>:
void ssd1306_Init(void) {
 8002fdc:	b510      	push	{r4, lr}
    HAL_Delay(100);
 8002fde:	2064      	movs	r0, #100	; 0x64
 8002fe0:	f7fe fe16 	bl	8001c10 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7ff ffeb 	bl	8002fc0 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002fea:	2020      	movs	r0, #32
 8002fec:	f7ff ff0e 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7ff ff0b 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002ff6:	20b0      	movs	r0, #176	; 0xb0
 8002ff8:	f7ff ff08 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002ffc:	20c8      	movs	r0, #200	; 0xc8
 8002ffe:	f7ff ff05 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8003002:	2000      	movs	r0, #0
 8003004:	f7ff ff02 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003008:	2010      	movs	r0, #16
 800300a:	f7ff feff 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800300e:	2040      	movs	r0, #64	; 0x40
 8003010:	f7ff fefc 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8003014:	20ff      	movs	r0, #255	; 0xff
 8003016:	f7ff ffc9 	bl	8002fac <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800301a:	20a1      	movs	r0, #161	; 0xa1
 800301c:	f7ff fef6 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003020:	20a6      	movs	r0, #166	; 0xa6
 8003022:	f7ff fef3 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003026:	20a8      	movs	r0, #168	; 0xa8
 8003028:	f7ff fef0 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x1F); //
 800302c:	201f      	movs	r0, #31
 800302e:	f7ff feed 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003032:	20a4      	movs	r0, #164	; 0xa4
 8003034:	f7ff feea 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003038:	20d3      	movs	r0, #211	; 0xd3
 800303a:	f7ff fee7 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800303e:	2000      	movs	r0, #0
 8003040:	f7ff fee4 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003044:	20d5      	movs	r0, #213	; 0xd5
 8003046:	f7ff fee1 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800304a:	20f0      	movs	r0, #240	; 0xf0
 800304c:	f7ff fede 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003050:	20d9      	movs	r0, #217	; 0xd9
 8003052:	f7ff fedb 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003056:	2022      	movs	r0, #34	; 0x22
 8003058:	f7ff fed8 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800305c:	20da      	movs	r0, #218	; 0xda
 800305e:	f7ff fed5 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x02);
 8003062:	2002      	movs	r0, #2
 8003064:	f7ff fed2 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003068:	20db      	movs	r0, #219	; 0xdb
 800306a:	f7ff fecf 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800306e:	2020      	movs	r0, #32
 8003070:	f7ff fecc 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003074:	208d      	movs	r0, #141	; 0x8d
 8003076:	f7ff fec9 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800307a:	2014      	movs	r0, #20
 800307c:	f7ff fec6 	bl	8002e0c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003080:	2001      	movs	r0, #1
 8003082:	f7ff ff9d 	bl	8002fc0 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8003086:	2000      	movs	r0, #0
 8003088:	f7ff fee6 	bl	8002e58 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 800308c:	f7ff fef2 	bl	8002e74 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8003090:	2200      	movs	r2, #0
 8003092:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <ssd1306_Init+0xc4>)
 8003094:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003096:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8003098:	3201      	adds	r2, #1
 800309a:	711a      	strb	r2, [r3, #4]
}
 800309c:	bd10      	pop	{r4, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	20000128 	.word	0x20000128

080030a4 <__libc_init_array>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	2600      	movs	r6, #0
 80030a8:	4d0c      	ldr	r5, [pc, #48]	; (80030dc <__libc_init_array+0x38>)
 80030aa:	4c0d      	ldr	r4, [pc, #52]	; (80030e0 <__libc_init_array+0x3c>)
 80030ac:	1b64      	subs	r4, r4, r5
 80030ae:	10a4      	asrs	r4, r4, #2
 80030b0:	42a6      	cmp	r6, r4
 80030b2:	d109      	bne.n	80030c8 <__libc_init_array+0x24>
 80030b4:	2600      	movs	r6, #0
 80030b6:	f000 f821 	bl	80030fc <_init>
 80030ba:	4d0a      	ldr	r5, [pc, #40]	; (80030e4 <__libc_init_array+0x40>)
 80030bc:	4c0a      	ldr	r4, [pc, #40]	; (80030e8 <__libc_init_array+0x44>)
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	42a6      	cmp	r6, r4
 80030c4:	d105      	bne.n	80030d2 <__libc_init_array+0x2e>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	00b3      	lsls	r3, r6, #2
 80030ca:	58eb      	ldr	r3, [r5, r3]
 80030cc:	4798      	blx	r3
 80030ce:	3601      	adds	r6, #1
 80030d0:	e7ee      	b.n	80030b0 <__libc_init_array+0xc>
 80030d2:	00b3      	lsls	r3, r6, #2
 80030d4:	58eb      	ldr	r3, [r5, r3]
 80030d6:	4798      	blx	r3
 80030d8:	3601      	adds	r6, #1
 80030da:	e7f2      	b.n	80030c2 <__libc_init_array+0x1e>
 80030dc:	08003e8c 	.word	0x08003e8c
 80030e0:	08003e8c 	.word	0x08003e8c
 80030e4:	08003e8c 	.word	0x08003e8c
 80030e8:	08003e90 	.word	0x08003e90

080030ec <memset>:
 80030ec:	0003      	movs	r3, r0
 80030ee:	1882      	adds	r2, r0, r2
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d100      	bne.n	80030f6 <memset+0xa>
 80030f4:	4770      	bx	lr
 80030f6:	7019      	strb	r1, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	e7f9      	b.n	80030f0 <memset+0x4>

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
